(function(){
    if (!String.prototype.startsWith) {
        Object.defineProperty(String.prototype, 'startsWith', {
            value: function(search, rawPos) {
                var pos = rawPos > 0 ? rawPos|0 : 0;
                return this.substring(pos, pos + search.length) === search;
            }
        });
    }
    var urlMap = {};
    var urlpathMatch = /[A-Za-z0-9\$\-_\.\+!\*'\(\),%]/
    function processTransitionMap(urlMap, basePath){
        var obj = {}, rgx;
        for(var key in urlMap){
            rgx = key;
            rgx = basePath ? basePath + rgx : rgx;
            var testrgx = new RegExp(/test/), 
            res = "test".match(testrgx), 
            matchedGroup;
            if(res.hasOwnProperty("groups")){
                matchedGroup = true;
            }
            else{
                matchedGroup = false;
            }
            if(matchedGroup){
                rgx = rgx.replace("?","\\?");
            }
            var groups = [], dLen = 0;
            rgx = rgx.replace(/{[^}]*}/g, function(itm,pos,str){
                if(matchedGroup == false){
                    var delimiterInd = itm.length + pos;
                    var dObj = {dyn:itm, pos:pos-dLen};
                    if(str[delimiterInd] !== undefined){
                        dObj.delimiter = str[delimiterInd];
                    }
                    else{
                        dObj.end = true;
                    }
                    dLen += itm.length;
                    groups.push(dObj);
                }
                itm = itm.replace("{","");
                itm = itm.replace("}","");        
                itm = itm.trim();
                return matchedGroup ? "(?<"+itm+">"+urlpathMatch.source+"+)" : urlpathMatch.source+"+";
            });
            if(!matchedGroup){
                rgx = rgx.replace("?","\\?");
            }
            rgx = rgx.startsWith("/") ? rgx : "/"+rgx; 
            rgx = rgx + "$";
            obj[rgx] = { target : urlMap[key], groups: !matchedGroup ? groups : undefined}; 
        }
        return obj;
    }
    function rMatch(str, basePath){
        if(urlMap.hasOwnProperty(str)){
            return urlMap[str].target;
        }
        for(var key in urlMap){
            var matchedObj = str.match(new RegExp(key)), targetStr = basePath ? basePath + urlMap[key].target : urlMap[key].target;
            if(matchedObj){
                var groups = {};
                if(urlMap[key].groups){
                    var pointer = 1, toAddLen = 0;
                    urlMap[key].groups.forEach(function(obj){
                        pointer = 1 + obj.pos + toAddLen;
                        var res;
                        if(obj.delimiter){
                            res = str.slice(pointer, getStr(str, obj.delimiter, pointer));
                        }
                        else if(obj.end){
                            res = str.slice(pointer, str.length);
                        }
                        toAddLen+=res.length;
                        obj.dyn = obj.dyn.replace("{","");
                        obj.dyn = obj.dyn.replace("}","");
                        groups[obj.dyn] = res;
                    });
                }
                groups = matchedObj.groups || groups;
                if(groups){
                    for(var mKey in groups){
                        targetStr = targetStr.replace(new RegExp("{"+mKey+"}"), groups[mKey]);
                    }
                }
                return targetStr;
            }
        }
    }
    function getStr(str, delimiter, start){
        var len = str.length;
        for(var i=start; i<len; i++){
            if(str[i] == delimiter){
                return i;
            }
        }
    }    
    window.TransitionMap = {
        init : function(obj){
            var basePath = obj.basePath ? obj.basePath.trim():undefined;
            Object.assign(urlMap, processTransitionMap(obj.map, basePath));
            var currentPath = window.location.pathname+window.location.hash;
            var toTransitionPath = rMatch(currentPath, basePath);
            if(toTransitionPath){
                toTransitionPath = !toTransitionPath.startsWith("/") ? "/"+toTransitionPath : toTransitionPath; 
                window.location.replace(toTransitionPath);
            }
        }
    }
})();
