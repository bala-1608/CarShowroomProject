(()=>{var e={238:()=>{window.DOMPurifyCopy=window.DOMPurify?window.DOMPurify:void 0},508:function(e){e.exports=function(){"use strict";function e(e,t,n,r,o,i,a){if(r||!(t in e))return Object.defineProperty&&function(){try{return Object.defineProperty({},"x",{}),1}catch(e){return}}()?(o=!0===o,i=!0===i,a=!0===a,Object.defineProperty(e,t,{value:n,writable:o,configurable:i,enumerable:a})):(e[t]=n,e)}function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var n=(function(e,n){n&&t(e.prototype,n)}(r,[{key:"debug",value:function(){var e;if(window&&window.console&&this.level!==this.LEVELS.NONE&&this.level===this.LEVELS.DEBUG){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];(e=window.console).debug.apply(e,n.concat([performance.now()]))}}},{key:"info",value:function(){var e;if(window&&window.console&&this.level!==this.LEVELS.NONE&&!(this.level>this.LEVELS.INFO)){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];(e=window.console).log.apply(e,n.concat([performance.now()]))}}},{key:"warn",value:function(){var e;if(window&&window.console&&this.level!==this.LEVELS.NONE&&!(this.level>this.LEVELS.WARN)){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];(e=window.console).warn.apply(e,n.concat([performance.now()]))}}},{key:"error",value:function(){var e;if(window&&window.console&&this.level!==this.LEVELS.NONE&&!(this.level>this.LEVELS.ERROR)){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];(e=window.console).error.apply(e,n.concat([performance.now()]))}}}]),r);function r(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),this.LEVELS={NONE:-1,DEBUG:0,INFO:1,WARN:2,ERROR:3},e===this.LEVELS.NONE||e===this.LEVELS.DEBUG||e===this.LEVELS.INFO||e===this.LEVELS.WARN||e===this.LEVELS.ERROR?this.level=e:this.level=this.LEVELS.ERROR}var o=window&&window.ZWAF?window.ZWAF:{version:"7.0.0"},i=new n;o.defineProperty||(o.defineProperty=e),o.logger||(o.logger=i),o["7_0_0"]||(o["7_0_0"]={version:"7.0.0",defineProperty:e,logger:i});var a=!1;function l(e,t){if(e instanceof Object)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t(n,e[n])}function c(e,t){var n;(n=Array.prototype.splice).call.apply(n,[e,e.length,0].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(t)))}function u(e,t){if(!e||e.constructor===Object)return e;for(var n={},r=0;r<e.length;r++){var o=e[r];n[o[t]]=o}return n}function s(e){if(e&&e.constructor===String)return e.toLowerCase();if(e.constructor===Array)for(var t=0;t<e.length;t++)e[t]=s(e[t]);return e}function d(e,t,n,r){if(Array.isArray(e))for(var o=0,i=e.length;o<i;o++)f(e,t,o,n);else for(var a in e)r&&-1!==r.indexOf(a)||f(e,t,a,n);return t}function f(e,t,n,r){var o;r?(o=e[n],Array.isArray(o)?(t[n]||(t[n]=[]),d(o,t[n],r)):o instanceof Object?(t[n]||(t[n]={}),d(o,t[n],r)):t[n]=o):t[n]=e[n]}function p(e,t,n){var r=2<arguments.length&&void 0!==n?n:{};if(r=Object.assign({path:"/",SameSite:"lax","max-age":864e7},r),encodeURIComponent){var o,i=encodeURIComponent(e)+"="+encodeURIComponent(t);for(o in r){i+="; "+o;var a=r[o];!0!==a&&(i+="="+a)}document.cookie=i}}function m(e,t){p(e,"",{path:1<arguments.length&&void 0!==t?t:"/","max-age":-1})}n={log:function(){if(window&&window.console&&window.console.log&&window.navigator&&window.navigator.userAgent&&!a){var e=window.navigator.userAgent.match(/opera|chrome|safari|firefox|msie|trident(?=\/)/i);if(a=!0,e&&e[0].search(/trident|msie/i)<0)return window.console.log("%cSTOP!","color:red;font-size:xx-large;font-weight:bold;"),void window.console.log("%cThis is a browser feature intended for developers. Do not enter or paste code which you don't understand. It may allow attackers to steal your information or impersonate you.\nSee https://en.wikipedia.org/wiki/Self-XSS for more details","font-size:large;");window.console.log("STOP!\nThis is a browser feature intended for developers. Do not enter or paste code which you don't understand. It may allow attackers to steal your information or impersonate you.\nSee https://en.wikipedia.org/wiki/Self-XSS for more details")}}},"7.0.0"!==o.version||o.Console||o.defineProperty(o,"Console",n,!0,!1,!1,!0),o["7_0_0"].Console||o.defineProperty(o["7_0_0"],"Console",n,!0,!1,!1,!0),["_zcsr_tmp","com_chat_owner","com_avcliq_owner","wms.agent"].some((function(e){return!!function(e){e+="=";var t=document.cookie,n=void 0;return t.split("; ").forEach((function(t){if(void 0===n){var r=void 0;try{decodeURIComponent&&(r=decodeURIComponent(t))}catch(e){r=t,ZWAF&&ZWAF.logger&&ZWAF.logger.warn&&ZWAF.logger.warn("Error while trying to decode Cookie value!")}0===r.indexOf(e)&&(n=r.substring(e.length))}})),n}(e)}))&&o&&o["7_0_0"]&&o["7_0_0"].Console&&o["7_0_0"].Console.log();var A="_zwaf_ua";i={init:function(){m(A);var e=!!window.ulaa,t=navigator&&navigator.brave&&"function"==typeof navigator.brave.isBrave;e?p(A,"Ulaa"):t?p(A,"Brave"):window&&window.addEventListener("load",(function(){window.setTimeout((function(){window.getComputedStyle(window.document.documentElement).getPropertyValue("--arc-palette-background")&&p(A,"Arc")}),1e3)}))},disable:function(){m(A)}},"7.0.0"!==o.version||o.UAIdentification||o.defineProperty(o,"UAIdentification",i,!0,!1,!1,!0),o["7_0_0"].UAIdentification||o.defineProperty(o["7_0_0"],"UAIdentification",i,!0,!1,!1,!0),o&&o["7_0_0"]&&o["7_0_0"].UAIdentification&&o["7_0_0"].UAIdentification.init();var E,T=Object.hasOwnProperty,h=Object.setPrototypeOf,_=Object.isFrozen,g=Object.getPrototypeOf,N=Object.getOwnPropertyDescriptor,v=Object.freeze,y=(n=Object.seal,Object.create),S=(i="undefined"!=typeof Reflect&&Reflect,(S=i.apply)||function(e,t,n){return e.apply(t,n)}),O=(v=v||function(e){return e},n=n||function(e){return e},(O=i.construct)||function(e,t){return new(Function.prototype.bind.apply(e,[null].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(t))))}),L=F(Array.prototype.forEach),R=F(Array.prototype.pop),w=F(Array.prototype.push),b=F(String.prototype.toLowerCase),I=F(String.prototype.toString),D=F(String.prototype.match),C=F(String.prototype.replace),P=F(String.prototype.indexOf),U=F(String.prototype.trim),x=F(RegExp.prototype.test),k=(E=TypeError,function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return O(E,t)});function M(e){return"number"==typeof e&&isNaN(e)}function F(e){return function(t){for(var n=arguments.length,r=Array(1<n?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return S(e,t,r)}}function G(e,t,n){n=n||b,h&&h(e,null);for(var r=t.length;r--;){var o,i=t[r];"string"!=typeof i||(o=n(i))!==i&&(_(t)||(t[r]=o),i=o),e[i]=!0}return e}function B(e){var t=y(null),n=void 0;for(n in e)!0===S(T,e,[n])&&(t[n]=e[n]);return t}function H(e,t){for(;null!==e;){var n=N(e,t);if(n){if(n.get)return F(n.get);if("function"==typeof n.value)return F(n.value)}e=g(e)}return function(e){return null}}var V=v(["a","abbr","acronym","address","area","article","aside","audio","b","bdi","bdo","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","content","data","datalist","dd","decorator","del","details","dfn","dialog","dir","div","dl","dt","element","em","fieldset","figcaption","figure","font","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","img","input","ins","kbd","label","legend","li","main","map","mark","marquee","menu","menuitem","meter","nav","nobr","ol","optgroup","option","output","p","picture","pre","progress","q","rp","rt","ruby","s","samp","section","select","shadow","small","source","spacer","span","strike","strong","style","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","tr","track","tt","u","ul","var","video","wbr"]),W=v(["svg","a","altglyph","altglyphdef","altglyphitem","animatecolor","animatemotion","animatetransform","circle","clippath","defs","desc","ellipse","filter","font","g","glyph","glyphref","hkern","image","line","lineargradient","marker","mask","metadata","mpath","path","pattern","polygon","polyline","radialgradient","rect","stop","style","switch","symbol","text","textpath","title","tref","tspan","view","vkern"]),z=v(["feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence"]),j=v(["animate","color-profile","cursor","discard","fedropshadow","font-face","font-face-format","font-face-name","font-face-src","font-face-uri","foreignobject","hatch","hatchpath","mesh","meshgradient","meshpatch","meshrow","missing-glyph","script","set","solidcolor","unknown","use"]),X=v(["math","menclose","merror","mfenced","mfrac","mglyph","mi","mlabeledtr","mmultiscripts","mn","mo","mover","mpadded","mphantom","mroot","mrow","ms","mspace","msqrt","mstyle","msub","msup","msubsup","mtable","mtd","mtext","mtr","munder","munderover"]),q=v(["maction","maligngroup","malignmark","mlongdiv","mscarries","mscarry","msgroup","mstack","msline","msrow","semantics","annotation","annotation-xml","mprescripts","none"]),Y=v(["#text"]),Z=v(["accept","action","align","alt","autocapitalize","autocomplete","autopictureinpicture","autoplay","background","bgcolor","border","capture","cellpadding","cellspacing","checked","cite","class","clear","color","cols","colspan","controls","controlslist","coords","crossorigin","datetime","decoding","default","dir","disabled","disablepictureinpicture","disableremoteplayback","download","draggable","enctype","enterkeyhint","face","for","headers","height","hidden","high","href","hreflang","id","inputmode","integrity","ismap","kind","label","lang","list","loading","loop","low","max","maxlength","media","method","min","minlength","multiple","muted","name","nonce","noshade","novalidate","nowrap","open","optimum","pattern","placeholder","playsinline","poster","preload","pubdate","radiogroup","readonly","rel","required","rev","reversed","role","rows","rowspan","spellcheck","scope","selected","shape","size","sizes","span","srclang","start","src","srcset","step","style","summary","tabindex","title","translate","type","usemap","valign","value","width","xmlns","slot"]),K=v(["accent-height","accumulate","additive","alignment-baseline","ascent","attributename","attributetype","azimuth","basefrequency","baseline-shift","begin","bias","by","class","clip","clippathunits","clip-path","clip-rule","color","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cx","cy","d","dx","dy","diffuseconstant","direction","display","divisor","dur","edgemode","elevation","end","fill","fill-opacity","fill-rule","filter","filterunits","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","fx","fy","g1","g2","glyph-name","glyphref","gradientunits","gradienttransform","height","href","id","image-rendering","in","in2","k","k1","k2","k3","k4","kerning","keypoints","keysplines","keytimes","lang","lengthadjust","letter-spacing","kernelmatrix","kernelunitlength","lighting-color","local","marker-end","marker-mid","marker-start","markerheight","markerunits","markerwidth","maskcontentunits","maskunits","max","mask","media","method","mode","min","name","numoctaves","offset","operator","opacity","order","orient","orientation","origin","overflow","paint-order","path","pathlength","patterncontentunits","patterntransform","patternunits","points","preservealpha","preserveaspectratio","primitiveunits","r","rx","ry","radius","refx","refy","repeatcount","repeatdur","restart","result","rotate","scale","seed","shape-rendering","specularconstant","specularexponent","spreadmethod","startoffset","stddeviation","stitchtiles","stop-color","stop-opacity","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke","stroke-width","style","surfacescale","systemlanguage","tabindex","targetx","targety","transform","transform-origin","text-anchor","text-decoration","text-rendering","textlength","type","u1","u2","unicode","values","viewbox","visibility","version","vert-adv-y","vert-origin-x","vert-origin-y","width","word-spacing","wrap","writing-mode","xchannelselector","ychannelselector","x","x1","x2","xmlns","y","y1","y2","z","zoomandpan"]),Q=v(["accent","accentunder","align","bevelled","close","columnsalign","columnlines","columnspan","denomalign","depth","dir","display","displaystyle","encoding","fence","frame","height","href","id","largeop","length","linethickness","lspace","lquote","mathbackground","mathcolor","mathsize","mathvariant","maxsize","minsize","movablelimits","notation","numalign","open","rowalign","rowlines","rowspacing","rowspan","rspace","rquote","scriptlevel","scriptminsize","scriptsizemultiplier","selection","separator","separators","stretchy","subscriptshift","supscriptshift","symmetric","voffset","width","xmlns"]),$=v(["xlink:href","xml:id","xlink:title","xml:space","xmlns:xlink"]),J=n(/\{\{[\w\W]*|[\w\W]*\}\}/gm),ee=n(/<%[\w\W]*|[\w\W]*%>/gm),te=n(/\${[\w\W]*}/gm),ne=n(/^data-[\-\w.\u00B7-\uFFFF]/),re=n(/^aria-[\-\w]+$/),oe=n(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i),ie=n(/^(?:\w+script|data):/i),ae=n(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g),le=n(/^html$/i),ce=n(/^[a-z][.\w]*(-[.\w]+)+$/i),ue="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function se(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var de=(i=function e(t){function n(t){return e(t)}var r=0<arguments.length&&void 0!==t?t:"undefined"==typeof window?null:window;if(n.version="2.5.4",n.removed=[],!r||!r.document||9!==r.document.nodeType)return n.isSupported=!1,n;var o=r.document,i=r.document,a=r.DocumentFragment,l=r.HTMLTemplateElement,c=r.Node,u=r.Element,s=r.NodeFilter,d=void 0===(t=r.NamedNodeMap)?r.NamedNodeMap||r.MozNamedAttrMap:t,f=r.HTMLFormElement,p=r.DOMParser,m=r.trustedTypes,A=H(t=u.prototype,"cloneNode"),E=H(t,"nextSibling"),T=H(t,"childNodes"),h=H(t,"parentNode");"function"!=typeof l||(de=i.createElement("template")).content&&de.content.ownerDocument&&(i=de.content.ownerDocument);var _=function(e,t){if("object"!==(void 0===e?"undefined":ue(e))||"function"!=typeof e.createPolicy)return null;var n=null,r="data-tt-policy-suffix";n="dompurify"+((n=t.currentScript&&t.currentScript.hasAttribute(r)?t.currentScript.getAttribute(r):n)?"#"+n:"");try{return e.createPolicy(n,{createHTML:function(e){return e},createScriptURL:function(e){return e}})}catch(e){return null}}(m,o),g=_?_.createHTML(""):"",N=(de=i).implementation,y=de.createNodeIterator,S=de.createDocumentFragment,O=de.getElementsByTagName,F=o.importNode,de={};try{de=B(i).documentMode?i.documentMode:{}}catch(t){}var fe={};function pe(e){return e instanceof RegExp||e instanceof Function}function me(e){dt&&dt===e||(e=B(e=e&&"object"===(void 0===e?"undefined":ue(e))?e:{}),ct=-1===ut.indexOf(e.PARSER_MEDIA_TYPE)?"text/html":e.PARSER_MEDIA_TYPE,st="application/xhtml+xml"===ct?I:b,Oe="ALLOWED_TAGS"in e?G({},e.ALLOWED_TAGS,st):Le,we="ALLOWED_ATTR"in e?G({},e.ALLOWED_ATTR,st):be,at="ALLOWED_NAMESPACES"in e?G({},e.ALLOWED_NAMESPACES,I):lt,Je="ADD_URI_SAFE_ATTR"in e?G(B(et),e.ADD_URI_SAFE_ATTR,st):et,Qe="ADD_DATA_URI_TAGS"in e?G(B($e),e.ADD_DATA_URI_TAGS,st):$e,Ze="FORBID_CONTENTS"in e?G({},e.FORBID_CONTENTS,st):Ke,De="FORBID_TAGS"in e?G({},e.FORBID_TAGS,st):{},Ce="FORBID_ATTR"in e?G({},e.FORBID_ATTR,st):{},Ae="USE_PROFILES"in e&&e.USE_PROFILES,Pe=!1!==e.ALLOW_ARIA_ATTR,Ue=!1!==e.ALLOW_DATA_ATTR,xe=e.ALLOW_UNKNOWN_PROTOCOLS||!1,ke=!1!==e.ALLOW_SELF_CLOSE_IN_ATTR,Me=e.SAFE_FOR_TEMPLATES||!1,Fe=!1!==e.SAFE_FOR_XML,Ge=e.WHOLE_DOCUMENT||!1,Ve=e.RETURN_DOM||!1,We=e.RETURN_DOM_FRAGMENT||!1,ze=e.RETURN_TRUSTED_TYPE||!1,Re=!1!==e.DONT_TRIM,He=e.FORCE_BODY||!1,je=!1!==e.SANITIZE_DOM,Xe=e.SANITIZE_NAMED_PROPS||!1,qe=!1!==e.KEEP_CONTENT,Ye=e.IN_PLACE||!1,Se=e.ALLOWED_URI_REGEXP||Se,ot=e.NAMESPACE||rt,Ie=e.CUSTOM_ELEMENT_HANDLING||{},e.CUSTOM_ELEMENT_HANDLING&&pe(e.CUSTOM_ELEMENT_HANDLING.tagNameCheck)&&(Ie.tagNameCheck=e.CUSTOM_ELEMENT_HANDLING.tagNameCheck),e.CUSTOM_ELEMENT_HANDLING&&pe(e.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)&&(Ie.attributeNameCheck=e.CUSTOM_ELEMENT_HANDLING.attributeNameCheck),e.CUSTOM_ELEMENT_HANDLING&&"boolean"==typeof e.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements&&(Ie.allowCustomizedBuiltInElements=e.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements),Me&&(Ue=!1),We&&(Ve=!0),Ae&&(Oe=G({},[].concat(se(Y))),we=[],!0===Ae.html&&(G(Oe,V),G(we,Z)),!0===Ae.svg&&(G(Oe,W),G(we,K),G(we,$)),!0===Ae.svgFilters&&(G(Oe,z),G(we,K),G(we,$)),!0===Ae.mathMl&&(G(Oe,X),G(we,Q),G(we,$))),e.ADD_TAGS&&G(Oe=Oe===Le?B(Oe):Oe,e.ADD_TAGS,st),e.ADD_ATTR&&G(we=we===be?B(we):we,e.ADD_ATTR,st),e.ADD_URI_SAFE_ATTR&&G(Je,e.ADD_URI_SAFE_ATTR,st),e.FORBID_CONTENTS&&G(Ze=Ze===Ke?B(Ze):Ze,e.FORBID_CONTENTS,st),qe&&(Oe["#text"]=!0),Ge&&G(Oe,["html","head","body"]),Oe.table&&(G(Oe,["tbody"]),delete De.tbody),v&&v(e),dt=e)}n.isSupported="function"==typeof h&&N&&void 0!==N.createHTMLDocument&&9!==de;var Ae,Ee=J,Te=ee,he=te,_e=ne,ge=re,Ne=ie,ve=ae,ye=ce,Se=oe,Oe=null,Le=G({},[].concat(se(V),se(W),se(z),se(X),se(Y))),Re=!0,we=null,be=G({},[].concat(se(Z),se(K),se(Q),se($))),Ie=Object.seal(Object.create(null,{tagNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},attributeNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},allowCustomizedBuiltInElements:{writable:!0,configurable:!1,enumerable:!0,value:!1}})),De=null,Ce=null,Pe=!0,Ue=!0,xe=!1,ke=!0,Me=!1,Fe=!0,Ge=!1,Be=!1,He=!1,Ve=!1,We=!1,ze=!1,je=!0,Xe=!1,qe=!0,Ye=!1,Ze=null,Ke=G({},["annotation-xml","audio","colgroup","desc","foreignobject","head","iframe","math","mi","mn","mo","ms","mtext","noembed","noframes","noscript","plaintext","script","style","svg","template","thead","title","video","xmp"]),Qe=null,$e=G({},["audio","video","img","source","image","track"]),Je=null,et=G({},["alt","class","for","id","label","name","pattern","placeholder","role","summary","title","value","style","xmlns"]),tt="http://www.w3.org/1998/Math/MathML",nt="http://www.w3.org/2000/svg",rt="http://www.w3.org/1999/xhtml",ot=rt,it=!1,at=null,lt=G({},[tt,nt,rt],I),ct=void 0,ut=["application/xhtml+xml","text/html"],st=void 0,dt=null,ft=i.createElement("form"),pt=G({},["mi","mo","mn","ms","mtext"]),mt=G({},["foreignobject","annotation-xml"]),At=G({},["title","style","font","a","script"]),Et=G({},W);G(Et,z),G(Et,j);var Tt=G({},X);function ht(e){w(n.removed,{element:e});try{e.parentNode.removeChild(e)}catch(t){try{e.outerHTML=g}catch(t){e.remove()}}}function _t(e,t){try{w(n.removed,{attribute:t.getAttributeNode(e),from:t})}catch(e){w(n.removed,{attribute:null,from:t})}if(t.removeAttribute(e),"is"===e&&!we[e])if(Ve||We)try{ht(t)}catch(e){}else try{t.setAttribute(e,"")}catch(e){}}function gt(e){var t=void 0,n=void 0;He?e="<remove></remove>"+e:n=(r=D(e,/^[\r\n\t ]+/))&&r[0],"application/xhtml+xml"===ct&&ot===rt&&(e='<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>'+e+"</body></html>");var r=_?_.createHTML(e):e;if(ot===rt)try{t=(new p).parseFromString(r,ct)}catch(e){}if(!t||!t.documentElement){t=N.createDocument(ot,"template",null);try{t.documentElement.innerHTML=it?g:r}catch(e){}}return r=t.body||t.documentElement,e&&n&&r.insertBefore(i.createTextNode(n),r.childNodes[0]||null),ot===rt?O.call(t,Ge?"html":"body")[0]:Ge?t.documentElement:r}function Nt(e){return y.call(e.ownerDocument||e,e,s.SHOW_ELEMENT|s.SHOW_COMMENT|s.SHOW_TEXT|s.SHOW_PROCESSING_INSTRUCTION|s.SHOW_CDATA_SECTION,null,!1)}function vt(e){return e instanceof f&&(void 0!==e.__depth&&"number"!=typeof e.__depth||void 0!==e.__removalCount&&"number"!=typeof e.__removalCount||"string"!=typeof e.nodeName||"string"!=typeof e.textContent||"function"!=typeof e.removeChild||!(e.attributes instanceof d)||"function"!=typeof e.removeAttribute||"function"!=typeof e.setAttribute||"string"!=typeof e.namespaceURI||"function"!=typeof e.insertBefore||"function"!=typeof e.hasChildNodes)}function yt(e){return"object"===(void 0===c?"undefined":ue(c))?e instanceof c:e&&"object"===(void 0===e?"undefined":ue(e))&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName}function St(e,t,r){fe[e]&&L(fe[e],(function(e){e.call(n,t,r,dt)}))}function Ot(e){var t;if(St("beforeSanitizeElements",e,null),vt(e))return ht(e),1;if(x(/[\u0080-\uFFFF]/,e.nodeName))return ht(e),1;var r=st(e.nodeName);if(St("uponSanitizeElement",e,{tagName:r,allowedTags:Oe}),e.hasChildNodes()&&!yt(e.firstElementChild)&&(!yt(e.content)||!yt(e.content.firstElementChild))&&x(/<[/\w]/g,e.innerHTML)&&x(/<[/\w]/g,e.textContent))return ht(e),1;if("select"===r&&x(/<template/i,e.innerHTML))return ht(e),1;if(7===e.nodeType)return ht(e),1;if(Fe&&8===e.nodeType&&x(/<[/\w]/g,e.data))return ht(e),1;if(Oe[r]&&!De[r])return e instanceof u&&!function(e){var t=h(e);t&&t.tagName||(t={namespaceURI:ot,tagName:"template"});var n=b(e.tagName),r=b(t.tagName);return at[e.namespaceURI]&&(e.namespaceURI===nt?t.namespaceURI===rt?"svg"===n:t.namespaceURI===tt?"svg"===n&&("annotation-xml"===r||pt[r]):Boolean(Et[n]):e.namespaceURI===tt?t.namespaceURI===rt?"math"===n:t.namespaceURI===nt?"math"===n&&mt[r]:Boolean(Tt[n]):e.namespaceURI===rt?(t.namespaceURI!==nt||mt[r])&&(t.namespaceURI!==tt||pt[r])&&!Tt[n]&&(At[n]||!Et[n]):"application/xhtml+xml"===ct&&at[e.namespaceURI])}(e)||("noscript"===r||"noembed"===r||"noframes"===r)&&x(/<\/no(script|embed|frames)/i,e.innerHTML)?(ht(e),1):(Me&&3===e.nodeType&&(t=e.textContent,t=C(t,Ee," "),t=C(t,Te," "),t=C(t,he," "),e.textContent!==t&&(w(n.removed,{element:e.cloneNode()}),e.textContent=t)),St("afterSanitizeElements",e,null),0);if(!De[r]&&bt(r)){if(Ie.tagNameCheck instanceof RegExp&&x(Ie.tagNameCheck,r))return;if(Ie.tagNameCheck instanceof Function&&Ie.tagNameCheck(r))return}if(qe&&!Ze[r]){var o=h(e)||e.parentNode,i=T(e)||e.childNodes;if(i&&o)for(var a=i.length-1;0<=a;--a){var l=A(i[a],!0);l.__removalCount=(e.__removalCount||0)+1,o.insertBefore(l,E(e))}}return ht(e),1}function Lt(e,t,n){if(je&&("id"===t||"name"===t)&&(n in i||n in ft||"__depth"===n||"__removalCount"===n))return!1;if((!Ue||Ce[t]||!x(_e,t))&&(!Pe||!x(ge,t)))if(!we[t]||Ce[t]){if(!(bt(e)&&(Ie.tagNameCheck instanceof RegExp&&x(Ie.tagNameCheck,e)||Ie.tagNameCheck instanceof Function&&Ie.tagNameCheck(e))&&(Ie.attributeNameCheck instanceof RegExp&&x(Ie.attributeNameCheck,t)||Ie.attributeNameCheck instanceof Function&&Ie.attributeNameCheck(t))||"is"===t&&Ie.allowCustomizedBuiltInElements&&(Ie.tagNameCheck instanceof RegExp&&x(Ie.tagNameCheck,n)||Ie.tagNameCheck instanceof Function&&Ie.tagNameCheck(n))))return!1}else if(!Je[t]&&!x(Se,C(n,ve,""))&&("src"!==t&&"xlink:href"!==t&&"href"!==t||"script"===e||0!==P(n,"data:")||!Qe[e])&&(!xe||x(Ne,C(n,ve,"")))&&n)return!1;return!0}function Rt(e){var t,r=void 0,o=void 0,i=void 0;St("beforeSanitizeAttributes",e,null);var a=e.attributes;if(a){var l={attrName:"",attrValue:"",keepAttr:!0,allowedAttributes:we,nodeName:e.nodeName.toLowerCase()};for(i=a.length;i--;){var c=(r=a[i]).name,u=r.namespaceURI;if(o="value"===c?r.value:U(r.value),Re&&(o=r.value),t=st(c),l.attrName=t,l.attrValue=o,l.keepAttr=!0,l.keepElement=!0,l.forceKeepAttr=void 0,St("uponSanitizeAttribute",e,l),!l.keepElement)return 1;if(o=l.attrValue,!l.forceKeepAttr&&(_t(c,e),l.keepAttr))if(ke||!x(/\/>/i,o))if(Fe&&x(/((--!?|])>)|<\/(style|title)/i,o))_t(c,e);else{Me&&(o=C(o,Ee," "),o=C(o,Te," "),o=C(o,he," "));var s=e.nodeName.toLowerCase();if(Lt(s,t,o)){if(!Xe||"id"!==t&&"name"!==t||(_t(c,e),o="user-content-"+o),_&&"object"===(void 0===m?"undefined":ue(m))&&"function"==typeof m.getAttributeType&&!u)switch(m.getAttributeType(s,t)){case"TrustedHTML":o=_.createHTML(o);break;case"TrustedScriptURL":o=_.createScriptURL(o)}try{u?e.setAttributeNS(u,c,o):e.setAttribute(c,o),vt(e)?ht(e):R(n.removed)}catch(e){}}}else _t(c,e)}return St("afterSanitizeAttributes",e,null),0}}function wt(e){var t,n=void 0,r=Nt(e);for(St("beforeSanitizeShadowDOM",e,null);n=r.nextNode();)St("uponSanitizeShadowNode",n,null),Ot(n)||(t=h(n),1===n.nodeType&&(t&&t.__depth?n.__depth=(n.__removalCount||0)+t.__depth+1:n.__depth=1),(255<=n.__depth||M(n.__depth))&&ht(n),n.content instanceof a&&(n.content.__depth=n.__depth,wt(n.content)),Rt(n)&&ht(n));St("afterSanitizeShadowDOM",e,null)}G(Tt,q);var bt=function(e){return"annotation-xml"!==e&&D(e,ye)};return n.sanitize=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},i=void 0,l=void 0,u=void 0,s=void 0;if("string"!=typeof(e=(it=!e)?"\x3c!--\x3e":e)&&!yt(e)){if("function"!=typeof e.toString)throw k("toString is not a function");if("string"!=typeof(e=e.toString()))throw k("dirty is not a string, aborting")}if(!n.isSupported){if("object"===ue(r.toStaticHTML)||"function"==typeof r.toStaticHTML){if("string"==typeof e)return r.toStaticHTML(e);if(yt(e))return r.toStaticHTML(e.outerHTML)}return e}if(Be||me(t),n.removed=[],Ye="string"!=typeof e&&Ye){if(e.nodeName&&(t=st(e.nodeName),!Oe[t]||De[t]))throw k("root node is forbidden and cannot be sanitized in-place")}else if(e instanceof c)1===(t=(i=gt("\x3c!----\x3e")).ownerDocument.importNode(e,!0)).nodeType&&"BODY"===t.nodeName||"HTML"===t.nodeName?i=t:i.appendChild(t);else{if(!Ve&&!Me&&!Ge&&-1===e.indexOf("<"))return _&&ze?_.createHTML(e):e;if(!(i=gt(e)))return Ve?null:ze?g:""}i&&He&&ht(i.firstChild);for(var d,f=Nt(Ye?e:i);l=f.nextNode();)3===l.nodeType&&l===u||Ot(l)||(d=h(l),1===l.nodeType&&(d&&d.__depth?l.__depth=(l.__removalCount||0)+d.__depth+1:l.__depth=1),(255<=l.__depth||M(l.__depth))&&ht(l),l.content instanceof a&&(l.content.__depth=l.__depth,wt(l.content)),Rt(l)?ht(l):u=l);if(u=null,Ye)return e;if(Ve){if(We)for(s=S.call(i.ownerDocument);i.firstChild;)s.appendChild(i.firstChild);else s=i;return we.shadowroot||we.shadowrootmod?F.call(o,s,!0):s}return e=Ge?i.outerHTML:i.innerHTML,Ge&&Oe["!doctype"]&&i.ownerDocument&&i.ownerDocument.doctype&&i.ownerDocument.doctype.name&&x(le,i.ownerDocument.doctype.name)&&(e="<!DOCTYPE "+i.ownerDocument.doctype.name+">\n"+e),Me&&(e=C(e,Ee," "),e=C(e,Te," "),e=C(e,he," ")),_&&ze?_.createHTML(e):e},n.setConfig=function(e){me(e),Be=!0},n.clearConfig=function(){dt=null,Be=!1},n.isValidAttribute=function(e,t,n){return dt||me({}),Lt(e=b(e),t=b(t),n)},n.addHook=function(e,t){"function"==typeof t&&(fe[e]=fe[e]||[],w(fe[e],t))},n.removeHook=function(e){if(fe[e])return R(fe[e])},n.removeHooks=function(e){fe[e]&&(fe[e]=[])},n.removeAllHooks=function(){fe={}},n}(),(Object.seal||function(e){return e})(/\$\{[A-Z._]+?\}/i));function fe(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var pe=Object.freeze;return(n={FORCE_BODY:!0,ALLOWED_URI_REGEXP:!1,REUSE_CONFIG:!1,REMOVE_ONEVENTS:!0,EXTENDS:["GLOBAL_TAGS","GLOBAL_ATTR","FORBID_TAGS","FORBID_ATTR","TAG_RULES","GLOBAL_ATTR_RULES","GLOBAL_APPEND_ATTR","ADD_DATA_URI_TAGS","ADD_URI_SAFE_ATTR"],ALLOWED_STYLE:"NONE",STYLE_RULES:{FORBID_PROPS:[],FORBID_CSSRULES:[],UNSAFE_PROP_RULES:{}}}).GLOBAL_TAGS="a|abbr|acronym|address|area|article|aside|audio|b|bdi|bdo|big|blink|blockquote|body|br|button|canvas|caption|center|cite|code|col|colgroup|content|data|datalist|dd|decorator|del|details|dfn|dir|div|dl|dt|element|em|fieldset|figcaption|figure|font|footer|form|h1|h2|h3|h4|h5|h6|head|header|hgroup|hr|html|i|img|input|ins|kbd|label|legend|li|main|map|mark|marquee|menu|menuitem|meter|nav|nobr|ol|optgroup|option|output|p|pre|progress|q|rp|rt|ruby|s|samp|section|select|shadow|small|source|spacer|span|strike|strong|sub|summary|sup|table|tbody|td|template|textarea|tfoot|th|thead|time|title|tr|track|tt|u|ul|var|video|wbr|#text".split("|"),n.GLOBAL_ATTR="accept|action|align|alt|autocomplete|background|bgcolor|border|cellpadding|cellspacing|checked|cite|class|clear|color|cols|colspan|coords|datetime|default|dir|disabled|download|enctype|face|for|headers|height|hidden|high|href|hreflang|id|ismap|label|lang|list|loop|low|max|maxlength|media|method|min|multiple|name|noshade|novalidate|nowrap|open|optimum|pattern|placeholder|poster|preload|pubdate|radiogroup|readonly|rel|required|rev|reversed|role|rows|rowspan|spellcheck|scope|selected|shape|size|span|srclang|start|src|step|summary|tabindex|title|target|type|usemap|valign|value|width|xmlns|sandbox".split("|"),n.FORBID_TAGS=[],n.FORBID_ATTR=[],n.GLOBAL_ATTR_RULES={},n.GLOBAL_APPEND_ATTR={},n.ADD_DATA_URI_TAGS=[],n.ADD_URI_SAFE_ATTR=[],n.TAG_RULES={a:{APPEND_ATTR:{rel:{ATTR_NAME:"rel",APPEND_ATTR_VALUE:"noopener noreferrer",SIBLING_CONDITIONS:[{ATTR_NAME:"target",CONDITIONS:[{IS_MANDATORY:"true",CONTAINS:"_blank"}]}]}}}},n.TAG_SPECIFIC_ATTRS={},i=function e(t,n){var r="GLOBAL_TAGS",o="GLOBAL_ATTR",i="GLOBAL_ATTRIBUTES",a="FORBID_TAGS",f="FORBID_ATTR",p="TAG_RULES",m="STYLE_RULES",A="GLOBAL_ATTR_RULES",E="GLOBAL_APPEND_ATTR",T="ADD_DATA_URI_TAGS",h="ADD_URI_SAFE_ATTR",_="REMOVE_ONEVENTS",g=["ALLOW_ARIA_ATTR","ALLOW_DATA_ATTR","ALLOW_UNKNOWN_PROTOCOLS","SAFE_FOR_TEMPLATES","WHOLE_DOCUMENT","RETURN_DOM","RETURN_DOM_FRAGMENT","IN_PLACE","DONT_TRIM","FORCE_BODY","SANITIZE_DOM","KEEP_CONTENT","ALLOWED_URI_REGEXP"],N=[];c(N,g),c(N,["EXTENDS",_,"ALLOWED_STYLE"]);var v={iframe:{ATTR_RULES:{sandbox:{FALLBACK_VALUE:"allow-popups allow-forms allow-scripts allow-same-origin",CONDITIONS:[{NOT_CONTAINS:["allow-top-navigation","allow-popups-to-escape-sandbox"]}]}},APPEND_ATTR:{sandbox:{APPEND_ATTR_VALUE:"allow-popups allow-forms allow-scripts allow-same-origin"}}},embed:{ATTR_RULES:{type:{CONDITIONS:[{EQUAL:"application/pdf",FALLBACK_VALUE:"application/pdf"}]}},APPEND_ATTR:{type:{APPEND_ATTR_VALUE:"application/pdf"},typemustmatch:{APPEND_ATTR_VALUE:"true"}}},object:{ATTR_RULES:{type:{CONDITIONS:[{EQUAL:"application/pdf",FALLBACK_VALUE:"application/pdf"}]}},APPEND_ATTR:{type:{APPEND_ATTR_VALUE:"application/pdf"},typemustmatch:{APPEND_ATTR_VALUE:"true"}}}},y=void 0,S=void 0,O=void 0,L=t.GLOBAL_TAGS,R=t.GLOBAL_ATTR,w=t.FORBID_TAGS,b=t.FORBID_ATTR,I=t.TAG_RULES,D=t.STYLE_RULES,C=t.GLOBAL_ATTR_RULES,P=t.GLOBAL_APPEND_ATTR,U=t.TAG_SPECIFIC_ATTRS,x=D.FORBID_PROPS,k=D.FORBID_CSSRULES,M=D.UNSAFE_PROP_RULES,F=x&&0!==x.length||k&&0!==k.length;function G(e,t,n){if(e.constructor===String){if(t.CASE_SENSITIVE||(e=e.toLowerCase()),t.DONT_TRIM||(e=e.trim()),t.MAX_LENGTH&&e.length>t.MAX_LENGTH)return!1;if(t.MIN_LENGTH&&e.length<t.MIN_LENGTH)return!1;if(t.REGEX&&t.REGEX.constructor===RegExp&&-1===e.search(t.REGEX))return!1;if(t.REGEX&&t.REGEX.constructor===String&&(new RegExp(t.REGEX),-1===e.search(t.REGEX)))return!1;if(t.REGEX&&t.REGEX.constructor===Array)for(var r=0;r<t.REGEX.length;r++)if(-1===e.search(t.REGEX[r]))return!1;if(t.VALIDATOR&&t.VALIDATOR.HANDLER&&!t.VALIDATOR.HANDLER(e,t.VALIDATOR.CONFIG,n))return!1;if(void 0!==t.STARTS_WITH&&0!==e.indexOf(t.STARTS_WITH))return!1;if(void 0!==t.ENDS_WITH&&e.lastIndexOf(t.ENDS_WITH)!==e.length-t.ENDS_WITH.length)return!1;if(t.CONTAINS&&t.CONTAINS.constructor===String&&-1===e.indexOf(t.CONTAINS))return!1;if(t.CONTAINS&&t.CONTAINS.constructor===Array)for(var o=0;o<t.CONTAINS.length;o++)if(-1===e.indexOf(t.CONTAINS[o]))return!1;if(t.NOT_CONTAINS&&t.NOT_CONTAINS.constructor===String&&-1<e.indexOf(t.NOT_CONTAINS))return!1;if(t.NOT_CONTAINS&&t.NOT_CONTAINS.constructor===Array)for(var i=0;i<t.NOT_CONTAINS.length;i++)if(-1<e.indexOf(t.NOT_CONTAINS[i]))return!1;if(void 0!==t.EQUAL&&e!=t.EQUAL)return!1;if(void 0!==t.NOT_EQUAL&&e==t.NOT_EQUAL)return!1}if(t.LIST&&-1===t.LIST.indexOf(e))return!1;if("INTEGER"===t.TYPE||"FLOAT"===t.TYPE){n=void 0;try{n="INTEGER"===t.TYPE?window.parseInt(e,10):window.parseFloat(e)}catch(e){return!1}if(window.isNaN(n))return!1;if(void 0!==t.GREATER_THAN&&n<=t.GREATER_THAN)return!1;if(void 0!==t.GREATER_THAN_OR_EQUAL&&n<t.GREATER_THAN_OR_EQUAL)return!1;if(void 0!==t.LESSER_THAN&&n>=t.LESSER_THAN)return!1;if(void 0!==t.LESSER_THAN_OR_EQUAL&&n>t.LESSER_THAN_OR_EQUAL)return!1;if(void 0!==t.EQUAL&&n!==t.EQUAL)return!1;if(void 0!==t.NOT_EQUAL&&n===t.NOT_EQUAL)return!1}return!0}function B(e,t,n){var r=!0;if(!t||!t.CONDITIONS||0===t.CONDITIONS.length)return{isValid:r,rule:t};n=t.ATTR_NAME||n;for(var o,i,a,l,c=0;c<t.CONDITIONS.length;c++){var u=t.CONDITIONS[c];if(o=e,i=n,void 0,l=!1!==(a=u).IS_MANDATORY,r=i&&!o.hasAttribute(i.toLowerCase())?a.IS_FORBIDDEN||!l:!a.IS_FORBIDDEN&&G(o=null==(o=o.getAttribute(i.toLowerCase()))?"":o,a,i),r=u.NEGATION?!r:r){if(u.NEXT)return B(e,u.NEXT,n);break}}return{isValid:r,rule:t}}function H(e){l(e,(function(t,n){if(n&&n.constructor===String&&(0<x.length&&-1<x.indexOf(t)&&(e[t]="",y=!0),M[t]))for(var r=M[t],o=0;o<r.CONDITIONS.length;o++)if(G(n,r.CONDITIONS[o],t))return e[t]=void 0===r.FALLBACK_VALUE?"":r.FALLBACK_VALUE,y=!0,0}))}function V(e){if(e&&(e.CONDITIONS&&0<e.CONDITIONS.length&&(e.CONDITIONS=function(e){if(!e)return e;for(var t=0;t<e.length;t++)e[t]=function(e){if(!e||e&&e.CASE_SENSITIVE)return e;for(var t=["STARTS_WITH","ENDS_WITH","CONTAINS","EQUAL","NOT_EQUAL","LIST"],n=0;n<t.length;n++){var r=t[n];e[r]&&(e[r]=s(e[r]))}return e.NEXT&&V(e.NEXT),e}(e[t]);return e}(e.CONDITIONS)),e.SIBLING_CONDITIONS&&0<e.SIBLING_CONDITIONS.length))for(var t=0;t<e.SIBLING_CONDITIONS.length;t++)V(e.SIBLING_CONDITIONS[t])}function W(_){return e(_=function(e){if(!e||e.constructor!==Object)return d(t,e={},!0),e;e[p]||(e[p]={}),e[A]||(e[A]={}),e[E]||(e[E]={}),e[T]||(e[T]=[]),e[h]||(e[h]=[]),e[r]||(e[r]=[]),e[o]||(e[o]=[]),e[i]||(e[i]=[]),e[a]||(e[a]=[]),e[f]||(e[f]=[]),e[m]||(e[m]={}),e[m].FORBID_CSSRULES||(e[m].FORBID_CSSRULES=[]),e[m].FORBID_PROPS||(e[m].FORBID_PROPS=[]),e[m].UNSAFE_PROP_RULES||(e[m].UNSAFE_PROP_RULES={}),e.TAG_SPECIFIC_ATTRS={};for(var n=0;n<N.length;n++){var _=N[n];void 0===e[_]&&(e[_]=t[_])}e[p]=u(e[p],"NAME"),e[A]=u(e[A],"ATTR_NAME"),e[E]=u(e[E],"APPEND_ATTR_NAME");var g=e,v=g.TAG_RULES,y=g.TAG_SPECIFIC_ATTRS,S=g.STYLE_RULES,O=g.GLOBAL_ATTR,L=g.GLOBAL_ATTRIBUTES,w=g.GLOBAL_ATTR_RULES,b=g.GLOBAL_APPEND_ATTR,D=g.EXTENDS,C=S.FORBID_CSSRULES,P=S.FORBID_PROPS,F=S.UNSAFE_PROP_RULES;l(b,(function(e,t){V(t)})),l(w,(function(e,t){V(t)}));for(var G=function(n){var i,u,s=D[n];switch(s){case o:var _=[];c(_,R),l(U,(function(e){-1<(e=_.indexOf(e))&&_.splice(e,1)})),c(O,L),c(O,_);break;case r:case a:case f:case T:case h:c(e[s],t[s]);break;case p:i=v,(u=I)&&u.constructor===Object&&l(u,(function(e,t){e in i?(void 0===i[e].APPEND_ATTR&&(i[e].APPEND_ATTR=t.APPEND_ATTR),void 0===i[e].ATTR_RULES&&(i[e].ATTR_RULES=t.ATTR_RULES)):i[e]=t}));break;case E:case A:l(t[s],(function(n){e[s][n]||(e[s][n]={},d(t[s][n],e[s][n],!0))}));break;case m:P.push.apply(P,fe(x)),C.push.apply(C,fe(k)),l(M,(function(e){F[e]||(F[e]={},d(M[e],F[e],!0))}))}},B=0;B<D.length;B++)G(B);return l(w,(function(e){-1===O.indexOf(e)&&(O.push(e),y[e]&&y[e].constructor===Array||(y[e]=[]),-1===y[e].indexOf("*")&&y[e].push("*"))})),l(v,(function(e,t){e=s(e),t.APPEND_ATTR||(t.APPEND_ATTR={}),t.APPEND_ATTR=u(t.APPEND_ATTR,"APPEND_ATTR_NAME"),l(t.APPEND_ATTR,(function(e,t){V(t)})),t.ATTR_RULES||(t.ATTR_RULES={}),t.ATTR_RULES=u(t.ATTR_RULES,"ATTR_NAME"),l(t.ATTR_RULES,(function(t,n){V(n),t=s(t),(-1===O.indexOf(t)||y[t]&&0<y[t].length)&&(-1===O.indexOf(t)&&O.push(t),y[t]&&y[t].constructor===Array||(y[t]=[]),-1===y[t].indexOf(e)&&y[t].push(e))}))})),delete e.USE_PROFILES,e}(_),n(window))}return F||l(M,(function(){F=!0})),W.sanitize=function(e,r){return r=function(e){if(!e||e.constructor!==Object)return t;var n={};return l(t,(function(t,r){t in e&&-1!==g.indexOf(t)&&(!0===e[t]||!1===e[t]||e[t]&&e[t].constructor===RegExp)?n[t]=e[t]:n[t]=r})),n.SAFE_FOR_TEMPLATES&&(n.ALLOW_DATA_ATTR=!1),n.RETURN_DOM_FRAGMENT&&(n.RETURN_DOM=!0),n.KEEP_CONTENT&&n.GLOBAL_TAGS.push("#text"),n.ADD_TAGS&&delete n.ADD_TAGS,n.ADD_ATTR&&delete n.ADD_ATTR,n}(r),e=n.sanitize(e,r),(r=W.removed).splice.apply(r,[0,W.removed.length].concat(fe(n.removed))),e},c(w,["script"]),c(b,[]),D=t.ALLOWED_STYLE,n.removeAllHooks(),y=!1,-1===w.indexOf("style")&&w.push("style"),-1===b.indexOf("style")&&b.push("style"),"INLINE"!==D&&"ALL"!==D||(b.splice(b.indexOf("style"),1),-1===R.indexOf("style")&&R.push("style"),F&&n.addHook("uponSanitizeAttribute",(function(e,t){var n,r;"style"===t.attrName&&(e.ownerDocument.baseURI||((r=(n=window.document).createElement("base")).href=n.baseURI,e.ownerDocument.head.appendChild(r)),y=!1,H(e.style),0!==(r=e.style.cssText).length?t.attrValue=y?r:e.getAttribute("style"):t.keepAttr=!1)}))),"INTERNAL"!==D&&"ALL"!==D||(w.splice(w.indexOf("style"),1),-1===L.indexOf("style")&&L.push("style"),F&&n.addHook("uponSanitizeElement",(function(e,t){var n;"style"===t.tagName&&null!==e.sheet&&(n=e.sheet.cssRules,y=!1,function e(t,n){for(var r=t.length-1;0<=r;r--){var o=t[r];0<k.length&&-1<k.indexOf(o.type)?(n.deleteRule(r),y=!0):1===o.type&&o.selectorText||8===o.type&&o.keyText?o.style&&H(o.style):4!==o.type&&7!==o.type&&12!==o.type||!o.cssRules||e(o.cssRules,o)}}(n,e.sheet),y&&(function(e,t){for(var n=t.length-1;0<=n;n--)1!==t[n].type&&3!==t[n].type&&4!==t[n].type&&7!==t[n].type&&12!==t[n].type||e.push(t[n].cssText)}(t=[],n),e.textContent=t.join("\n")))}))),(C||I)&&(S={},l(v,(function(e,t){S[e]={},l(t.ATTR_RULES,(function(t,n){return S[e][t]=n}))})),l(S,(function(e,t){l(C,(function(t,n){return S[e][t]=n}))})),l(I,(function(e,t){S[e]||(S[e]={}),l(t.ATTR_RULES,(function(t,n){return S[e][t]=n}))})),n.addHook("uponSanitizeAttribute",(function(e,t){var n,r,o=S[t.nodeName]&&S[t.nodeName][t.attrName]||C&&C[t.attrName];o&&(r=(n=B(e,o,t.attrName)).isValid,(o=n.rule)&&o.FORCE_KEEP_ATTR&&(t.forceKeepAttr=!0),r||(n=e,r=t,"REMOVE_ELEMENT"!==(e=o).ACTION?void 0!==e.FALLBACK_VALUE?(t=e.FALLBACK_VALUE,(o=de.exec(e.FALLBACK_VALUE))&&(n=n.getAttribute(e.ATTR_NAME),"${ZWAF.URL_COMPONENT}"===o[0]&&(n=window.encodeURIComponent(n)),t=e.FALLBACK_VALUE.replace(o[0],n)),ie.test(t.replace(ae,""))?r.keepAttr=!1:r.attrValue=t):r.keepAttr=!1:r.keepElement=!1))}))),(P||I)&&(O={},l(v,(function(e,t){O[e]={},l(t.APPEND_ATTR,(function(t,n){return O[e][t]=n}))})),l(O,(function(e,t){l(C,(function(t,n){return O[e][t]=n}))})),l(I,(function(e,t){O[e]||(O[e]={}),l(t.APPEND_ATTR,(function(t,n){return O[e][t]=n}))})),n.addHook("afterSanitizeAttributes",(function(e){var t,n=e.nodeName.toLowerCase(),r={};l(P,(function(e,t){return r[e]=t})),l(O[n],(function(e,t){return r[e]=t})),t=e,l(r,(function(e,n){if(!t.hasAttribute(e.toLowerCase()))if(n.SIBLING_CONDITIONS&&0!=n.SIBLING_CONDITIONS.length)for(var r=0;r<n.SIBLING_CONDITIONS.length;r++){var o=(i=B(t,n.SIBLING_CONDITIONS[r])).isValid,i=i.rule;if(o)return i=(void 0!==i.APPEND_ATTR_VALUE?i:n).APPEND_ATTR_VALUE,t.setAttribute(e,i),0}else t.setAttribute(e,n.APPEND_ATTR_VALUE)}))}))),t[_]&&n.addHook("uponSanitizeAttribute",(function(e,t){0===t.attrName.indexOf("on")&&(t.keepAttr=!1)})),U&&n.addHook("uponSanitizeAttribute",(function(e,t){U[t.attrName]&&-1===U[t.attrName].indexOf(t.nodeName)&&-1===U[t.attrName].indexOf("*")&&(t.keepAttr=!1)})),t.ALLOWED_TAGS=L,t.ALLOWED_ATTR=R,t.GLOBAL_ATTRIBUTES=R,t&&!t.REUSE_CONFIG&&pe&&pe(t),W.isSupported=n.isSupported,W.version=n.version,W.removed=[],W}(n,i),pe&&pe(i),delete window.DOMPurify,"7.0.0"!==o.version||o.HTMLPurifier||o.defineProperty(o,"HTMLPurifier",i,!0,!1,!1,!0),o["7_0_0"].HTMLPurifier||o.defineProperty(o["7_0_0"],"HTMLPurifier",i,!0,!1,!1,!0),o}()},587:function(e){e.exports=function(){"use strict";function e(e,t,n,r,o,i,a){if(r||!(t in e))return Object.defineProperty&&function(){try{return Object.defineProperty({},"x",{}),1}catch(e){return}}()?(o=!0===o,i=!0===i,a=!0===a,Object.defineProperty(e,t,{value:n,writable:o,configurable:i,enumerable:a})):(e[t]=n,e)}var t,n,r=(r=String.prototype.codePointAt)||function(e){if(null===this)throw new TypeError(" ");var t=String(this),n=t.length,r=e?Number(e):0;if(!((r=window.isNan(r)?0:r)<0||n<=r)){var o=t.charCodeAt(r);return e=void 0,55296<=o&&o<=56319&&r+1<n&&56320<=(e=t.charCodeAt(r+1))&&e<=57343?1024*(o-55296)+e-56320+65536:o}},o=String.fromCodePoint;function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}o||(t=String.fromCharCode,n=Math.floor,o=function(){for(var e=[],r=arguments.length,o=Array(r),i=0;i<r;i++)o[i]=arguments[i];var a=o.length,l=-1;if(!a)return"";for(var c="";++l<a;){var u=Number(o[l]);if(!isFinite(u)||u<0||1114111<u||n(u)!==u)throw new RangeError("Invalid code point: "+u);u<=65535?e.push(u):(u-=65536,e.push(55296+(u>>10),u%1024+56320)),(l+1===a||16384<e.length)&&(c+=t.apply(void 0,e),e.length=0)}return c});var a=(function(e,t){t&&i(e.prototype,t)}(l,[{key:"debug",value:function(){var e;if(window&&window.console&&this.level!==this.LEVELS.NONE&&this.level===this.LEVELS.DEBUG){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];(e=window.console).debug.apply(e,n.concat([performance.now()]))}}},{key:"info",value:function(){var e;if(window&&window.console&&this.level!==this.LEVELS.NONE&&!(this.level>this.LEVELS.INFO)){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];(e=window.console).log.apply(e,n.concat([performance.now()]))}}},{key:"warn",value:function(){var e;if(window&&window.console&&this.level!==this.LEVELS.NONE&&!(this.level>this.LEVELS.WARN)){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];(e=window.console).warn.apply(e,n.concat([performance.now()]))}}},{key:"error",value:function(){var e;if(window&&window.console&&this.level!==this.LEVELS.NONE&&!(this.level>this.LEVELS.ERROR)){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];(e=window.console).error.apply(e,n.concat([performance.now()]))}}}]),l);function l(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),this.LEVELS={NONE:-1,DEBUG:0,INFO:1,WARN:2,ERROR:3},e===this.LEVELS.NONE||e===this.LEVELS.DEBUG||e===this.LEVELS.INFO||e===this.LEVELS.WARN||e===this.LEVELS.ERROR?this.level=e:this.level=this.LEVELS.ERROR}var c=window&&window.ZWAF?window.ZWAF:{version:"7.0.0"},u=new a;c.defineProperty||(c.defineProperty=e),c.logger||(c.logger=u),c["7_0_0"]||(c["7_0_0"]={version:"7.0.0",defineProperty:e,logger:u});var s=!1;function d(e,t,n){var r=2<arguments.length&&void 0!==n?n:{};if(r=Object.assign({path:"/",SameSite:"lax","max-age":864e7},r),encodeURIComponent){var o,i=encodeURIComponent(e)+"="+encodeURIComponent(t);for(o in r){i+="; "+o;var a=r[o];!0!==a&&(i+="="+a)}document.cookie=i}}function f(e,t){d(e,"",{path:1<arguments.length&&void 0!==t?t:"/","max-age":-1})}a={log:function(){if(window&&window.console&&window.console.log&&window.navigator&&window.navigator.userAgent&&!s){var e=window.navigator.userAgent.match(/opera|chrome|safari|firefox|msie|trident(?=\/)/i);if(s=!0,e&&e[0].search(/trident|msie/i)<0)return window.console.log("%cSTOP!","color:red;font-size:xx-large;font-weight:bold;"),void window.console.log("%cThis is a browser feature intended for developers. Do not enter or paste code which you don't understand. It may allow attackers to steal your information or impersonate you.\nSee https://en.wikipedia.org/wiki/Self-XSS for more details","font-size:large;");window.console.log("STOP!\nThis is a browser feature intended for developers. Do not enter or paste code which you don't understand. It may allow attackers to steal your information or impersonate you.\nSee https://en.wikipedia.org/wiki/Self-XSS for more details")}}},u=Array.prototype.indexOf||function(e){if(null==this)throw new TypeError(" ");var t={},n=t.length>>>0;if(0==n)return-1;var r=0;if(0<(arguments.length<=1?0:arguments.length-1)&&(r=Number(arguments.length<=2?void 0:arguments[2]),isNaN(r)?r=0:0!==r&&r!==1/0&&r!==-1/0&&(r=(0<r||-1)*Math.floor(Math.abs(r)))),n<=r)return-1;for(var o=0<=r?r:Math.max(n-Math.abs(r),0);o<n;o++)if(o in t&&t.charAt(o)===e)return o;return-1},"7.0.0"!==c.version||c.Console||c.defineProperty(c,"Console",a,!0,!1,!1,!0),c["7_0_0"].Console||c.defineProperty(c["7_0_0"],"Console",a,!0,!1,!1,!0),["_zcsr_tmp","com_chat_owner","com_avcliq_owner","wms.agent"].some((function(e){return!!function(e){e+="=";var t=document.cookie,n=void 0;return t.split("; ").forEach((function(t){if(void 0===n){var r=void 0;try{decodeURIComponent&&(r=decodeURIComponent(t))}catch(e){r=t,ZWAF&&ZWAF.logger&&ZWAF.logger.warn&&ZWAF.logger.warn("Error while trying to decode Cookie value!")}0===r.indexOf(e)&&(n=r.substring(e.length))}})),n}(e)}))&&c&&c["7_0_0"]&&c["7_0_0"].Console&&c["7_0_0"].Console.log(),a={arrayIndexOf:u},Object.freeze&&Object.freeze(a),"7.0.0"!==c.version||c.util||c.defineProperty(c,"util",a,!0,!1,!1,!0),c["7_0_0"].util||c.defineProperty(c["7_0_0"],"util",a,!0,!1,!1,!0);var p="_zwaf_ua";function m(e){for(var t=[],n=0;n<e.length;n++)t.push(e[n].charCodeAt(0));return t}u={init:function(){f(p);var e=!!window.ulaa,t=navigator&&navigator.brave&&"function"==typeof navigator.brave.isBrave;e?d(p,"Ulaa"):t?d(p,"Brave"):window&&window.addEventListener("load",(function(){window.setTimeout((function(){window.getComputedStyle(window.document.documentElement).getPropertyValue("--arc-palette-background")&&d(p,"Arc")}),1e3)}))},disable:function(){f(p)}},"7.0.0"!==c.version||c.UAIdentification||c.defineProperty(c,"UAIdentification",u,!0,!1,!1,!0),c["7_0_0"].UAIdentification||c.defineProperty(c["7_0_0"],"UAIdentification",u,!0,!1,!1,!0),c&&c["7_0_0"]&&c["7_0_0"].UAIdentification&&c["7_0_0"].UAIdentification.init(),u={};for(var A=a.arrayIndexOf,E={HTML:m([",",".","-","_"," "]),HTMLATTR:m([",",".","-","_"]),CSS:m([]),JAVASCRIPT:m([",",".","_"])},T={},h=(h="34=&quot|38=&amp|60=&lt|62=&gt|160=&nbsp|161=&iexcl|162=&cent|163=&pound|164=&curren|165=&yen|166=&brvbar|167=&sect|168=&uml|169=&copy|170=&ordf|171=&laquo|172=&not|173=&shy|174=&reg|175=&macr|176=&deg|177=&plusmn|178=&sup2|179=&sup3|180=&acute|181=&micro|182=&para|183=&middot|184=&cedil|185=&sup1|186=&ordm|187=&raquo|188=&frac14|189=&frac12|190=&frac34|191=&iquest|192=&Agrave|193=&Aacute|194=&Acirc|195=&Atilde|196=&Auml|197=&Aring|198=&AElig|199=&Ccedil|200=&Egrave|201=&Eacute|202=&Ecirc|203=&Euml|204=&Igrave|205=&Iacute|206=&Icirc|207=&Iuml|208=&ETH|209=&Ntilde|210=&Ograve|211=&Oacute|212=&Ocirc|213=&Otilde|214=&Ouml|215=&times|216=&Oslash|217=&Ugrave|218=&Uacute|219=&Ucirc|220=&Uuml|221=&Yacute|222=&THORN|223=&szlig|224=&agrave|225=&aacute|226=&acirc|227=&atilde|228=&auml|229=&aring|230=&aelig|231=&ccedil|232=&egrave|233=&eacute|234=&ecirc|235=&euml|236=&igrave|237=&iacute|238=&icirc|239=&iuml|240=&eth|241=&ntilde|242=&ograve|243=&oacute|244=&ocirc|245=&otilde|246=&ouml|247=&divide|248=&oslash|249=&ugrave|250=&uacute|251=&ucirc|252=&uuml|253=&yacute|254=&thorn|255=&yuml|338=&OElig|339=&oelig|352=&Scaron|353=&scaron|376=&Yuml|402=&fnof|710=&circ|732=&tilde|913=&Alpha|914=&Beta|915=&Gamma|916=&Delta|917=&Epsilon|918=&Zeta|919=&Eta|920=&Theta|921=&Iota|922=&Kappa|923=&Lambda|924=&Mu|925=&Nu|926=&Xi|927=&Omicron|928=&Pi|929=&Rho|931=&Sigma|932=&Tau|933=&Upsilon|934=&Phi|935=&Chi|936=&Psi|937=&Omega|945=&alpha|946=&beta|947=&gamma|948=&delta|949=&epsilon|950=&zeta|951=&eta|952=&theta|953=&iota|954=&kappa|955=&lambda|956=&mu|957=&nu|958=&xi|959=&omicron|960=&pi|961=&rho|962=&sigmaf|963=&sigma|964=&tau|965=&upsilon|966=&phi|967=&chi|968=&psi|969=&omega|977=&thetasym|978=&upsih|982=&piv|8194=&ensp|8195=&emsp|8201=&thinsp|8204=&zwnj|8205=&zwj|8206=&lrm|8207=&rlm|8211=&ndash|8212=&mdash|8216=&lsquo|8217=&rsquo|8218=&sbquo|8220=&ldquo|8221=&rdquo|8222=&bdquo|8224=&dagger|8225=&Dagger|8226=&bull|8230=&hellip|8240=&permil|8242=&prime|8243=&Prime|8249=&lsaquo|8250=&rsaquo|8254=&oline|8260=&frasl|8364=&euro|8465=&image|8472=&weierp|8476=&real|8482=&trade|8501=&alefsym|8592=&larr|8593=&uarr|8594=&rarr|8595=&darr|8596=&harr|8629=&crarr|8656=&lArr|8657=&uArr|8658=&rArr|8659=&dArr|8660=&hArr|8704=&forall|8706=&part|8707=&exist|8709=&empty|8711=&nabla|8712=&isin|8713=&notin|8715=&ni|8719=&prod|8721=&sum|8722=&minus|8727=&lowast|8730=&radic|8733=&prop|8734=&infin|8736=&ang|8743=&and|8744=&or|8745=&cap|8746=&cup|8747=&int|8756=&there4|8764=&sim|8773=&cong|8776=&asymp|8800=&ne|8801=&equiv|8804=&le|8805=&ge|8834=&sub|8835=&sup|8836=&nsub|8838=&sube|8839=&supe|8853=&oplus|8855=&otimes|8869=&perp|8901=&sdot|8968=&lceil|8969=&rceil|8970=&lfloor|8971=&rfloor|10216=&lang|10217=&rang|9674=&loz|9824=&spades|9827=&clubs|9829=&hearts|9830=&diams").split("|"),_=0;_<h.length;_++){var g=h[_].split("=");T[g[0]]=g[1]}for(var N=[],v=0;v<255;v++)N[v]=48<=v&&v<=57||65<=v&&v<=90||97<=v&&v<=122?null:v.toString(16);function y(e){return e<256?N[e]:e.toString(16)}function S(e,t){return-1!==A.call(e,t)||null===(e=y(t))?o(t):t<=31&&9!=t&&10!=t&&13!=t||127<=t&&t<=159||32===t?"&#x20;":void 0!==(t=T[t])?t+";":"&#x"+e+";"}function O(e,t){return-1!==A.call(e,t)||null===y(t)?String.fromCharCode(t):(e=t.toString(16),t<256?"\\x"+"00".substr(e.length)+e.toUpperCase():"\\u"+"0000".substr(e.length)+e.toUpperCase())}function L(e,t){return-1!==A.call(e,t)||null===(e=y(t))?o(t):"\\"+e+" "}function R(e,t,n,o){if(null==t||"string"!=typeof t)return t;for(var i,a="",l=0;l<t.length;l++)o?(a+=n(e,i=r.call(t,l),o),65535<i&&l++):a+=n(e,t.charCodeAt(l));return a}return u.encodeForHTML=function(e){return R(E.HTML,e,S,!0)},u.encodeForHTMLAttribute=function(e){return R(E.HTMLATTR,e,S,!0)},u.encodeForJavaScript=function(e){return R(E.JAVASCRIPT,e,O,!1)},u.encodeForCSS=function(e){return R(E.CSS,e,L,!0)},Object.freeze&&Object.freeze(u),"7.0.0"!==c.version||c.Encoder||c.defineProperty(c,"Encoder",u,!0,!1,!1,!0),c["7_0_0"].Encoder||c.defineProperty(c["7_0_0"],"Encoder",u,!0,!1,!1,!0),c}()},887:()=>{window.DOMPurifyCopy&&(window.DOMPurify=window.DOMPurifyCopy,window.DOMPurifyCopy=void 0)}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";n(238);var e=n(508),t=n.n(e);window.ZWAF=t(),n(887),n(587),window.ZSEC=window.ZWAF})()})();/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; };
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) });

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: true });
  defineProperty(
    GeneratorFunctionPrototype,
    "constructor",
    { value: GeneratorFunction, configurable: true }
  );
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    defineProperty(this, "_invoke", { value: enqueue });
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per GeneratorResume behavior specified since ES2015:
        // ES2015 spec, step 3: https://262.ecma-international.org/6.0/#sec-generatorresume
        // Latest spec, step 2: https://tc39.es/ecma262/#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var methodName = context.method;
    var method = delegate.iterator[methodName];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method, or a missing .next method, always terminate the
      // yield* loop.
      context.delegate = null;

      // Note: ["return"] must be used for ES3 parsing compatibility.
      if (methodName === "throw" && delegate.iterator["return"]) {
        // If the delegate iterator has a return method, give it a
        // chance to clean up.
        context.method = "return";
        context.arg = undefined;
        maybeInvokeDelegate(delegate, context);

        if (context.method === "throw") {
          // If maybeInvokeDelegate(context) changed context.method from
          // "return" to "throw", let that override the TypeError below.
          return ContinueSentinel;
        }
      }
      if (methodName !== "return") {
        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a '" + methodName + "' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(val) {
    var object = Object(val);
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable != null) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    throw new TypeError(typeof iterable + " is not iterable");
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  typeof module === "object" ? module.exports : {}
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
;var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*Polyfills for functions not available in other browsers. */

/*Polyfill for Node.after
//Not supported out of the box in IE and Edge. 
//from: https://github.com/jserz/js_piece/blob/master/DOM/ChildNode/after()/after().md */
(function (arr) {
    arr.forEach(function (item) {
        if (item.hasOwnProperty('after')) {
            return;
        }
        Object.defineProperty(item, 'after', {
            configurable: true,
            enumerable: true,
            writable: true,
            value: function after() {
                var argArr = Array.prototype.slice.call(arguments),
                    docFrag = document.createDocumentFragment();

                argArr.forEach(function (argItem) {
                    var isNode = argItem instanceof Node;
                    docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));
                });

                this.parentNode.insertBefore(docFrag, this.nextSibling);
            }
        });
    });
})([Element.prototype, CharacterData.prototype, DocumentType.prototype]);

/*Polyfill for replaceWith. 
//Not supported out of the box for IE and Edge. */
function ReplaceWith(Ele) {
    var parent = this.parentNode,
        i = arguments.length,
        firstIsNode = +(parent && (typeof Ele === 'undefined' ? 'undefined' : _typeof(Ele)) === 'object');
    if (!parent) {
        return;
    }

    while (i-- > firstIsNode) {
        if (parent && _typeof(arguments[i]) !== 'object') {
            arguments[i] = document.createTextNode(arguments[i]);
        }if (!parent && arguments[i].parentNode) {
            arguments[i].parentNode.removeChild(arguments[i]);
            continue;
        }
        parent.insertBefore(this.previousSibling, arguments[i]);
    }
    if (firstIsNode) {
        parent.replaceChild(this, Ele);
    }
}
if (!Element.prototype.replaceWith) {
    Element.prototype.replaceWith = ReplaceWith;
}
if (!CharacterData.prototype.replaceWith) {
    CharacterData.prototype.replaceWith = ReplaceWith;
}
if (!DocumentType.prototype.replaceWith) {
    DocumentType.prototype.replaceWith = ReplaceWith;
}

/*Polyfill for startsWith
//Not supported out of the box for  IE */
if (!String.prototype.startsWith) {
    String.prototype.startsWith = function (searchString, position) {
        position = position || 0;
        return this.indexOf(searchString, position) === position;
    };
}

/*Polyfill for endsWith
//Not supported out of the box for  IE */
if (!String.prototype.endsWith) {
    String.prototype.endsWith = function (search, this_len) {
        if (this_len === undefined || this_len > this.length) {
            this_len = this.length;
        }
        return this.substring(this_len - search.length, this_len) === search;
    };
}

var _Lyte = {
    version: "3.7.0-BETA1",
    $: {
        consoleTime: []
    },
    registeredMixins: {},
    registeredServices: {},
    requiredServices: {},
    toBeInjectedServices: {},
    _registeredComponents: {},
    _keywords: {
        "component": ["init", "didConnect", "didDestroy", "constructor", "onError", "actions", "methods", "data"],
        "adapter": ["namespace", "actionNamespace", "host", "withCredentials", "buildURL", "methodForRequest", "headersForRequest", "reloadRecord", "reloadRecord", "reloadAll", "processRequest", "parseResponse", "parseRequest", "super"],
        "serializer": ["normalize", "normalizeResponse", "serialize", "serializeKey", "deserializeKey", "extractMeta", "payloadKey", "serializeRecord", "normalizeRecord", "super"],
        "route": ["getDependencies", "getResources", "beforeModel", "model", "afterModel", "redirect", "renderTemplate", "afterRender", "beforeExit", "didDestroy", "queryParams", "title", "routeName", "component", "parent", "currentModel", "forceFetch", "setTitle", "setQueryParams", "getQueryParams", "setDynamicParam", "getDynamicParam", "removeFromCache", "refresh", "transitionTo", "replaceWith", "actions"],
        "is": function is(key, scope) {
            var arr = ["component", "adapter", "serializer", "route"];
            if (scope) {
                arr = [scope];
            }
            var len = arr.length;
            for (var i = 0; i < len; i++) {
                var keyArr = this[arr[i]];
                if (keyArr) {
                    var res = keyArr.indexOf(key);
                    if (res != -1) {
                        return true;
                    }
                }
            }
            return false;
        }
    },
    Mixin: {},
    Service: {},
    debug: false,
    performance: false,
    toBeRegistered: [],
    browser: {},
    registeredCustomComponent: {},
    Globals: {}
};
if (window.isLyteWidgetParent) {
    _widgetLyte = _Lyte;
    _Lyte.isWidgetBuild = true;
    window.__lyteConfig.isWidgetBuild = true;
} else {
    Lyte = _Lyte;
}

var IdleTaskScheduler = function () {
    function IdleTaskScheduler(obj) {
        _classCallCheck(this, IdleTaskScheduler);

        this.idleCallback = this.idleCallback.bind(this);
        this.timeout = 50;
        this.chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        this.tasks = new Map();
        this.idleCallbackRequested = false;
        this.delayInit = false;
        this.useRequestIdleCallback = true;
        this.priorityQueue = [];
        this.processTime = {};
        this.perf = false;
        if (obj != undefined) {
            if (obj.useRequestIdleCallback !== undefined) {
                this.useRequestIdleCallback = obj.useRequestIdleCallback;
            }
            if (obj.delayInit !== undefined) {
                this.delayInit = obj.delayInit;
            }
            if (obj.timeout !== undefined) {
                this.timeout = obj.timeout;
            }
            if (obj.priorityQueue !== undefined) {
                this.priorityQueue = obj.priorityQueue;
            }
            if (obj.perf !== undefined) {
                this.perf = obj.perf;
            }
        }
    }

    _createClass(IdleTaskScheduler, [{
        key: 'isGenerator',
        value: function isGenerator(obj) {
            return obj !== null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === "object" && typeof obj.next === "function" && typeof obj[Symbol.iterator] === "function";
        }
    }, {
        key: 'init',
        value: function init(obj) {
            if (this.delayInit == true) {
                if (obj !== undefined) {
                    if (obj.useRequestIdleCallback !== undefined) {
                        this.useRequestIdleCallback = obj.useRequestIdleCallback;
                    }
                    if (obj.timeout !== undefined) {
                        this.timeout = obj.timeout;
                    }
                    if (obj.perf !== undefined) {
                        this.perf = obj.perf;
                    }
                }
                this.delayInit = false;
                this.tasksScheduler();
            }
        }
    }, {
        key: 'getUniqueKey',
        value: function getUniqueKey(len) {
            var result;
            while (result == undefined || this.tasks.has(result)) {
                result = undefined;
                result = this.generateUniqueKey(len);
            }
            return result;
        }
    }, {
        key: 'generateUniqueKey',
        value: function generateUniqueKey(length) {
            var result = '',
                clen = this.chars.length;
            for (var _i2 = 0; _i2 < length; _i2++) {
                result += this.chars.charAt(Math.floor(Math.random() * clen));
            }
            return result;
        }
    }, {
        key: 'enqueueTask',
        value: function enqueueTask(handler, data, id) {
            if (!id) {
                id = this.getUniqueKey(6);
            }
            if (this.tasks.has(id)) {
                console.error("Task with id-" + id + " is alreaded queued for execution.");
                return;
            }
            this.tasks.set(id, { handler: handler, data: data });
            this.tasksScheduler();
            return id;
        }
    }, {
        key: 'deleteTask',
        value: function deleteTask(id) {
            if (id) {
                var val = this.tasks.get(id);
                this.tasks.delete(id);
                if (this.priorityQueue.length) {
                    var ind = this.priorityQueue.indexOf(id);
                    if (ind != -1) {
                        this.priorityQueue.splice(ind, 1);
                    }
                }
                return val;
            }
        }
    }, {
        key: 'getPriorityQObj',
        value: function getPriorityQObj() {
            var id,
                i = 0,
                pObj;
            if (this.priorityQueue.length) {
                var len = this.priorityQueue.length;
                while (i < len) {
                    id = this.priorityQueue[i];
                    if (this.tasks.has(id)) {
                        pObj = this.tasks.get(id);
                        break;
                    }
                    i++;
                }
                if (pObj) {
                    return { id: id, obj: pObj, ind: i };
                }
            }
            return false;
        }
    }, {
        key: 'dequeueTask',
        value: function dequeueTask(id) {
            if (id) {
                var val = this.tasks.get(id);
                // console.log("dequeud-",id);
                this.tasks.delete(id);
                return val;
            } else if (this.tasks.size || this.priorityQueue.length) {
                var pqObj = this.getPriorityQObj(),
                    gnxt,
                    gval,
                    obj,
                    isPriority = false,
                    ind;
                if (pqObj !== false) {
                    id = pqObj.id;
                    obj = pqObj.obj;
                    ind = pqObj.ind;
                    isPriority = true;
                } else {
                    if (!this.tasks.size) {
                        return;
                    }
                    var val = this.tasks.entries().next().value;
                    id = val[0];
                    obj = val[1];
                }
                // console.log("dequeud-",id);
                this.currentTask = { id: id, handler: obj.handler };
                Lyte.extendEventListeners(this.currentTask);
                if (this.isGenerator(obj.handler)) {
                    gnxt = obj.handler.next();
                    if (gnxt.done == false) {
                        gval = gnxt.value;
                        if (typeof gval == "function") {
                            return gval;
                        }
                    } else {
                        this.currentTask.triggerEvent("done", id);
                        if (isPriority) {
                            this.priorityQueue.splice(ind, 1);
                        }
                        this.tasks.delete(id);
                        return this.dequeueTask();
                    }
                } else {
                    this.currentTask.triggerEvent("done", id);
                    if (isPriority) {
                        this.priorityQueue.splice(ind, 1);
                    }
                    this.tasks.delete(id);
                }
                return obj;
            }
        }
    }, {
        key: 'tasksScheduler',
        value: function tasksScheduler() {
            if (this.delayInit == false) {
                if (this.tasks.size) {
                    if (this.idleCallbackRequested == false) {
                        if ('requestIdleCallback' in window && this.useRequestIdleCallback) {
                            this.idleCallbackRequested = true;
                            requestIdleCallback(this.idleCallback);
                        } else {
                            this.requestIdleCallback(this.idleCallback);
                        }
                    }
                } else {
                    if ('cancelIdleCallback' in window && this.useRequestIdleCallback) {
                        cancelIdleCallback(this.idleCallback);
                    }
                }
            }
        }
    }, {
        key: 'idleCallback',
        value: function idleCallback(deadline) {
            var task,
                i = 0,
                remTime = deadline.timeRemaining();
            while (remTime > 0 && this.tasks.size) {
                task = this.dequeueTask();
                if (this.perf) {
                    var p1 = performance.now();
                }
                if (typeof task == "function") {
                    // setTimeout(function(){
                    task();
                    // },1);
                }
                if ((typeof task === 'undefined' ? 'undefined' : _typeof(task)) == "object") {
                    // setTimeout(function(){
                    var data = task.data || [];
                    if (typeof task.handler == "function") {
                        var _task;

                        (_task = task).handler.apply(_task, _toConsumableArray(data));
                    }
                    // },1);
                }
                if (this.perf) {
                    var p2 = performance.now();
                    var id = this.currentTask.id;
                    this.processTime[id] = (this.processTime.hasOwnProperty(id) ? this.processTime[id] : 0) + (p2 - p1);
                }
                remTime = deadline.timeRemaining();
            }
            this.idleCallbackRequested = false;
            this.tasksScheduler();
        }
    }, {
        key: 'requestIdleCallback',
        value: function requestIdleCallback(callback) {
            var self = this;
            setTimeout(function () {
                setTimeout(function () {
                    var startTime = Date.now();
                    callback({
                        timeRemaining: function timeRemaining() {
                            var diffTime = Date.now() - startTime;
                            if (diffTime > self.timeout) {
                                return 0;
                            }
                            return self.timeout - diffTime;
                        }
                    });
                }, 1);
            }, 50);
        }
    }]);

    return IdleTaskScheduler;
}();

(function (Lyte) {
    var userAgent = Lyte.$.userAgent = window.userAgent = navigator.userAgent;
    var singletonServices = new Map();
    //temporary fix for IE 11
    if (userAgent.match(/rv:11/)) {
        Lyte.browser.ie = true;
        window.action = function () {
            return;
        };
    }
    if (userAgent.match('Edge')) {
        var s = createElement("div");
        s.innerHTML = "<template><div>c</div></template>";
        if (s.querySelector("template").childNodes.length) {
            Lyte.browser.ie = true;
        } else {
            Lyte.browser.edge = true;
        }
        s.remove();
    }

    Lyte.Globals.set = function (scope, value) {
        Lyte.Component.set(Lyte.__gl, scope, value);
    };

    Lyte.Globals.get = function (scope) {
        return Lyte.Component._get(Lyte.__gl, scope);
    };

    Object.defineProperty(Lyte.Service, "__Lyte__", {
        value: Lyte
    });
    Object.defineProperty(Lyte.Mixin, "__Lyte__", {
        value: Lyte
    });
    Object.defineProperty(Lyte.$, "__Lyte__", {
        value: Lyte
    });
    Lyte.Mixin.__Lyte__.requiredMixins = {};
    Lyte.oldProxy = typeof $Lt != "undefined" && $Lt.oldProxy ? $Lt.oldProxy : undefined;

    Lyte.$.assetsDiv = document.createElement("div");
    Lyte.$.assetsDiv.setAttribute("id", "lyteAssetsDiv");
    Lyte.assetsDivContainer = document.head;

    Lyte.$.widgetWrapper = document.createElement("shadow-wrapper");
    Lyte.$.widgetWrapper.attachShadow({ "mode": "open" }); //af
    Lyte.$.widgetWrapper.setAttribute("id", "widgetWrapperDiv");

    Lyte.domContentLoaded = function (callback) {
        if (document.readyState === "complete" || document.readyState === "interactive") {
            callback();
        } else {
            window.addEventListener('DOMContentLoaded', function () {
                callback();
            });
        }
    };

    Lyte.createApplication = function (name, obj) {
        if (obj.init) {
            obj.init.apply(Lyte);
        }
    };

    Lyte.registerErrorCodes = function (obj) {
        Object.assign(Lyte.errorCodes, obj);
    };

    Lyte.establishObserverBindings = function (observers, fromStore, properties, model) {
        var scope = this;
        var watchProps = model && fromStore ? model._fldGrps.JsonPathWatch : scope.constructor._deepWatchProperties;
        if (fromStore) {
            scope = fromStore;
        }
        for (var i = 0; i < observers.length; i++) {
            var props = observers[i].properties;
            var obsAttr = {},
                obsDuplicate = false;
            var Jpath = {};
            for (var j = 0; j < props.length; j++) {
                var actProp;
                var isArrayObserver = false;
                if (typeof props[j] == "string") {
                    if (props[j].search(/^\$\./g) != -1) {

                        var JsonPath = props[j];

                        var CmpPropertyPath = JsonPath.match(/[^\$.][^\.]*/g)[0];
                        if (CmpPropertyPath.search(/\[[0-9*]\]/g) != -1) {
                            CmpPropertyPath = CmpPropertyPath.split(/\[[0-9*]\]/g)[0];
                        }
                        if (watchProps[CmpPropertyPath] == undefined) {
                            watchProps[CmpPropertyPath] = [];
                        }

                        if (Jpath[CmpPropertyPath] == undefined) {
                            Jpath[CmpPropertyPath] = [];
                        }

                        var JSONPATH;
                        var reg = "^\\$\\." + CmpPropertyPath + "\\.?";
                        reg = new RegExp(reg);
                        JSONPATH = props[j].replace(reg, "$.");
                        if (!watchProps[CmpPropertyPath].includes(JSONPATH)) {
                            watchProps[CmpPropertyPath].push(JSONPATH);
                        }

                        if (!Jpath[CmpPropertyPath].includes(JSONPATH)) {
                            Jpath[CmpPropertyPath].push(JSONPATH);
                        }

                        CmpPropertyPath = CmpPropertyPath + ".*";
                        if (!obsAttr.hasOwnProperty(CmpPropertyPath)) {
                            actProp = Lyte.getProperty.call(this, CmpPropertyPath, fromStore, properties);
                            obsAttr[CmpPropertyPath] = true;
                            obsDuplicate = false;
                        } else {
                            obsDuplicate = true;
                        }
                    } else if (props[j].indexOf('.[]') !== -1) {
                        isArrayObserver = true;
                        actProp = Lyte.getProperty.call(this, props[j].substring(0, props[j].indexOf('.[]')), fromStore, properties);
                    } else {
                        if (props[j].indexOf('.*') !== -1) {
                            var prop = props[j].split(".")[0];
                            var isDeepObs = !fromStore && this.component.__data[prop] && this.component.__data[prop].watch || fromStore && model && model.fieldList && model.fieldList[prop] && model.fieldList[prop].watch ? true : false;
                            if (!isDeepObs) {
                                continue;
                            }
                        }
                        actProp = Lyte.getProperty.call(this, props[j], fromStore, properties);
                    }
                    if (!obsDuplicate) {
                        if (!actProp._observers) {
                            Object.defineProperty(actProp, '_observers', {
                                value: new Set(),
                                enumerable: false,
                                writable: true,
                                configurable: true
                            });
                        }
                        actProp._observers.add({ callee: scope, observer: observers[i], isArrayObserver: isArrayObserver });
                    }
                } else {
                    Lyte.warn("ERR27", JSON.stringify(props[j]), observers[i].fnName, this.tagName);
                }
            }
            observers[i].Jpath = Jpath;
            obsAttr = {};
        }
    };

    Lyte.getProperty = function (key, fromStore, properties) {
        var arr = key.match(/([^[\].]+|\[\])/g);
        var property = this;
        if (fromStore) {
            property = properties;
            if (!properties[arr[0]]) {
                properties[arr[0]] = {};
            }
            property = properties[arr[0]];
        } else {
            if (!property._properties[arr[0]]) {
                property._properties[arr[0]] = {};
            }
            property = property._properties[arr[0]];
        }

        Object.defineProperty(property, '_path', { enumerable: false, value: arr[0] });
        for (var _i3 = 1; _i3 < arr.length; _i3++) {
            if (arr[_i3].startsWith("'") || arr[_i3].startsWith('"')) {
                arr[_i3] = arr[_i3].substring(1, arr[_i3].length - 1);
            }
            if (!property[arr[_i3]]) {
                property[arr[_i3]] = {};
                Object.defineProperty(property[arr[_i3]], '_path', { enumerable: false, value: property._path + "." + arr[_i3] });
            }
            property = property[arr[_i3]];
        }
        return property;
    };

    Lyte.getErrorMessage = function (code) {
        var args = Array.from(arguments).slice(1);
        if (Lyte.errorCodes[code]) {
            return Lyte.errorCodes[code].replace(/{(\d+)}/g, function (t, i) {
                return args[i];
            });
        } else {
            return code;
        }
    };

    Lyte.error = function () {
        var errorObj = arguments[0],
            parse = errorObj.stack;
        errorObj = parse ? errorObj : Error(Lyte.getErrorMessage.apply(Lyte, arguments));
        if (Lyte.onerror) {
            Lyte.onerror.call(this, errorObj, arguments[1]);
        }
        Lyte.triggerEvent("error", errorObj, arguments[1]);
        var safari = errorObj.stack && errorObj.stack.indexOf(errorObj.message) == -1;
        if (parse && !safari) {
            errorObj = JSON.parse(JSON.stringify(errorObj, Object.getOwnPropertyNames(errorObj)));
        }
        if (arguments[1]) {
            console.error(errorObj.stack ? safari ? errorObj : errorObj.stack : errorObj.message, arguments[1]);
        } else {
            console.error(errorObj.stack ? safari ? errorObj : errorObj.stack : errorObj.message);
        }
    };

    Lyte.warn = function () {
        var errorObj = arguments[0];
        errorObj = errorObj.stack ? JSON.parse(JSON.stringify(errorObj, Object.getOwnPropertyNames(errorObj))) : Error(Lyte.getErrorMessage.apply(Lyte, arguments));
        console.warn(errorObj.stack ? errorObj.stack.indexOf(errorObj.message) != -1 ? errorObj.stack.replace("Error: ", "") : errorObj : errorObj.message);
    };

    var requiredMixins = {};
    var fnProto = Function.prototype;
    if (!fnProto.on) {
        fnProto.on = function () {
            Lyte.warn("'.on()' method with the argument '" + arguments[0] + "' cannot be executed outside component scope.");
            return { "type": "callBack", "value": this.type === "observer" ? this.value : this, "properties": arguments, "observes": this.type === "observer" ? this : undefined };
        };
    }
    if (!fnProto.observes) {
        fnProto.observes = function () {
            Lyte.warn("'.observes()' method with the arguments '" + arguments[0] + "' cannot be executed outside component scope.");
            return { "type": "observer", "value": this, "properties": arguments, "on": Lyte._onObj, "lyteOn": Lyte._onObj };
        };
    }
    if (!fnProto.computed) {
        fnProto.computed = function () {
            Lyte.warn("'.computed()' method with the arguments '" + arguments[0] + "' cannot be executed outside component scope.");
            return { "type": "computed", "value": this, "properties": arguments };
        };
    }
    Lyte._onObj = function () {
        return { "type": "callBack", "value": this.type === "observer" ? this.value : this, "properties": arguments, "observes": this.type === "observer" ? this : undefined };
    };
    Lyte._observesObj = function () {
        return { "type": "observer", "value": this, "properties": arguments, "on": Lyte._onObj, "lyteOn": Lyte._onObj };
    };
    Lyte._computedObj = function () {
        return { "type": "computed", "value": this, "properties": arguments };
    };
    Lyte._preRegister = function () {
        Lyte._actualFnProtoOn = Function.prototype.on;
        Lyte._actualFnProtoObserves = Function.prototype.observes;
        Lyte._actualFnProtoComputed = Function.prototype.computed;
        var fnProto = Function.prototype;
        fnProto.on = fnProto.lyteOn = Lyte._onObj;
        fnProto.observes = fnProto.lyteObserves = Lyte._observesObj;
        fnProto.computed = fnProto.lyteComputed = Lyte._computedObj;
    };
    Lyte._postRegister = function () {
        var fnProto = Function.prototype;
        fnProto.on = Lyte._actualFnProtoOn;
        fnProto.observes = Lyte._actualFnProtoObserves;
        fnProto.computed = Lyte._actualFnProtoComputed;
    };
    Object.defineProperty(Lyte.Mixin, "register", {
        get: function get() {
            Lyte._preRegister();
            return Lyte.registerMixinWrapper;
        },
        "enumerable": true });
    Lyte.registerMixinWrapper = function () {
        try {
            Lyte.registerMixin.apply(Lyte, arguments);
            Lyte._postRegister();
        } catch (e) {
            Lyte._postRegister();
        }
    };
    Lyte.registerMixin = function (name, mixin) {
        Lyte.registeredMixins[name] = mixin;
        var req;
        if (req = requiredMixins[name]) {
            for (var key in req) {
                Lyte.$.requiredMixins[key](mixin, req[key], key);
            }
        }
    };

    Lyte.Mixin.get = function (name) {
        return Lyte.registeredMixins[name];
    };

    Lyte.$.instantiateService = function (name, data) {
        var service = Lyte.registeredServices[name];
        if (service.singleton == true) {
            if (singletonServices.has(name)) {
                return singletonServices.get(name);
            } else {
                var ins = new service(data);
                singletonServices.set(name, ins);
                return ins;
            }
        } else {
            return new service(data);
        }
    };

    Lyte.Service.register = function (name, service, isSingleton) {
        if (Lyte.registeredServices.hasOwnProperty(name)) {
            Lyte.warn('Service -' + name + ' is already registered');
            return;
        }
        if (!Lyte._keywords.is(name)) {
            var data = service,
                req;
            if (isSingleton) {
                data.singleton = isSingleton;
            }
            Lyte.registeredServices[name] = data;
            var serv = Lyte.requiredServices[name];
            if (serv && serv.size) {
                serv.forEach(function (obj) {
                    var toSend = data;
                    if (obj.isGlobal) {
                        toSend = Lyte.__gS[obj.key] = Lyte.__gS[obj.key] || Lyte.$.instantiateService(name, obj.data);
                    }
                    obj.cB(toSend, obj.key, obj.name, name);
                });
            }
            return data;
        } else {
            Lyte.warn('Service name-' + name + ' should not be a keyword used in Lyte');
        }
    };

    Lyte.Service.getInjected = function (key) {
        if (Lyte.__gS.hasOwnProperty(key)) {
            return Lyte.__gS[key];
        }
    };

    // Lyte.Service.get = function(name) {
    //   return Lyte.registeredServices[name];
    // }

    Lyte.$.requiredServices = function (key, serviceName, cB, type, name, isGlobal, data) {
        var reqServ = Lyte.requiredServices[serviceName];
        var req = reqServ ? reqServ : Lyte.requiredServices[serviceName] = new Map();
        var id = Lyte.$.genMapId(req);
        req.set(id, { key: key, cB: cB, type: type, name: name, serviceName: serviceName, isGlobal: isGlobal, data: data });
        return serviceName + "-" + id;
    };

    Lyte.$.lazyRegisterService = function (service, obj) {
        var scope = obj.scope,
            name = obj.name,
            callback = scope[obj.type][name];
        if (callback) {
            callback[obj.key] = service;
        }
    };

    Lyte.$.injectServices = {};
    Object.defineProperty(Lyte, "__gS", {
        value: {}
    });
    Lyte.injectServices = function (data) {
        var serv = {};
        if (!Array.isArray(data)) {
            data = [data];
        }
        data.forEach(function (itm) {
            if (itm && (typeof itm === 'undefined' ? 'undefined' : _typeof(itm)) == 'object') {
                var key = itm.as,
                    service = itm.service,
                    args = itm.data;
                if (!Lyte._keywords.is(key)) {
                    if (!Lyte.toBeInjectedServices.hasOwnProperty(key)) {
                        Lyte.toBeInjectedServices[key] = service;
                        serv[key] = { service: service, data: args };
                        if (Lyte.registeredServices[service]) {
                            Lyte.__gS[key] = Lyte.$.instantiateService(service, args);
                        }
                    } else {
                        Lyte.warn("A service has already been injected in the key named, ", key);
                    }
                } else {
                    Lyte.warn("Service cannot be used in any keywords of Lyte.");
                }
            } else if (typeof itm == "string") {
                if (!Lyte.toBeInjectedServices.hasOwnProperty(itm)) {
                    Lyte.toBeInjectedServices[itm] = itm;
                    serv[itm] = { service: itm };
                    if (Lyte.registeredServices[itm]) {
                        Lyte.__gS[itm] = Lyte.$.instantiateService(itm);
                    }
                } else {
                    Lyte.warn("A service has already been injected in the key named, ", itm);
                }
            } else {
                Lyte.warn("Invalid data passed to injectServices", itm);
            }
        });
        var mdlObj = Lyte.$.injectServices;
        for (var mKey in mdlObj) {
            for (var key in serv) {
                mdlObj[mKey](key, serv[key].service, mKey, Lyte.__gS[key], undefined, serv[key].data);
            }
        }
    };

    Lyte.$.genMapId = function (map) {
        var id = Math.floor(Math.random() * 10000000000 + 1);
        while (map.get(id)) {
            id = Math.floor(Math.random() * 10000000000 + 1);
        }
        return id.toString();
    };

    Lyte.$.toRemoveFromRequiredServices = function (str) {
        var arr = str.split("-"),
            id = arr[arr.length - 1],
            idLen = id.length,
            servName = str.substr(0, str.length - (idLen + 1));
        var reqArr = Lyte.requiredServices[servName];
        if (reqArr) {
            reqArr.delete(id);
        }
    };

    Lyte.toBeUsedServices = function (obj) {
        // var serviceToBeUsed = obj.callback ? Object.assign({}, Lyte.toBeInjectedServices) : {};
        var serviceToBeUsed = {};
        var arr = obj.services;
        if (arr) {
            arr.forEach(function (service) {
                if (typeof service == "string") {
                    serviceToBeUsed[service] = service;
                } else if (service && (typeof service === 'undefined' ? 'undefined' : _typeof(service)) == "object") {
                    var key = service.as,
                        serv = service.service;
                    if (!Lyte._keywords.is(key, obj.type)) {
                        serviceToBeUsed[key] = serv;
                    } else {
                        Lyte.warn("Service cannot be used in any keywords of Lyte.");
                    }
                }
            });
        }
        return serviceToBeUsed;
    };

    Lyte.extendService = function (arg) {
        var servObj = Lyte.toBeUsedServices(arg),
            name;
        for (var serv in servObj) {
            name = servObj[serv];
            // var scp = arg.isGlobal && Lyte.__gS.hasOwnProperty(serv) : Lyte.registeredServices; 
            if (arg.isGlobal && Lyte.__gS.hasOwnProperty(serv) || !arg.isGlobal && Lyte.registeredServices.hasOwnProperty(name)) {
                var ins = arg.ins,
                    service = arg.isGlobal ? Lyte.__gS[serv] : Lyte.$.instantiateService(name);
                if (!Array.isArray(ins)) {
                    ins = [arg.ins];
                }
                ins.forEach(function (insObj) {
                    insObj[serv] = arg.isGlobal ? Lyte.__gS[serv] : Lyte.$.instantiateService(name);
                });
            } else {
                Lyte.$.requiredServices(serv, name, arg.callback, arg.type, arg.name, arg.isGlobal, arg.data);
            }
        }
    };

    Lyte.$.requiredMixins = function (mixin, dir, type) {
        var req = requiredMixins[mixin] ? requiredMixins[mixin] : requiredMixins[mixin] = {};
        if (!req[type]) {
            req[type] = [dir];
        } else {
            req[type].push(dir);
        }
    };

    Lyte.Mixin.exists = function (name) {
        if (!Lyte.registeredMixins[name]) {
            // Lyte.error('Mixin used before being registered.');
            return false;
        }
        return true;
    };

    Lyte.log = function (text, src, color) {
        if (Lyte.debug) {
            if (color) {
                console.log("%c" + text, 'color:' + color);
            } else {
                console.log(text);
            }
        }
    };

    Lyte.time = function (fn) {
        if (Lyte.performance) {
            var index;
            if ((index = Lyte.$.consoleTime.indexOf(fn)) != -1) {
                Lyte.$.consoleTime.splice(index, 1);
                console.timeEnd(fn);
            } else {
                Lyte.$.consoleTime.push(fn);
                console.time(fn);
            }
        }
    };
    /* disable async function */
    Lyte.isRecord = function (object) {
        if (object && object.$ && object.$.hasOwnProperty("isModified")) {
            return true;
        }
        return false;
    };

    Lyte.isComponent = function (object) {
        if (object && object.$node && object.__data) {
            return true;
        }
        return false;
    };

    /* --------- lyte router v2 changes starts---- */
    Lyte.$.reqFiles = {};

    Lyte.injectResources = function (files, every, completed, options) {
        var successFiles = [],
            errorFiles = [];
        every = every || function () {};
        completed = completed || function () {};
        return new Promise(function (resolve, reject) {
            processRequirements(files, function () {
                if (options && options.defer) {
                    options.defer({
                        injectJS: injectJS,
                        files: files,
                        errorFiles: errorFiles
                    });
                    resolve();
                } else {
                    injectJS(files, function () {
                        completed(successFiles, errorFiles);
                        if (errorFiles.length) {
                            reject(successFiles, errorFiles);
                        } else {
                            resolve(successFiles, errorFiles);
                        }
                    });
                }
            }.bind(this));
        });

        function injectJS(files, resolve, execFiles) {
            var len;
            execFiles = execFiles || [];
            if (!files) {
                resolve(successFiles, errorFiles);
            } else {
                if (!Array.isArray(files)) {
                    files = [files];
                }
                if (!files.length) {
                    resolve(successFiles, errorFiles);
                }
                len = -files.length;
                files.forEach(function (file) {
                    if (typeof file == "string") {
                        var type = getFileExtn(file);
                        if (type && (type == ".js" || type == ".css") && execFiles.indexOf(file) == -1) {
                            execFiles.push(file);
                            createScript(file, function () {
                                loaded();
                            });
                        } else {
                            loaded();
                        }
                    } else if (Array.isArray(file)) {
                        injectJS(file, function () {
                            loaded();
                        });
                    } else {
                        len--;
                        injectJS(file.parent, function () {
                            injectJS(file.child, function () {
                                loaded();
                            });
                            loaded();
                        });
                    }
                });
            }

            function loaded() {
                len++;
                if (len == 0) {
                    resolve(successFiles, errorFiles);
                }
            }
        }

        function createScript(file, resolve) {
            var ev = Lyte.injectResources.respObj[file];
            if (ev && (!Lyte.injectResources.availableTags[file] || Lyte.injectResources.availableTags[file].tag.getAttribute("rel") == "preload")) {
                var type = getFileExtn(file),
                    tag;
                if (type == ".js") {
                    tag = document.createElement('script');
                    tag.setAttribute('type', "text/javascript");
                    tag.setAttribute('src', file);
                } else if (type == ".css") {
                    tag = document.createElement('link');
                    tag.setAttribute('type', "text/css");
                    tag.setAttribute('rel', "stylesheet");
                    tag.setAttribute('href', file);
                }
                ev.getAttributeNames().forEach(function (attr) {
                    if (["href", "as", "rel"].indexOf(attr) == -1) {
                        tag.setAttribute(attr, ev.getAttribute(attr));
                    }
                });
                tag.onerror = tag.onload = function (event) {
                    if (event.type == "error") {
                        errorFiles.push(event);
                    } else {
                        successFiles.push(event);
                    }
                    delete Lyte.injectResources.respObj[file];
                    Lyte.injectResources.availableTags[file].tag.remove();
                    Lyte.injectResources.availableTags[file] = { tag: tag, event: event, type: event.type == "error" ? "error" : "load" };
                    resolve();
                    tag.onerror = tag.onload = undefined;
                };
                Lyte.$.assetsDiv.appendChild(tag);
            } else {
                var t = Lyte.injectResources.availableTags[file];
                if (t.type == "error") {
                    errorFiles.push(t.event);
                } else {
                    successFiles.push(t.event);
                }
                resolve();
            }
        }

        function processRequirements(files, resolve) {
            var len;
            if (!files) {
                resolve();
            } else {
                if (!Array.isArray(files)) {
                    files = [files];
                }
                if (!files.length) {
                    resolve();
                }
                len = -files.length;
                files.forEach(function (file) {
                    if (typeof file == "string") {
                        requestFile(file, Lyte.injectResources.availableTags[file], function () {
                            loaded();
                        });
                    } else if (Array.isArray(file)) {
                        new Promise(function (r) {
                            processRequirements(file, r);
                        }).then(function () {
                            loaded();
                        });
                    } else {
                        len--;
                        new Promise(function (r) {
                            processRequirements(file.parent, r);
                        }).then(function () {
                            loaded();
                        });
                        new Promise(function (r) {
                            processRequirements(file.child, r);
                        }).then(function () {
                            loaded();
                        });
                    }
                });
            }

            function loaded() {
                len++;
                if (len == 0) {
                    resolve();
                }
            }

            function requestFile(file, cached, resolve) {
                if (Lyte.$.reqFiles[file]) {
                    Lyte.$.reqFiles[file].push(resolve);
                } else {
                    Lyte.$.reqFiles[file] = [resolve];
                    if (cached && cached.event.type != "error") {
                        if (Lyte.removeFromCache.arr.indexOf(file) != -1) {
                            Lyte.removeFromCache.arr.splice(Lyte.removeFromCache.arr.indexOf(file), 1);
                        }
                        fileLoaded.call(cached.tag, file, cached.event, true);
                        resolve();
                    } else {
                        makeRequest(file, function (event) {
                            Lyte.injectResources.respObj[file] = this;
                            Lyte.$.reqFiles[file].forEach(function (resolve) {
                                resolve();
                            });
                            // filesObj[file] = this;
                            fileLoaded.call(this, file, event);
                            every.call(this, event);
                        });
                    }
                }
            }

            function fileLoaded(file, event, cached) {
                delete Lyte.$.reqFiles[file];
                if (!cached) {
                    if (Lyte.injectResources.availableTags[file]) {
                        Lyte.injectResources.availableTags[file].tag.remove();
                        delete Lyte.injectResources.respObj[file];
                    }
                    Lyte.injectResources.availableTags[file] = { tag: this, event: event, type: event.type };
                }
            }
        }

        function makeRequest(file, callBack) {
            var tag,
                ev = every.internal || {},
                type = getFileExtn(file);
            ev.file = file;
            if (type == null) {
                Lyte.error('Type of file is not specified in injectResources.');
                return;
            }
            tag = document.createElement('link');
            tag.setAttribute('href', file);
            ev.tag = tag;
            if (type == '.css') {
                tag.setAttribute('as', "style");
            } else {
                tag.setAttribute('as', "script");
            }
            tag.setAttribute('rel', "preload");
            tag.onerror = tag.onload = function (event) {
                callBack.call(this, event);
                this.onerror = this.onload = undefined;
            };
            Lyte.triggerEvent("onBeforeInject", ev);
            Lyte.$.assetsDiv.appendChild(tag);
        };
    };

    function getFileExtn(file) {
        return file.match(/\.[a-zA-Z]+(?=\?|$)/);
    }

    Lyte.injectResources.availableTags = [];
    Lyte.injectResources.respObj = [];

    function getFileExtn(file) {
        return file.match(/\.[a-zA-Z]+(?=\?|$)/);
    }

    Lyte.$.replaceOldInjectResource = function () {
        Lyte.injectResources = function (files, every, completed) {
            var successFiles = [],
                errorFiles = [];
            every = every || function () {};
            completed = completed || function () {};
            return new Promise(function (resolve) {
                processRequirements(files, resolve);
            }).then(function () {
                completed(successFiles, errorFiles);
            });

            function processRequirements(files, resolve) {
                var len;
                if (!files) {
                    resolve();
                } else {
                    if (!Array.isArray(files)) {
                        files = [files];
                    }
                    if (!files.length) {
                        resolve();
                    }
                    len = -files.length;
                    files.forEach(function (file) {
                        if (typeof file == "string") {
                            requestFile(file, Lyte.injectResources.availableTags[file], function () {
                                loaded();
                            });
                        } else if (Array.isArray(file)) {
                            new Promise(function (r) {
                                processRequirements(file, r);
                            }).then(function () {
                                loaded();
                            });
                        } else {
                            new Promise(function (r) {
                                processRequirements(file.parent, r);
                            }).then(function () {
                                new Promise(function (r1) {
                                    processRequirements(file.child, r1);
                                }).then(function () {
                                    loaded();
                                });
                            });
                        }
                    });
                }

                function loaded() {
                    len++;
                    if (len == 0) {
                        resolve();
                    }
                }

                function requestFile(file, cached, resolve) {
                    if (Lyte.$.reqFiles[file]) {
                        Lyte.$.reqFiles[file].push(resolve);
                    } else {
                        Lyte.$.reqFiles[file] = [resolve];
                        if (cached && cached.event.type != "error") {
                            if (Lyte.removeFromCache.arr.indexOf(file) != -1) {
                                Lyte.removeFromCache.arr.splice(Lyte.removeFromCache.arr.indexOf(file), 1);
                            }
                            fileLoaded.call(cached.tag, cached.event, true);
                            resolve();
                        } else {
                            makeRequest(file, function (event) {
                                Lyte.$.reqFiles[file].forEach(function (resolve) {
                                    resolve();
                                });
                                fileLoaded.call(this, event);
                                every.call(this, event);
                            });
                        }
                    }
                }

                function fileLoaded(event, cached) {
                    var file = this.getAttribute('src') || this.getAttribute('href');
                    delete Lyte.$.reqFiles[file];
                    if (!cached) {
                        if (Lyte.injectResources.availableTags[file]) {
                            Lyte.injectResources.availableTags[file].tag.remove();
                        }
                        this.onerror = this.onload = undefined;
                        Lyte.injectResources.availableTags[file] = { tag: this, event: { type: event.type } };
                    }
                }
            }

            function makeRequest(file, callBack) {
                var tags = { ".js": 'script', ".css": 'link' },
                    type = getFileExtn(file);
                tag = document.createElement(tags[type]);
                if (!type) {
                    Lyte.error('Type of file is not specified in injectResources.');
                    return;
                } else if (type == '.css') {
                    tag.setAttribute('href', file);
                    tag.setAttribute('type', "text/css");
                    tag.setAttribute('rel', "stylesheet");
                } else {
                    tag.setAttribute('src', file);
                }
                tag.onerror = tag.onload = function (event) {
                    if (event.type == "error") {
                        errorFiles.push(event);
                    } else {
                        successFiles.push(event);
                    }
                    if (callBack) {
                        callBack.call(this, event);
                    }
                };
                var ev = every.internal || {};
                ev.file = file;
                ev.tag = tag;
                Lyte.triggerEvent("onBeforeInject", ev);
                Lyte.$.assetsDiv.appendChild(tag);
            };
        };

        Lyte.injectResources.availableTags = [];
        Lyte.injectResources.respObj = [];
    };

    Lyte.removeFromCache = function (arr) {
        Lyte.removeFromCache.assign(arr);
        if (Lyte.removeFromCache.arr.length) {
            Lyte.removeFromCache.arr.forEach(function (file) {
                if (Lyte.injectResources.availableTags[file]) {
                    Lyte.injectResources.availableTags[file].tag.remove();
                    delete Lyte.injectResources.availableTags[file];
                    delete Lyte.injectResources.respObj[file];
                }
            });
            Lyte.removeFromCache.arr = [];
        }
    };

    Lyte.removeFromCache.arr = [];

    Lyte.removeFromCache.assign = function (arr) {
        arr = arr == "*" ? Object.keys(Lyte.injectResources.availableTags) : Array.isArray(arr) ? arr : [arr];
        Lyte.removeFromCache.arr = Lyte.removeFromCache.arr.concat(arr);
        return;
    };

    Lyte.$.prefetchSupport = false;
    try {
        if (!Lyte.browser.ie) {
            var link = document.createElement('link');
            Lyte.$.prefetchSupport = link.relList.supports('prefetch') && link.relList.supports('preload');
        }
    } catch (e) {}
    if (!Lyte.$.prefetchSupport) {
        console.log("Prefetch is not supported. Falling back to old implementation");
        Lyte.$.replaceOldInjectResource();
    }

    /* --------- lyte router v2 changes ends ---- */

    Lyte.checkProperty = function (property, dataVal, key, fieldVal, field, record, type, name, init) {
        var exts = "extends";
        switch (property) {
            case "type":
                if (Lyte.Transform.hasOwnProperty(fieldVal) && dataVal !== undefined && dataVal !== null) {
                    var _fld = Lyte.Transform[fieldVal],
                        _ret = true;
                    if (Array.isArray(dataVal)) {
                        if (Lyte.Transform[fieldVal][exts] != "array") {
                            return { code: "ERR03", message: Lyte.errorCodes.ERR03, expected: fieldVal };
                        }
                        if (_fld.hasOwnProperty("items")) {
                            _ret = Lyte.checkProperty("items", dataVal, key, _fld.items);
                        }
                    } else if ((typeof dataVal === 'undefined' ? 'undefined' : _typeof(dataVal)) === "object" && Lyte.Transform[fieldVal][exts] == "object" && _fld.hasOwnProperty("properties")) {
                        _ret = Lyte.checkProperty("properties", dataVal, key, _fld.properties);
                    } else if (Lyte.Transform[fieldVal][exts] != (typeof dataVal === 'undefined' ? 'undefined' : _typeof(dataVal))) {
                        return { code: "ERR03", message: Lyte.errorCodes.ERR03, expected: fieldVal };
                    }
                    if (_ret !== true) {
                        return _ret;
                    }
                } else if (dataVal !== undefined && dataVal !== null) {
                    if (Array.isArray(dataVal)) {
                        if (fieldVal != "array") {
                            return { code: "ERR03", message: Lyte.errorCodes.ERR03, expected: fieldVal };
                        }
                    } else if (fieldVal != (typeof dataVal === 'undefined' ? 'undefined' : _typeof(dataVal))) {
                        return { code: "ERR03", message: Lyte.errorCodes.ERR03, expected: fieldVal };
                    }
                }
                break;
            case "mandatory":
                var validateFlag = fieldVal;
                if ((typeof fieldVal === 'undefined' ? 'undefined' : _typeof(fieldVal)) == "object") {
                    if (init && fieldVal.skipValidationOnInit == true) {
                        validateFlag = false;
                    }
                }
                if (validateFlag && (dataVal == undefined || dataVal == null || dataVal === "")) {
                    return { code: "ERR02", message: Lyte.errorCodes.ERR02 };
                }
                break;
            case "maximum":
                if (typeof dataVal == "number" && dataVal > fieldVal) {
                    return { code: "ERR04", message: Lyte.errorCodes.ERR04, expected: fieldVal };
                }
                break;
            case "minimum":
                if (typeof dataVal == "number" && dataVal < fieldVal) {
                    return { code: "ERR05", message: Lyte.errorCodes.ERR05, expected: fieldVal };
                }
                break;
            case "maxLength":
            case "maxItems":
                if (dataVal && dataVal.length > fieldVal) {
                    return { code: "ERR06", message: Lyte.errorCodes.ERR06, expected: fieldVal };
                }
                break;
            case "minLength":
            case "minItems":
                if (dataVal && dataVal.length < fieldVal) {
                    return { code: "ERR07", message: Lyte.errorCodes.ERR07, expected: fieldVal };
                }
                break;
            case "pattern":
                if (typeof dataVal == "string" && !new RegExp(fieldVal).test(dataVal)) {
                    return { code: "ERR08", message: Lyte.errorCodes.ERR08, expected: fieldVal };
                }
                break;
            case "uniqueItems":
                {
                    if (Array.isArray(dataVal) && fieldVal) {
                        var newArr = [];
                        for (var i = 0; i < dataVal.length; i++) {
                            var val = dataVal[i];
                            if (newArr.indexOf(val) != -1) {
                                return { code: "ERR09", message: Lyte.errorCodes.ERR09 };
                            }
                            newArr.push(val);
                        }
                    }
                    break;
                }
            case "constant":
                if (Array.isArray(dataVal)) {
                    var resp = dataVal.length == fieldVal.length && dataVal.every(function (v, i) {
                        return v === fieldVal[i];
                    });
                    if (!resp) {
                        return { code: "ERR10", message: Lyte.errorCodes.ERR10, expected: fieldVal };
                    }
                } else if ((typeof dataVal === 'undefined' ? 'undefined' : _typeof(dataVal)) == "object") {
                    var resp = store.adapter.$.compareObjects(dataVal, fieldVal);
                    if (!resp) {
                        return { code: "ERR10", message: Lyte.errorCodes.ERR10, expected: fieldVal };
                    }
                } else if (dataVal && dataVal != fieldVal) {
                    return { code: "ERR10", message: Lyte.errorCodes.ERR10, expected: fieldVal };
                }
                break;
            case "items":
                {
                    if (Array.isArray(dataVal)) {
                        for (var i = 0; i < dataVal.length; i++) {
                            if (!(fieldVal.any && Array.isArray(fieldVal))) {
                                fieldVal = [fieldVal];
                            }
                            var fldLen = fieldVal.length,
                                _ret = true;
                            for (var j = 0; j < fldLen; j++) {
                                var _fld = fieldVal[j];
                                for (var property in _fld) {
                                    var resp = Lyte.checkProperty(property, dataVal[i], i, _fld[property], _fld);
                                    if (resp !== true) {
                                        if (_ret === true) {
                                            resp.path = resp.path ? i + "." + resp.path : resp.path;
                                            _ret = resp;
                                        }
                                        break;
                                    }
                                }
                            }
                            if (_ret !== true) {
                                return _ret;
                            }
                        }
                    }
                    break;
                }
            case "properties":
                if ((typeof dataVal === 'undefined' ? 'undefined' : _typeof(dataVal)) == "object" && !Array.isArray(dataVal)) {
                    for (var key in dataVal) {
                        if (fieldVal.hasOwnProperty(key)) {
                            var fld = fieldVal[key];
                            if (!(fld.any && Array.isArray(fld))) {
                                fld = [fld];
                            }
                            var fldLen = fld.length,
                                _ret = true;
                            for (var i = 0; i < fldLen; i++) {
                                var _fld = fld[i];
                                for (var property in _fld) {
                                    var resp = Lyte.checkProperty(property, dataVal[key], key, _fld[property], _fld);
                                    if (resp != true) {
                                        if (_ret === true) {
                                            resp.path = resp.path ? key + "." + resp.path : key.toString();
                                            _ret = resp;
                                        }
                                        break;
                                    }
                                }
                            }
                            if (_ret !== true) {
                                return _ret;
                            }
                        }
                        // else if(field.exact){
                        // 	return { code : "ERR29", message: Lyte.errorCodes.ERR29, property: key };
                        // }
                    }
                }
                break;
            case "validation":
                {
                    var resp = Lyte.customValidator[fieldVal].apply(record, [key, dataVal, name]);
                    if (resp != true) {
                        return resp;
                    }
                    break;
                }
            case "instanceof":
                {
                    if ((typeof dataVal === 'undefined' ? 'undefined' : _typeof(dataVal)) === "object" && !Array.isArray(dataVal) && !(dataVal instanceof fieldVal)) {
                        return { code: "ERR30", message: Lyte.errorCodes.ERR30, property: key, instanceof: fieldVal };
                    }
                }
        }
        return true;
    };

    Lyte.checkNestedProp = function (id, path, dtype, wobj, object, property, value, check, fromStore) {
        if (Lyte.Transform[dtype.type]) {
            dtype = Lyte.Transform[dtype.type];
            dtype.type = dtype.extends;
        }
        if (path.length != 0) {
            if (dtype.type == 'array') {
                if (dtype.items && !isNaN(path[0]) && _typeof(dtype.items) == 'object') {
                    path = path.slice(1);
                    Lyte.checkNestedProp(id, path, dtype.items, wobj, object, property, value, check, fromStore);
                }
            } else if (dtype.type == "object") {
                if (dtype.properties && dtype.properties.hasOwnProperty(path[0])) {
                    var k = path[0];
                    path = path.slice(1);
                    Lyte.checkNestedProp(id, path, dtype.properties[k], wobj, object, property, value, check, fromStore);
                }
            }
        } else {
            var err;
            if (dtype && (dtype.properties || dtype.items) && !check.hasOwnProperty("warn")) {
                var component = {};component.__data = {};
                if (dtype.properties) {
                    component.__data[property] = dtype.properties[property];
                } else if (dtype.items && wobj.index) {
                    component.__data[wobj.index] = dtype;
                } else {
                    component.__data[property] = dtype.items;
                }
                var cp = Lyte.validate(object, property, value, component);
                var errKey = wobj.attr ? wobj.attr : wobj.key,
                    _path = wobj.path.split(".");
                var PathWay = wobj.index == undefined && property ? wobj.path + (wobj.path != "" ? "." : "") + property : wobj.index != undefined ? wobj.path + (wobj.path != "" ? "." : "") + wobj.index : wobj.path;
                if (cp && (typeof cp === 'undefined' ? 'undefined' : typeof cp === 'undefined' ? 'undefined' : _typeof(cp)) == "object" && cp.code) {
                    cp.value = value;
                    cp.path = wobj.path != "" ? wobj.path : property;
                    if (wobj.isRec && fromStore && wobj.key == undefined && wobj.path != "") {
                        errKey = wobj.path.split(".")[0];
                        _path.shift();
                        _path = _path.length == 1 && _path[0] == property ? [] : _path;
                    }
                    // wobj.Error ? true : wobj.Error = {}
                    wobj.Error && wobj.Error[errKey] ? wobj.Error[errKey].code && wobj.Error[errKey].nested ? wobj.Error[errKey].nested : wobj.Error[errKey].nested = {} : wobj.Error[errKey] = { nested: {} };
                    wobj.Error[errKey].code = "ERR34";
                    wobj.Error[errKey].message = Lyte.errorCodes.ERR34;
                    err = wobj.Error[errKey].nested;
                    wobj._cmpErr[errKey] ? true : wobj._cmpErr[errKey] = {};
                    wobj._cmpErr[errKey].code = "ERR34";
                    wobj._cmpErr[errKey].message = Lyte.errorCodes.ERR34;
                    var cmpErrPath = wobj._cmpErr[errKey].path ? wobj._cmpErr[errKey].path : [];
                    if (wobj.path != "") {
                        _path.forEach(function (k) {
                            if (err && !err[k]) {
                                err = err[k] = {};
                            } else {
                                err = err[k];
                            }
                        });
                    }
                    wobj.index != undefined ? err[wobj.index] = cp : err[property] = cp;
                    if (!cmpErrPath.includes(PathWay)) {
                        cmpErrPath.push(PathWay);
                    }
                    wobj._cmpErr[errKey].path = cmpErrPath;
                } else {
                    if (wobj.isRec && fromStore && wobj.key == undefined) {
                        errKey = wobj.path.split(".")[0];
                        _path.shift();
                        _path = _path.length == 1 && _path[0] == property ? [property] : _path;
                    }
                    err = wobj.Error[errKey] && wobj.Error[errKey].nested ? wobj.Error[errKey].nested : undefined;
                    var cmpErr = wobj._cmpErr[errKey] || undefined;
                    if (cmpErr && cmpErr.path && cmpErr.path.includes(PathWay)) {
                        var ind = cmpErr.path.indexOf(PathWay);
                        cmpErr.path.splice(ind, 1);
                    }
                    //var p = object.$.error[property];
                    if (err) {
                        var key = wobj.index || property;
                        var flag = true,
                            p = PathWay.split(".");
                        p.forEach(function (r) {
                            if (err[r] && err[r].code) {
                                delete err[r];
                                if (err && Object.keys(err).length == 0) {
                                    flag = true;
                                } else {
                                    flag = false;
                                }
                            } else {
                                err = err[r];
                            }
                        });
                        if (flag == true && wobj.Error[errKey] && wobj._cmpErr[errKey]) {
                            delete wobj.Error[errKey];
                            delete wobj._cmpErr[errKey];
                        }
                    }
                }
                if (check.value && check.value.hasOwnProperty("code") && cp.code || !check.value) {
                    check.value = cp;
                }
            }
        }
        wobj.index && delete wobj.index;
    };

    Lyte.types = ["string", "object", "number", "boolean", "array"];

    Lyte.attr = function (type, opts) {
        var obj = {};
        obj.type = type;
        if (opts == undefined) {
            opts = {};
        }
        if (Lyte.types.indexOf(type) == -1 && !Lyte.Transform.hasOwnProperty(type)) {
            throw new Error("Not a valid field type - " + type);
        }
        Object.assign(obj, opts);
        return obj;
    };

    window.prop = Lyte.attr;
    Lyte.defineRelation = function (name, type, opts) {
        var relation = { type: "relation", relType: type, relatedTo: name };
        if (opts) {
            relation.opts = opts;
        }
        return relation;
    };

    Lyte.belongsTo = function (name, opts) {
        return this.defineRelation(name, "belongsTo", opts);
    };

    Lyte.hasMany = function (name, opts) {
        return this.defineRelation(name, "hasMany", opts);
    };

    Lyte.Transform = {};

    Lyte.customValidator = {};

    Lyte.registerDataType = function (fieldTypeName, properties) {
        var exts = "extends";
        if (this.Transform.hasOwnProperty(fieldTypeName)) {
            Lyte.warn("Custom Field Type - " + fieldTypeName + " -  already exists.");
            return;
        }
        if (properties[exts] == undefined || Lyte.types.indexOf(properties[exts]) == -1) {
            Lyte.error("Not a valid field type - " + properties[exts]);
            return;
        }
        this.Transform[fieldTypeName] = properties;
    };

    Lyte.registerValidator = function (customValidatorName, func) {
        if (this.customValidator.hasOwnProperty(customValidatorName)) {
            Lyte.warn("Custom Validator with name - " + customValidatorName + " - already exists");
            return;
        }
        this.customValidator[customValidatorName] = func;
    };

    Lyte.patterns = {
        email: /^([A-Za-z0-9._%\-'+/]+@[A-Za-z0-9.-]+\.[a-zA-Z]{2,22})$/,
        url: /(^(ht|f)tp(s?):\/\/[0-9a-zA-Z][-.\w]*(:[0-9])*(\/?)([a-zA-Z0-9\-.?,:'/\\+=&amp;%$#_[\]@!()*;~]*)?$)/,
        ampm: /^(AM|PM|am|pm)$/,
        hour: /^(0?[0-9]|1[0-9]|2[0-4])$/,
        minute: /^(0?[0-9]|[1-5][0-9]|60)$/,
        boolean: /^(true|false|TRUE|FALSE)$/,
        alphaNumeric: /([a-zA-Z0-9])+/,
        alphabetsOnly: /([a-zA-Z])+/,
        numeric: /([0-9])+/,
        phoneNo: /^[0-9a-zA-Z+.()\-;\s]+$/
    };

    Lyte.validate = function (object, key, value, component, init) {
        var definition = component.__data[key];
        var isError = false;
        var type = definition ? definition.type : undefined;
        var _def = definition;
        if (_def) {
            if (!(_def.any && Array.isArray(_def))) {
                _def = [_def];
            }
            var defLen = _def.length,
                _ret = true;
            for (var i = 0; i < defLen; i++) {
                var _d = _def[i];
                for (var defKey in _d) {
                    isError = Lyte.checkProperty(defKey, value, key, _d[defKey], _d, object, type, undefined, init);
                    if (isError !== true) {
                        if (_ret === true) {
                            _ret = isError;
                        }
                    }
                }
            }
            if (_ret !== true) {
                return _ret;
            }
        }
        return false;
    };

    Lyte.registerPattern = function (patternName, pattern) {
        this.patterns[patternName] = pattern;
    };

    Lyte.errorCodes = {
        ERR01: "Primary key cannot be modified", ERR02: "Mandatory field cannot be empty", ERR03: "Type of value does not match the specified data type", ERR04: "Value is greater than the maximum value allowed",
        ERR05: "Value is less than the minimum value allowed", ERR06: "Length of string/array is greater than the maximum limit allowed", ERR07: "Length of string/array is less than the minimum limit allowed",
        ERR08: "String does not match the specified pattern", ERR09: "Values in array are not unique", ERR10: "Value is not equal to the specified constant", ERR11: "Model of related field is not defined",
        ERR12: "Model of backward relation is not defined", ERR13: "Record not found", ERR14: "Model does not match the related field model", ERR15: "Error in creating a record as a relation",
        ERR16: "Record with primary key already exists", ERR17: "Value cannot be changed because record has been deleted", ERR18: "Action not defined", ERR19: "Model not defined",
        ERR20: "Key not specified", ERR21: "'belongsTo' relationship expects a single object/id", ERR22: "Type not specified for polymorphic relation", ERR23: "Primary Key value not present", ERR24: "Error while relating record", ERR25: "Backward relation not present", ERR26: "Primary key value cannot be undefined or null",
        ERR27: "Observer can observe only string data type value, '{0}' value cannot be observed in the function named '{1}' in the component '{2}'",
        ERR28: "Unloaded record cannot be saved",
        ERR29: "Property not defined in the object",
        ERR30: "Error in variables declaration for Query", ERR31: "Query not registered for the Model",
        ERR32: "Property not defined in the object",
        ERR33: "Property's value is not an instanceof the mentioned class",
        ERR34: "Type definition for nested properties / items does not match with the value",
        ERR35: "A datatype mismatch has occurred for custom DataType '{0}'"
    };

    Lyte.registeredGlobalEvents = Lyte.__lyteRegisteredEvents = {};
    Lyte.__lyteRegisteredEventsGlobal = {};
    Lyte.triggerEvent = function (obj) {
        var args;
        var actArgs;
        var eventObjectPath;
        if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) == "object" && obj.global) {
            actArgs = obj.args;
            args = Array.prototype.slice.call(actArgs, 1);
            eventName = actArgs[0];
            eventObjectPath = "__lyteRegisteredEventsGlobal";
        } else {
            args = Array.prototype.slice.call(arguments, 1);
            eventName = arguments[0];
            eventObjectPath = "__lyteRegisteredEvents";
        }
        var stopEvent = false;
        var s = this[eventObjectPath][eventName];
        if (!s) {
            s = this[eventObjectPath][eventName] = { "listeners": [] };
        } else {
            for (var i = 0; i < s.listeners.length; i++) {
                var func = s.listeners[i];
                if (func) {
                    var ret = func.apply(this, args);
                    if (ret === false) {
                        stopEvent = true;
                        break;
                    }
                }
            }
        }
        var customEvent = new CustomEvent(eventName, { "detail": args });
        if (!stopEvent) {
            document.dispatchEvent(customEvent);
        }
    };
    Lyte.triggerGlobalEvent = function () {
        return Lyte.triggerEvent({ "global": true, "args": Array.from(arguments) });
    };

    Lyte.addEventListener = function (eventName, func, options) {
        if (typeof func !== "function") {
            Lyte.error("Second parameter to Lyte.Component.addGlobalEventListener() must be a function");
            return;
        }
        var eventObjectPath = options && options.global ? "__lyteRegisteredEventsGlobal" : "__lyteRegisteredEvents";
        var s = this[eventObjectPath][eventName];
        if (!s) {
            s = this[eventObjectPath][eventName] = { "listeners": [] };
        }
        var d = s.listeners.push(func);
        return eventName + "-" + (d - 1);
    };

    Lyte.removeEventListener = function (id, options) {
        var lastIndex = void 0;
        if (!id || (lastIndex = id.lastIndexOf("-")) == -1) {
            Lyte.error("listener unique id not specified / invalid");
            return;
        }
        var globalId = id.split("-");
        if (options) {
            var globalId = id.split("-");
            var eventObjectPath = options && options.global ? "__lyteRegisteredEventsGlobal" : "__lyteRegisteredEvents";
            var s = this[eventObjectPath][globalId[0]];
            if (!s || !s.listeners[globalId[1]]) {
                Lyte.error("No such listener registered");
                return;
            }
            s.listeners[globalId[1]] = null;
        } else {
            var eventName = id.substring(0, lastIndex);
            var eventId = id.substring(lastIndex + 1);
            var s = this.__lyteRegisteredEvents[eventName];
            if (!s || !s.listeners[eventId]) {
                Lyte.error("No such listener registered");
                return;
            }
            s.listeners[eventId] = null;
        }
    };

    Lyte.extendEventListeners = function (scp) {
        if (scp && (typeof scp === 'undefined' ? 'undefined' : _typeof(scp)) == "object" && !scp.hasOwnProperty("__lyteRegisteredEvents")) {
            Object.defineProperties(scp, {
                __lyteRegisteredEvents: {
                    value: {}
                },
                addEventListener: {
                    value: Lyte.addEventListener
                },
                removeEventListener: {
                    value: Lyte.removeEventListener
                },
                triggerEvent: {
                    value: Lyte.triggerEvent
                }
            });
        }
    };

    Lyte.deepCopyObject = function (obj) {
        var targetVal = Array.isArray(obj) ? [] : Object.create(Object.getPrototypeOf(obj));
        var current,
            copies = [{ source: obj, target: targetVal }],
            keys,
            propertyIndex,
            descriptor,
            nextSource,
            indexOf,
            sourceReferences = [obj];
        var cloneObject = copies[0].target,
            targetReferences = [cloneObject];
        while (current = copies.shift()) {
            keys = Object.keys(current.source);
            for (propertyIndex = 0; propertyIndex < keys.length; propertyIndex++) {
                descriptor = Object.getOwnPropertyDescriptor(current.source, keys[propertyIndex]);
                if (!descriptor) {
                    continue;
                }
                if (!descriptor.value || _typeof(descriptor.value) != "object") {
                    Object.defineProperty(current.target, keys[propertyIndex], descriptor);
                    continue;
                }
                nextSource = descriptor.value;
                descriptor.value = Array.isArray(nextSource) ? [] : nextSource instanceof Set ? new Set() : Object.create(Object.getPrototypeOf(nextSource));
                indexOf = sourceReferences.indexOf(nextSource);
                if (indexOf != -1) {
                    descriptor.value = targetReferences[indexOf];
                    Object.defineProperty(current.target, keys[propertyIndex], descriptor);
                    continue;
                }
                sourceReferences.push(nextSource);
                targetReferences.push(descriptor.value);
                Object.defineProperty(current.target, keys[propertyIndex], descriptor);
                copies.push({ source: nextSource, target: descriptor.value });
            }
            if (Lyte.isRecord(current.source)) {
                Object.defineProperty(current.target, "$", {
                    value: {}
                });
                current.target.$.isNew = current.source.$.isNew;
                current.target.$.isModified = current.source.$.isModified;
                current.target.$.isDeleted = current.source.$.isDeleted;
                current.target.$.pK = current.source.$.pK;
                current.target.$._attributes = current.source.$._attributes;
                current.target.$.isCloned = true;
                current.target.$.model = { _name: current.source.$.model._name };
                if (current.source.$.hasOwnProperty("deepNest")) {
                    current.target.$.deepNest = current.source.$.deepNest;
                }
                if (current.source.$.hasOwnProperty("partialType")) {
                    current.target.$.partialType = current.source.$.partialType;
                }
            }
            if (Array.isArray(current.source)) {
                if (current.source.partial) {
                    Object.defineProperty(current.target, "partial", {
                        value: current.source.partial
                    });
                }
            }
        }
        return cloneObject;
    };

    Lyte.nestScpId = 1;
    Lyte.nestScp = {};
    Lyte.__nestRef__ = {};
    // Lyte.__nestScp__ = {};
    Lyte.__nestScp__ = new Map();
    // Lyte.__nestScp1__ = new Map();
    Lyte.establishObjectBinding = function (data, attr, fromStore, update, storeRecord, watch) {
        var model, fld, nestObj;
        var checkAttrs = data.__component__ && data.__component__.component.__data ? data.__component__.component.__data[attr] : undefined;
        if (fromStore) {
            if (data && !data.$ && data._scp) {
                var keys = Array.from(data._scp.keys());
                keys.forEach(function (id) {
                    var recObj = Lyte.nestScp[id];
                    model = store.modelFor(recObj.model);
                });
            } else {
                model = data.$.model;
            }
            fld = model && model.fieldList && model.fieldList.hasOwnProperty(attr) ? model.fieldList[attr] : {};
            var _checkDtype = false;
            if (fld) {
                var _dtype = Lyte.Transform[fld.type];
                if (_dtype && (_dtype.hasOwnProperty("properties") || _dtype.hasOwnProperty("items"))) {
                    _checkDtype = true;
                }
            }
            if (fld && fld.type !== "relation" && fld.watch || _checkDtype) {
                checkAttrs = fld;
            } else {
                if (data._scp) {
                    var keys = Array.from(data._scp.keys());
                    keys.forEach(function (id) {
                        var _mpObj = data._scp.get(id),
                            mpObj = _mpObj.paths;
                        var _dtype = Lyte.nestScp[id] || undefined;
                        watch = _dtype && _dtype["watch"] ? _dtype["watch"] : watch;
                        for (var key in mpObj) {
                            var path = key ? key.split(".") : [];
                            path.push(attr);
                            Lyte.bindObj(data, attr, id, path, new Map(), undefined, checkAttrs, watch, true);
                        }
                    });
                }
                return;
            }
        }
        if (update && data._scp && data._scp.size) {
            var keys = Array.from(data._scp.keys());
            keys.forEach(function (id) {
                var _mpObj = data._scp.get(id),
                    mpObj = _mpObj.paths;
                var _dtype = Lyte.nestScp[id] || undefined;
                watch = _dtype && _dtype["watch"] ? _dtype["watch"] : watch;
                for (var key in mpObj) {
                    var path = key ? key.split(".") : [];
                    path.push(attr);
                    Lyte.bindObj(data, attr, id, path, new Map(), undefined, checkAttrs, watch, true);
                }
            });
        }
        var customDtype = false;
        if (checkAttrs && Lyte.Transform[checkAttrs.type]) {
            var dtype = Lyte.Transform[checkAttrs.type];
            if (dtype.hasOwnProperty("properties") || dtype.hasOwnProperty("items")) {
                checkAttrs = Lyte.Transform[checkAttrs.type];
                customDtype = true;
            }
        }
        if ((!fromStore || fld.watch || fld.properties || fld.items || watch || customDtype) && data[attr]) {
            var _scpObj, kmpKey;
            if (data && data.__component__) {
                data.__component__.__scpObj || Object.defineProperty(data.__component__, "__scpObj", {
                    value: {}
                });
                kmpKey = data.__component__;
                _scpObj = data.__component__.__scpObj;
            } else if (Lyte.isRecord(data)) {
                data.$.__scpObj || Object.defineProperty(data.$, "__scpObj", {
                    value: {}
                });
                kmpKey = data;
                _scpObj = data.$.__scpObj;
            }
            var obj = _scpObj,
                id;
            if (_scpObj) {
                var __nestScp1Set__ = false,
                    __nestScp2Set__ = false;
                if (fromStore) {
                    if (data[attr] && !Lyte.__nestScp__.has(data[attr])) {
                        nestObj = { model: model._name, attr: attr, pK: data.$.pK, Error: {} };
                        __nestScp1Set__ = true;
                    } else {
                        // var kmp = Lyte.__nestScp__[kid] = Lyte.__nestScp__[kid] || new Map();
                        // data ? kmp.set(data, true) : undefined;
                        var __nId = Lyte.__nestScp__.get(data[attr]);
                        var refMp = Lyte.__nestRef__[__nId] = Lyte.__nestRef__[__nId] || new Map();
                        var refMpId = Lyte.$.genMapId(refMp);
                        refMp.set(refMpId, true);
                        Lyte.setRecBindMap(Lyte.nestScp[__nId], { model: model._name, attr: attr, pK: data.$.pK, Error: {} });
                        obj[attr] = __nId + "_" + refMpId;
                    }
                } else {
                    if (data[attr] && !Lyte.__nestScp__.has(data[attr])) {
                        var ErrMap = [],
                            cmpDataKeys = {};
                        cmpDataKeys.key = attr;
                        cmpDataKeys.dtype = data.__component__.component.__data[attr];
                        cmpDataKeys._cmpErr = data.errors;
                        cmpDataKeys.Error = {};
                        ErrMap.push(cmpDataKeys);
                        nestObj = { data: data[attr], PropsInfo: ErrMap };
                        if (cmpDataKeys.dtype.watch) {
                            nestObj.watch = true;
                        }
                        __nestScp2Set__ = true;
                    } else {
                        var __nId = Lyte.__nestScp__.get(data[attr]);
                        var scope = Lyte.nestScp[__nId];
                        if (scope) {
                            if (!scope.PropsInfo) {
                                scope.PropsInfo = [];
                            }
                            var errMp = scope.PropsInfo;
                            var cmpDataKeys = {};
                            cmpDataKeys.key = attr;
                            cmpDataKeys.Error = {};
                            cmpDataKeys._cmpErr = data.errors;
                            cmpDataKeys.dtype = data.__component__.component.__data[attr];
                            if (cmpDataKeys.dtype.watch) {
                                scope.watch = true;
                            }
                            errMp.push(cmpDataKeys);
                        }
                        var refMp = Lyte.__nestRef__[__nId] = Lyte.__nestRef__[__nId] || new Map();
                        var refMpId = Lyte.$.genMapId(refMp);
                        refMp.set(refMpId, true);
                        obj[attr] = __nId + "_" + refMpId;
                    }
                }
                if (nestObj) {
                    var nestScpId = Lyte.nestScpId++;
                    var refMp = Lyte.__nestRef__[nestScpId] = Lyte.__nestRef__[nestScpId] || new Map();
                    var refMpId = Lyte.$.genMapId(refMp);
                    refMp.set(refMpId, true);
                    // var kmp = Lyte.__nestScp__[nestScpId] = Lyte.__nestScp__[nestScpId] || new Map();
                    // kmp.set(kmpKey, true);
                    Lyte.__nestScp__.set(data[attr], nestScpId);
                    if (__nestScp1Set__) {
                        Lyte.nestScp[nestScpId] = {};
                        Lyte.setRecBindMap(Lyte.nestScp[nestScpId], nestObj);
                        Lyte.nestScp[nestScpId].Error = nestObj.Error;
                        //     Lyte.setRecBindMap(model._name, attr, data.$.pK, nestScpId); 
                    }
                    if (__nestScp2Set__) {
                        Lyte.nestScp[nestScpId] = nestObj;
                        //     Lyte.__nestScp2__.set(data[attr], nestScpId);
                    }
                    Lyte.nestScp[nestScpId]._data = data[attr];
                    obj[attr] = obj[attr] || nestScpId + "_" + refMpId;
                    var path = [];
                    // fromStore ? path.push(attr) : undefined;
                    Lyte.bindObj(data, attr, nestScpId, path, new Map(), undefined, checkAttrs, watch);
                }
            }
        }
    };

    Lyte.removeNestScp2Bind = function (mp, mdlObj) {
        var mp = mp.model;
        if (mp.has(mdlObj.model)) {
            var mp1 = mp.get(mdlObj.model);
            if (mp1.has(mdlObj.pK)) {
                var mp2 = mp1.get(mdlObj.pK);
                if (mp2.has(mdlObj.attr)) {
                    mp2.delete(mdlObj.attr);
                }
                !mp2.size ? mp1.delete(mdlObj.pK) : undefined;
            }
            !mp1.size ? mp.delete(mdlObj.model) : undefined;
        }
    };

    Lyte.setRecBindMap = function (obj, nestObj) {
        var mp = obj.model = obj.model || new Map(),
            modelName = nestObj.model,
            pK = nestObj.pK,
            attr = nestObj.attr;
        if (modelName && !mp.has(modelName)) {
            mp.set(modelName, new Map());
        }
        mp = mp.get(modelName);
        if (pK && !mp.has(pK)) {
            mp.set(pK, new Map());
        }
        mp = mp.get(pK);
        if (attr && !mp.has(attr)) {
            mp.set(attr, true);
        }
    };

    Lyte.bindObj = function (data, key, id, path, mp, check, checkAttrs, watch, ignoreCyclicDelete) {
        mp = mp || new Map();
        var value = key != undefined ? data[key] : data;
        var cyclic = false;
        if (!ignoreCyclicDelete && !path.length && Lyte.__nestScp__.get(data) === id) {
            delete Lyte.nestScp[id].cyclic;
        }
        if (path.length > 1 && value && Lyte.nestScp[id] && Lyte.nestScp[id].hasOwnProperty("data") && Lyte.nestScp[id].data === value) {
            if (mp.get(value)) {
                cyclic = true;
            } else {
                try {
                    JSON.stringify(value);
                } catch (exp) {
                    cyclic = true;
                }
            }
            if (Lyte.checkAndAddBind(value, id, path, cyclic)) {
                Lyte.estObjScp(value, id, path, cyclic);
            }
            return;
        }
        var attrs, nestedSCP;
        if (checkAttrs) {
            if (checkAttrs.hasOwnProperty("items") || checkAttrs.hasOwnProperty("properties")) {
                attrs = checkAttrs.items || checkAttrs.properties;
                nestedSCP = true;
            } else if (watch == undefined && checkAttrs.watch == true) {
                watch = checkAttrs.watch;
            }
        }
        attrs = watch ? undefined : attrs;
        if (Array.isArray(value)) {
            if (!mp.get(value)) {
                mp.set(value, true);
                value.forEach(function (val, idx) {
                    path.push(idx);
                    if (watch || checkAttrs && checkAttrs.hasOwnProperty("items") && _typeof(checkAttrs.items) == "object") {
                        Lyte.bindObj(value, idx, id, path, mp, undefined, attrs, watch);
                    }
                    path.pop();
                });
            } else {
                cyclic = true;
            }
            if (Lyte.checkAndAddBind(value, id, path, cyclic)) {
                var _establish;
                if (Array.isArray(watch)) {
                    _establish = Lyte.checkEstablishingSCP(value, path, watch);
                }
                if (_establish || typeof watch == "boolean" && watch || nestedSCP) {
                    Lyte.estObjScp(value, id, path, cyclic);
                }
            }
        } else if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == "object") {
            var cyclic = false;
            if (!mp.get(value)) {
                mp.set(value, true);
                for (var str in value) {
                    path.push(str);
                    if (watch || attrs && attrs.hasOwnProperty(str)) {
                        Lyte.bindObj(value, str, id, path, mp, undefined, attrs ? attrs[str] : undefined, watch);
                    }
                    path.pop();
                }
            } else {
                cyclic = true;
            }
            if (Lyte.checkAndAddBind(value, id, path, cyclic)) {
                var _establish;
                if (Array.isArray(watch)) {
                    _establish = Lyte.checkEstablishingSCP(value, path, watch);
                }
                if (_establish || typeof watch == "boolean" && watch || nestedSCP) {
                    Lyte.estObjScp(value, id, path, cyclic);
                }
            }
        }
    };

    Lyte.checkAndAddBind = function (value, id, path, cyclic) {
        if (!value._scp || !value._scp.size) {
            return true;
        }
        if (value._scp.size) {
            if (value._scp.has(id)) {
                var _obj = value._scp.get(id);
                var obj = _obj.paths;
                if (obj.hasOwnProperty(path.join("."))) {
                    if (cyclic) {
                        Lyte.nestScp[id].cyclic = true;
                    }
                    return false;
                }
            }
        }
        return true;
    };

    Lyte.estObjScp = function (value, id, path, cyclic) {
        if (!value._scp) {
            Object.defineProperty(value, "_scp", {
                value: new Map(),
                enumerable: false,
                configurable: true
            });
        }
        var mp = value._scp;
        if (!mp.has(id)) {
            mp.set(id, {});
        }
        var obj = mp.get(id),
            path = path ? path.join(".") : path;
        var pathObj = obj.paths = obj.paths || {};
        pathObj[path] = true;
        var nestObj = Lyte.nestScp[id];
        if (!nestObj.cyclic && cyclic == true) {
            nestObj.cyclic = true;
        }
    };

    Lyte.cmpObjs = function (obj1, obj2) {
        if (Object.keys(obj1).length !== Object.keys(obj2).length) {
            return false;
        }
        for (var key in obj1) {
            if (!obj2.hasOwnProperty(key)) {
                return false;
            }
            var ret = Lyte.cmpData(obj1[key], obj2[key]);
            if (ret == false) {
                return false;
            }
        }
        return true;
    };

    Lyte.cmpData = function (data1, data2) {
        if (Array.isArray(data1)) {
            if (!Array.isArray(data2) || data1.length !== data2.length) {
                return false;
            }
            if (data1 === data2) {
                return true;
            }
            var len = data1.length,
                ret;
            for (var i = 0; i < len; i++) {
                ret = Lyte.cmpData(data1[i], data2[i]);
                if (ret == false) {
                    return false;
                }
            }
        } else if (data1 && data2 && (typeof data1 === 'undefined' ? 'undefined' : _typeof(data1)) == "object" && (typeof data2 === 'undefined' ? 'undefined' : _typeof(data2)) == "object") {
            if (data1 === data2) {
                return true;
            }
            return Lyte.cmpObjs(data1, data2);
        }
        // else if(Lyte && Lyte.isRecord(data1) && Lyte.isRecord(data2)){
        //   if( (data1.$.model._name !== data1.$.model._name) || (Lyte.getpKVal(data1) !== Lyte.getpKVal(data2)) ){
        //     return false;
        //   }
        // }
        else if (data1 !== data2) {
                return false;
            }
        return true;
    };

    Lyte.nestScpRmPath = function (obj, path) {
        if (obj && obj.paths) {
            obj = obj.paths;
            for (var key in obj) {
                if (key.startsWith(path + ".")) {
                    delete obj[key];
                }
            }
        }
    };

    Lyte.nestScpRemove = function (data, id, path) {
        var mp = data._scp;
        if (mp && mp.size) {
            if (path) {
                Lyte.nestScpRmPath(mp.get(id), path);
                var _obj = mp.get(id);
                var obj = _obj ? _obj.paths : undefined;
                if (obj && !Object.keys(obj).length) {
                    mp.delete(id);
                }
            } else {
                mp.delete(id);
            }
            if (!mp.size) {
                delete data._scp;
            }
        }
    };

    Lyte.rmNestScp = function (value, id, mp, data, path) {
        if (Array.isArray(value)) {
            if (!mp.get(value)) {
                mp.set(value, true);
                value.forEach(function (val, idx) {
                    Lyte.rmNestScp(val, id, mp, undefined, path);
                });
            }
            Lyte.nestScpRemove(value, id, path);
        } else if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == "object") {
            if (!mp.get(value)) {
                mp.set(value, true);
                for (var str in value) {
                    Lyte.rmNestScp(value[str], id, mp, undefined, path);
                }
            }
            Lyte.nestScpRemove(value, id, path);
        }
    };

    Lyte.removeNestScp = function (value, id, mpId, path, context, mp, data, recObj) {
        mp = mp || new Map();
        id = Number.parseInt(id);
        var obj = Lyte.nestScp[id],
            kmp = Lyte.__nestRef__[id];
        if (recObj && obj.model) {
            Lyte.removeNestScp2Bind(obj, recObj);
        }
        if (context) {
            if (kmp && kmp.has(mpId)) {
                kmp.delete(mpId);
            }
            if (!kmp || kmp && !kmp.size) {
                delete Lyte.__nestRef__[id];
                if (Lyte.__nestScp__.has(value)) {
                    Lyte.__nestScp__.delete(value);
                }
                Lyte.rmNestScp(value, id, mp, true, path);
                if (!data) {
                    delete Lyte.nestScp[id];
                }
            }
        } else {
            Lyte.rmNestScp(value, id, mp, true, path);
        }
    };

    Lyte.resolvePromises = function (promises) {
        if (typeof promises == "string" || promises instanceof Promise) {
            return promises;
        } else {
            if (Array.isArray(promises)) {
                return promiseArray(promises);
            } else if ((typeof promises === 'undefined' ? 'undefined' : _typeof(promises)) == "object") {
                return promiseHash(promises);
            }
        }

        function promiseHash(promiseObj) {
            var actPromKeys = [],
                promises = [],
                promiseKeys = Object.keys(promiseObj);
            promiseKeys.forEach(function (key) {
                var value = promiseObj[key];
                if (value instanceof Promise || value && !Array.isArray(value) && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == "object" && typeof value.then == "function") {
                    actPromKeys.push(key);
                    promises.push(value);
                }
            });
            if (!promises.length) {
                return Promise.resolve(promiseObj);
            } else {
                var obj = {},
                    promise = new Promise(function (resolve, reject) {
                    Promise.all(promises).then(function (data) {
                        promiseKeys.forEach(function (promiseKey) {
                            if (actPromKeys.indexOf(promiseKey) != -1) {
                                obj[promiseKey] = data[actPromKeys.indexOf(promiseKey)];
                            } else {
                                obj[promiseKey] = promiseObj[promiseKey];
                            }
                        });
                        resolve(obj);
                    }, function (err) {
                        reject(err);
                        Lyte.error('Error on resolve promises', err);
                    });
                });
                return promise;
            }
        }

        function promiseArray(promiseArray) {
            var array = [],
                hasPromise = false;
            promiseArray.every(function (item, i) {
                if (item instanceof Promise || item && !Array.isArray(item) && (typeof item === 'undefined' ? 'undefined' : _typeof(item)) == "object" && typeof item.then == "function") {
                    hasPromise = true;
                    return false;
                }
                return true;
            });
            if (!hasPromise) {
                return Promise.resolve(promiseArray);
            }
            var promise = new Promise(function (resolve, reject) {
                Promise.all(promiseArray).then(function (data) {
                    promiseArray.forEach(function (key, index) {
                        array[index] = data[index];
                    });
                    resolve(array);
                }, function (err) {
                    reject(err);
                    Lyte.error('Error on resolve promises', err);
                });
            });
            return promise;
        }
    };
    function domContentLoaded1() {
        Lyte.assetsDivContainer.appendChild(Lyte.$.assetsDiv);
    }

    if (document.readyState === "complete" || document.readyState === "interactive") {
        domContentLoaded1();
    } else {
        document.addEventListener("DOMContentLoaded", function (e) {
            domContentLoaded1();
        }, true);
    };

    var XHRSend = XMLHttpRequest.prototype.send;
    XMLHttpRequest.prototype.send = function () {
        var event = window.event;
        var type,
            target = event ? event.target : undefined;
        if (Lyte.getConfig("stateHandling")) {
            if (event) {
                type = event.type;
                /^(click|dblclick)$/.test(type) && target && target.getAttribute && target.getAttribute("lyte-state-handling") != "false" ? addStateToMap(type, target, this) : undefined;
            } else {
                var router = Lyte && Lyte.Router ? Lyte.Router.getRouteInstance() : undefined;
                if (router) {
                    var currentAction = router.transition ? router.transition.ev : undefined;
                    if (currentAction && currentAction.target && currentAction.target.getAttribute && currentAction.target.getAttribute("lyte-state-handling") != "false") {
                        var mp = Lyte.__transXHRMap = Lyte.__transXHRMap || new Map();
                        mp.set(router.transition, { currentAction: currentAction, XHR: this });
                        addStateToMap(currentAction.type, currentAction.target, this);
                    }
                }
            }
        }
        XHRSend.apply(this, arguments);
    };

    Lyte.addEventListener("transitionStart", function (obj) {
        var trans = obj.nextTrans;
        if (trans && obj.prevTrans) {
            if (window.event && /^(click|dblclick)$/.test(window.event.type)) {
                trans.ev = window.event;
                if (obj.prevTrans.ev) {
                    delete obj.prevTrans.ev;
                }
            } else if ((obj.prevTrans.state == 409 || obj.prevTrans.state == 308) && obj.prevTrans.ev) {
                trans.ev = obj.prevTrans.ev;
                delete obj.prevTrans.ev;
            }
        }
    });

    Lyte.addEventListener("afterRouteTransition", function (obj) {
        if (obj && obj.trans) {
            var mp = Lyte.__transXHRMap,
                removeEv = false;
            if (obj.trans.state == 409 || obj.trans.state == 308) {
                var ev1 = window.event,
                    ev2 = obj.trans.ev;
                if (!ev1 || ev1 && ev2 && ev1 != ev2 && ev1.target == ev2.target && ev1.type == ev2.type) {
                    obj.trans.nested = true;
                } else {
                    removeEv = true;
                }
                if (mp) {
                    var mpObj = mp.get(obj.trans);
                    if (mpObj) {
                        removeStateFromMap(mpObj.XHR, mpObj.currentAction.type, mpObj.currentAction.target);
                        mp.delete(obj.trans);
                    }
                }
            } else if (obj.trans.state == 200) {
                mp ? mp.delete(obj.trans) : undefined;
                removeEv = true;
            }
            if (removeEv) {
                obj.trans.ev ? delete obj.trans.ev : undefined;
            }
        }
    });

    Lyte.addEventListener("beforeRouteTransition", function (obj) {
        if (obj && obj.prevTrans && obj.prevTrans.nested) {
            obj.trans.ev = obj.prevTrans.ev;
            delete obj.prevTrans.ev;
            obj.trans.fromPrevTrans = true; // temp check
        }
    });

    function addStateToMap(event, target, XHR, stateName) {
        var mp = Lyte.__nodeXHRMap = Lyte.__nodeXHRMap || new Map();
        var nodeMap = mp.get(target);
        if (!nodeMap) {
            mp.set(target, new Map());
        }
        nodeMap = mp.get(target);
        var sr = target.lyteState = target.lyteState || [],
            type = stateName || XHR;
        if (sr.indexOf(type) == -1) {
            sr.push(type);
        }
        target.setAttribute("lyte-state", "");
        var evMap = nodeMap.get(event);
        if (!evMap) {
            nodeMap.set(event, []);
            evMap = nodeMap.get(event);
        }
        if (stateName) {
            evMap.push({ state: stateName });
            return { target: target, event: event };
        } else {
            evMap.push({ isXHR: true, xhr: XHR });
            var callback = function callback(arg) {
                if (XHR.readyState == 4) {
                    removeStateFromMap(XHR, event, target);
                    XHR.removeEventListener("readystatechange", callback);
                }
            };
            XHR.addEventListener("readystatechange", callback);
        }
    }
    function removeStateFromMap(type, event, target) {
        var mp = Lyte.__nodeXHRMap;
        var nodeMap = mp.get(target);
        if (!nodeMap) {
            return;
        }
        var evMap = nodeMap.get(event);
        if (!evMap) {
            return;
        }
        if (evMap) {
            var arr = evMap;
            var ind = -1;
            arr.every(function (itm, idx) {
                if (itm && itm.isXHR && itm.xhr == type || typeof type == "string" && itm.state == type) {
                    ind = idx;
                    return false;
                }
                return true;
            });
            if (ind != -1) {
                arr.splice(ind, 1);
                var sind = target.lyteState.indexOf(type);
                target.lyteState.splice(sind, 1);
                if (!arr.length) {
                    nodeMap.delete(event);
                    var tyInd = target && Array.isArray(target.lyteState) ? target.lyteState.indexOf(type) : -1;
                    tyInd != -1 ? target.lyteState.splice(tyInd, 1) : undefined;
                    if (target && target.lyteState && target.lyteState.length == 0) {
                        target.lyteState = null;
                        target.removeAttribute("lyte-state");
                    }
                }
                if (!nodeMap.size) {
                    mp.delete(target);
                }
            }
        }
    }

    Lyte.setState = function (str) {
        if (!str) {
            console.error("Please provide a state name");
        }
        var evnt = window.event;
        if (/^(click|dblclick)$/.test(evnt.type)) {
            var target = evnt.target;
            if (Lyte.getConfig("stateHandling") == true && target && target.getAttribute && target.getAttribute("lyte-state-handling") != "false") {
                var state = target.getAttribute("lyte-state");
                if (!state) {
                    var mp = Lyte.__stateMap = Lyte.__stateMap || new Map();
                    var mpobj = mp.get(str);
                    if (!mpobj) {
                        var obj = addStateToMap(evnt.type, target, undefined, str);
                        mp.set(str, obj);
                    } else {
                        console.error("There is already a open state by the name", str);
                    }
                }
            }
        }
    };

    Lyte.removeState = function (str) {
        if (!str) {
            console.error("Please provide a state name");
        }
        var mp = Lyte.__stateMap;
        if (mp) {
            var obj = mp.get(str);
            if (obj) {
                mp.delete(str);
                removeStateFromMap(str, obj.event, obj.target);
            }
        }
    };
    Lyte.setConfig = function (key, value, cons) {
        if (key == "mutable") {
            if (value == true) {
                Lyte.__gl = Lyte.mut(Lyte.__gl__);
            } else if (value == false) {
                Lyte.__gl = Lyte.__gl__;
            }
        }
        var configObj = Lyte.__config = Lyte.__config || {};
        if (cons) {
            Object.defineProperty(configObj, key, {
                value: value
            });
        } else {
            configObj[key] = value;
        }
    };
    /*disable async function*/
    Lyte.getConfig = function (key) {
        var configObj = Lyte.__config;
        if (configObj) {
            return configObj[key];
        }
    };
    Lyte.establishWatchScope = function (watchProps, model) {
        var scope = this,
            object;
        for (var v in watchProps) {
            var property = v;
            var watch = watchProps[v];
            if (scope.component && scope.component.__data && scope.component.__data[property]) {
                object = scope.getData(property);
                watch = scope.component.__data[property].watch ? true : watch;
                if ((typeof object === 'undefined' ? 'undefined' : _typeof(object)) == "object") {
                    Lyte.establishObjectBinding(scope.component.data, v, false, undefined, undefined, watch);
                }
                var dataDef = scope.component.__data;
                if (Lyte.nestScp[Lyte.__nestScp__.get(object)]) {
                    // nestScp[__nestScp__.get(object)].dtype.watch = watch;
                    dataDef[v].watch = watch;
                }
            } else {
                if (model) {
                    var fieldList = model.fieldList;
                    if (fieldList[v] && fieldList[v].watch == undefined) {
                        fieldList[v].watch = watch;
                        model._fldGrps.watch[v] = fieldList[v];
                    }
                }
            }
        }
    };

    Lyte.checkEstablishingSCP = function (value, path, watch) {
        if (Array.isArray(watch)) {
            var _path = '';
            _path = path.join(".");
            if (Lyte.checkWatchPath(_path, watch, true) && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) != "object") {
                return true;
            }
            var _key = Object.keys(value);
            for (var i_scp = 0; i_scp < _key.length; i_scp++) {
                var spiePath = _key[i_scp];
                var finalaUth = _path == "" ? spiePath : _path + "." + spiePath;
                if (Lyte.checkWatchPath(finalaUth, watch, true)) {
                    return true;
                }
            }
        }
    };
    Lyte.checkWatchPath = function (actualPath, watchArr, establishBind) {
        if (typeof watchArr == "boolean" && watchArr === true) {
            return true;
        } else if (Array.isArray(watchArr)) {
            for (var i_watch = 0; i_watch < watchArr.length; i_watch++) {
                var path = watchArr[i_watch];
                path = path.replace(/ /g, "");
                path = path.replace(/\$\.\./g, "..");
                path = path.replace(/\$\./g, "");
                var weirdPath = path.search(/\.\./g) != -1 || path.search(/\[|\\]|\{|\}/g) != -1 ? true : false || path.includes("*");
                if (actualPath == path) {
                    return true;
                } else if (weirdPath) {
                    if (establishBind) {
                        if (path.search(/\.\./) != -1) {
                            path = path.replace(/\.\.\S+/g, "..*");
                            if (path == "..*") {
                                return true;
                            }
                        }
                    }
                    path = path.search(/\[/) == 0 ? path.replace("[", "") : path;
                    path = path.search(/\.\.\[/) == 0 ? path.replace("..[", "..") : path;
                    path = path.replace(/\.*\[/g, ".");
                    path = path.replace(/\]/g, "");
                    var _watchPath = Lyte.checkWeirdPath(path, actualPath);
                    if (_watchPath) {
                        return true;
                    }
                }
            }
        }
    };
    Lyte.checkWeirdPath = function (watchPath, actualPath) {
        if (actualPath == watchPath) {
            return true;
        } else if (watchPath.includes("..") || watchPath.includes("*")) {
            var cmpPath = watchPath;
            cmpPath = cmpPath.replace(/\*/g, "$$");
            cmpPath = cmpPath.replace(/\.\./g, "::");
            // cmpPath = cmpPath.replace("[","\\[")
            cmpPath = cmpPath.replace(/\./g, "\\.");
            cmpPath = cmpPath.replace(/\:\:/g, "\\.?.*\\.?");
            cmpPath = cmpPath.replace(/\$/g, ".*");
            var _wildCard = watchPath.split(".");
            var _wClenght = _wildCard.length;
            if (_wildCard[_wClenght - 2] == "" && _wildCard[_wClenght - 1] != "*") {
                cmpPath = cmpPath + "$";
            }
            var regularExp = new RegExp(cmpPath);
            if (regularExp.test(actualPath)) {
                return true;
            }
            return false;
        }
    };

    var ignoreMut = false;
    Lyte.ignoreMut = function (method) {
        ignoreMut = true;
        method();
        ignoreMut = false;
    };

    /*disable async function*/
    var wkMap = new WeakMap();
    /*disable async function*/
    Lyte.mut = function mut(data) {
        if (data && data.__ltPrx__) {
            return data;
        }
        if (data && wkMap.has(data)) {
            return wkMap.get(data);
        }
        if (!data || data && data.constructor.name !== "Object" && data.constructor.name !== "Record" && !Array.isArray(data) && !data.__ltPrx__) {
            return data;
        }
        var prxVal = new Proxy(data, {
            set: function set(target, prop, value) {
                if (!Array.isArray(target)) {
                    Lyte.Component.set(target, prop, value);
                } else {
                    target[prop] = value;
                }
                return true;
            },
            get: function get(target, prop) {
                if (prop === "__ltPrx__") {
                    return true;
                }
                if (prop === "__target__") {
                    return target;
                }
                var value = target[prop];
                if (value && value.__ltPrx__) {
                    return value;
                }
                if (value && wkMap.has(value)) {
                    return wkMap.get(value);
                }
                var descriptor = Object.getOwnPropertyDescriptor(target, prop);
                if (value && (value.constructor.name === "Object" || Array.isArray(value) || value && value.$ && value.$.hasOwnProperty("isModified")) && !value.__ltPrx__ && descriptor && descriptor.configurable) {
                    // path = path || [];
                    // path.push(prop);
                    // if(Array.isArray(value) && value.model && value.key){
                    //     var hmPrx = value.record.$.__hmPrx = value.record.$.__hmPrx || {};
                    //     var retVal;
                    //     if(!hmPrx[value.key]){
                    //         retVal = hmPrx[value.key] = Lyte.mut(value)
                    //     }
                    //     else{
                    //         retVal = hmPrx[value.key]
                    //     }
                    //     return retVal;
                    // }
                    var _prxVal = Lyte.mut(value);
                    wkMap.set(value, _prxVal);
                    // Object.defineProperty(value, "__mcln__", { value: prxVal});
                    return _prxVal;
                }
                return value;
            }
        });
        wkMap.set(data, prxVal);
        // Object.defineProperty(data, "__mcln__", { value: prxVal});
        return prxVal;
    };
    /*disable async function*/
    Lyte.immut = function immut(data, mp) {
        var mp = mp || new WeakMap(),
            nData;
        if (data && Array.isArray(data)) {
            nData = Array.from(data);
        } else if (data && (typeof data === 'undefined' ? 'undefined' : _typeof(data)) == "object") {
            nData = Object.assign({}, data);
        }
        mp.get(data, nData);
        return new Proxy(data, {
            get: function get(data, prop) {
                var _obj = mp.get(data),
                    val;
                val = _obj[prop];
                if (val && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) == "object" && !mp.has(val)) {
                    return Lyte.immut(val, mp);
                }
                return val;
            },
            set: function set(data, prop, value) {
                var _obj = mp.get(obj);
                // _obj[prop] = value;

                Lyte.Component.set(_obj, prop, value);
                return true;
            }
        });
    };
    // Lyte.mut = function mut(data){
    //     if(data && data.__ltPrx__){
    //         return data;
    //     }
    //     if(data && data.__mcln__){
    //         return data.__mcln__;
    //     }
    //     if(!data || (data && !data.constructor.name === "Object" && !Array.isArray(data)) && !value.__ltPrx__){
    //         return data;
    //     }
    //     // parent = parent || data;
    //     let prxVal =  new Proxy(data, {
    //         set:function(target, prop, value){
    //             if(!Array.isArray(target)){
    //                 Lyte.Component.set(target, prop, value);
    //             }else{
    //                 target[prop] = value;
    //             }
    //             return true;
    //         },
    //         get: function(target, prop){
    //             if(prop === "__mcln__"){
    //                 debugger
    //                 return target[prop];
    //             }
    //             if(prop === "__ltPrx__"){
    //                 return true;
    //             }
    //             if(prop === "__target__"){
    //                 return target;
    //             }
    //             var value = target[prop];
    //             if(value && value.__mcln__){
    //                 return value.__mcln__;
    //             }
    //             var descriptor = Object.getOwnPropertyDescriptor(target, prop);
    //             if((value && value.$ && value.$.hasOwnProperty("isModified") && value.$.getProxy)){
    //                 let prxVal = value.$.getProxy();
    //                 return prxVal;
    //             }
    //             else if(value && (value.constructor.name === "Object" || Array.isArray(value)) && !value.__ltPrx__ && descriptor && descriptor.configurable){
    //                 // path = path || [];
    //                 // path.push(prop);
    //                 if(Array.isArray(value) && value.model && value.key){
    //                     var hmPrx = value.record.$.__hmPrx = value.record.$.__hmPrx || {};
    //                     var retVal;
    //                     if(!hmPrx[value.key]){
    //                         retVal = hmPrx[value.key] = Lyte.mut(value)
    //                     }
    //                     else{
    //                         retVal = hmPrx[value.key]
    //                     }
    //                     return retVal;
    //                 }
    //                 let prxVal = Lyte.mut(value);
    //                 Object.defineProperty(value, "__mcln__", { value: prxVal});
    //                 return prxVal;
    //             }
    //             return value;
    //         }
    //     });
    //     Object.defineProperty(data, "__mcln__", { value: prxVal});
    //     return prxVal;
    // }
    Object.defineProperty(Lyte, "__gl__", {
        value: {}
    });
    Lyte.__gl = Lyte.__gl__;
})(_Lyte);
(function (window) {
    var _LyteComponent2;

    var _marked = /*#__PURE__*/regeneratorRuntime.mark(doCompile);

    var idleScheduler = new IdleTaskScheduler({ delayInit: true, timeout: 40 });
    window._wrapperComponents = [];
    // For minification
    var _Lyte = window.isLyteWidgetParent ? window._widgetLyte : window.Lyte;
    var Lyte = _Lyte;
    if (!window.__lyteConfig) {
        window.__lyteConfig = {
            _definedBeforeBridging: [],
            _alreadyDefinedBeforeBridging: [],
            v3: true,
            _pendingV3Components: {},
            _firstRegisteredComp: {}
        };
    }
    var ltCf = window.__lyteConfig;
    if (!ltCf.customElementsDefine) {
        ltCf.customElementsDefine = customElements.constructor.prototype.define;
        Object.defineProperty(customElements.constructor.prototype, "define", {
            value: function value(name, compClass, options, _lyteOptions) {
                if (customElements.get(name)) {
                    ltCf._alreadyDefinedBeforeBridging.push({ name: name, compClass: compClass, options: options, _lyteOptions: _lyteOptions, scope: this });
                } else {
                    ltCf._definedBeforeBridging.push({ name: name, compClass: compClass, options: options, _lyteOptions: _lyteOptions, scope: this });
                    ltCf.customElementsDefine.apply(this, arguments);
                }
            },
            enumerable: false
        });
    }
    if (!ltCf.instanciateBridge) {
        ltCf.instanciateBridge = function () {
            if (ltCf.isWidgetBuild || ltCf._LyteCustomElement && ltCf._customElementPrototype && ltCf._LyteYield) {
                ltCf.instanctiatedBridge = true;
                var versionBridge = {
                    component: {}
                };
                ltCf.versionBridge = versionBridge;

                var V3Registry = function () {
                    function V3Registry() {
                        _classCallCheck(this, V3Registry);
                    }

                    _createClass(V3Registry, null, [{
                        key: 'define',
                        value: function define(name, compClass, options, _lyteOptions) {
                            var customCrmComponent, otherComponent;
                            if (!ltCf.isWidgetBuild) {
                                if (_lyteOptions) {
                                    if (name == "lyte-yield") {
                                        if (_lyteOptions && _lyteOptions.widget) {
                                            // console.log("Dummy")
                                        } else {
                                            customCrmComponent = ltCf._LyteYield;
                                        }
                                    } else if (_lyteOptions && _lyteOptions.v4raw) {
                                        /*disable async function*/
                                        var customElementClass = ltCf._LyteCustomElement;
                                        /*disable async function*/
                                        customCrmComponent = function (_customElementClass) {
                                            _inherits(customCrmComponent, _customElementClass);

                                            function customCrmComponent() {
                                                _classCallCheck(this, customCrmComponent);

                                                return _possibleConstructorReturn(this, (customCrmComponent.__proto__ || Object.getPrototypeOf(customCrmComponent)).call(this));
                                            }

                                            return customCrmComponent;
                                        }(customElementClass);
                                    } else if (_lyteOptions && _lyteOptions.v3raw) {
                                        /*disable async function*/
                                        var _customElementClass2 = ltCf._LyteCustomElement;
                                        /*disable async function*/
                                        customCrmComponent = function (_customElementClass3) {
                                            _inherits(customCrmComponent, _customElementClass3);

                                            function customCrmComponent() {
                                                _classCallCheck(this, customCrmComponent);

                                                return _possibleConstructorReturn(this, (customCrmComponent.__proto__ || Object.getPrototypeOf(customCrmComponent)).call(this));
                                            }

                                            return customCrmComponent;
                                        }(_customElementClass2);
                                    } else if (_lyteOptions && (_lyteOptions.v3 || _lyteOptions.v4)) {
                                        /*disable async function*/
                                        var customElementPrototypeClass = ltCf._customElementPrototype;
                                        /*disable async function*/
                                        customCrmComponent = function (_customElementPrototy) {
                                            _inherits(customCrmComponent, _customElementPrototy);

                                            function customCrmComponent() {
                                                _classCallCheck(this, customCrmComponent);

                                                return _possibleConstructorReturn(this, (customCrmComponent.__proto__ || Object.getPrototypeOf(customCrmComponent)).call(this));
                                            }

                                            return customCrmComponent;
                                        }(customElementPrototypeClass);
                                    } else if (_lyteOptions && (_lyteOptions.widget || _lyteOptions.widgetRaw)) {
                                        // console.log("Dummy");
                                    }
                                } else {
                                    otherComponent = true;
                                }
                            }
                            var arr = arguments;
                            if (!otherComponent && _lyteOptions) {
                                if (_lyteOptions.v3) {
                                    _LC.V3.pendingComp.firstRegister(name, "v3");
                                    V3Registry.allList.v3[name] = compClass;
                                    if (!ltCf.isWidgetBuild) {
                                        customCrmComponent._observedAttributes = compClass._observedAttributes;
                                        arr = [name, customCrmComponent];
                                    }
                                } else if (_lyteOptions.widget) {
                                    _LC.V3.pendingComp.firstRegister(name, "widget");
                                    V3Registry.allList.widget[name] = compClass;
                                } else if (_lyteOptions.widgetRaw) {
                                    V3Registry.allList.widgetRaw[name] = compClass;
                                    _LC.V3.pendingComp.firstRegister(name, "widgetRaw");
                                } else if (_lyteOptions.v3raw) {
                                    V3Registry.allList.v3raw[name] = compClass;
                                    _LC.V3.pendingComp.firstRegister(name, "v3raw");
                                } else if (_lyteOptions.v4raw) {
                                    V3Registry.allList.v4raw[name] = compClass;
                                    _LC.V3.pendingComp.firstRegister(name, "v4raw");
                                } else if (_lyteOptions.v4) {
                                    V3Registry.allList.v4[name] = compClass;
                                    _LC.V3.pendingComp.firstRegister(name, "v4");
                                }
                                var definedClass = customElements.get(name);
                                if (!definedClass && !V3Registry.definedHere[name]) {
                                    window.__lyteConfig.customElementsDefine.apply(this, arr);
                                    V3Registry.definedHere[name] = compClass;
                                }
                            } else {
                                window.__lyteConfig.customElementsDefine.apply(this, arr);
                            }
                        }
                    }, {
                        key: 'register',
                        value: function register() {
                            var compArr = [ltCf._alreadyDefinedBeforeBridging, ltCf._definedBeforeBridging];
                            compArr.forEach(function (itemArr) {
                                if (itemArr && itemArr.length) {
                                    itemArr.forEach(function (obj) {
                                        if (obj._lyteOptions) {
                                            if (obj._lyteOptions.v3raw) {
                                                V3Registry.allList.v3raw[obj.name] = obj.compClass;
                                                _LC.V3.pendingComp.firstRegister(obj.name, "v3raw");
                                            } else if (obj._lyteOptions && obj._lyteOptions.v4raw) {
                                                V3Registry.allList.v4raw[obj.name] = obj.compClass;
                                                _LC.V3.pendingComp.firstRegister(obj.name, "v4raw");
                                            } else if (obj._lyteOptions && obj._lyteOptions.v3) {
                                                V3Registry.allList.v3[obj.name] = obj.compClass;
                                                _LC.V3.pendingComp.firstRegister(obj.name, "v3");
                                            } else if (obj._lyteOptions && obj._lyteOptions.v4) {
                                                V3Registry.allList.v4[obj.name] = obj.compClass;
                                                _LC.V3.pendingComp.firstRegister(obj.name, "v4");
                                            } else if (obj._lyteOptions && obj._lyteOptions.widget) {
                                                V3Registry.allList.widget[obj.name] = obj.compClass;
                                                _LC.V3.pendingComp.firstRegister(obj.name, "widget");
                                            } else if (obj._lyteOptions && obj._lyteOptions.widgetRaw) {
                                                V3Registry.allList.widgetRaw[obj.name] = obj.compClass;
                                                _LC.V3.pendingComp.firstRegister(obj.name, "widgetRaw");
                                            }
                                        }
                                    });
                                }
                            });
                            if (!ltCf.versionBridge && !ltCf.customElementsDefine) {
                                ltCf.customElementsDefine = customElements.constructor.prototype.define;
                            }
                            Object.defineProperty(customElements.constructor.prototype, "define", { //no i18n
                                value: function value(name, compClass, options, _lyteOptions) {
                                    V3Registry.define.apply(this, [name, compClass, options, _lyteOptions]);
                                },
                                enumerable: false
                            });
                        }
                    }]);

                    return V3Registry;
                }();

                ltCf.versionBridge.component.V3Registry = V3Registry;
                V3Registry.allList = { v3: {}, v4: {}, other: {}, v3raw: {}, v4raw: {}, widget: {}, widgetRaw: {} };
                V3Registry.definedHere = {};
                V3Registry.register();
            }
        };
    }
    //security
    _Lyte.Security = {
        "_ourSanitizerInstance_": {},
        "_userSanitizerInstance_": {},
        "_eM": {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#x27;',
            '`': '&#x60;',
            '=': '&#x3D;'
        },
        "_eR": /[&<>"'`=]/g,
        "_eF": function _eF(str) {
            return this._eM[str];
        },
        "escape": function escape(string) {
            if (typeof string !== 'string') {
                string = '' + string;
            }
            return string.replace(this._eR, this._eF.bind(this));
        }
    };
    if (!window.isLyteWidget) {
        var sec = { "GLOBAL_TAGS": [], "GLOBAL_ATTRIBUTES": [], "FORBID_TAGS": [], "FORBID_ATTR": [], REUSE_CONFIG: true };
        _Lyte.Security._ourSanitizerInstance_ = ZWAF['7_0_0'].HTMLPurifier(sec);
        _Lyte.Security._ourSanitizerInstance_._GLOBAL_TAGS = sec.GLOBAL_TAGS;
        _Lyte.Security._ourSanitizerInstance_._GLOBAL_ATTRIBUTES = sec.GLOBAL_ATTRIBUTES;
        sec.GLOBAL_ATTRIBUTES.push("is", "yield-name", "lt-prop-route", "lt-prop-dp", "lt-prop-fragment", "lt-prop-qp", "lt-prop", "lt-prop-class", "lt-prop-id", "lt-prop-rel", "lt-prop-title", "lt-prop-style", "lt-prop-target", "lt-prop-td", "lt-prop-custom", "lt-prop-target", "lt-prop-id", "lt-prop-class", "lt-prop-style", "lt-prop-rel", "lt-prop-title");
        sec.GLOBAL_TAGS.push("link-to");
        _Lyte.Security._ourSanitizerInstance_._FORBID_TAGS = sec.FORBID_TAGS;
        _Lyte.Security._ourSanitizerInstance_._FORBID_ATTR = sec.FORBID_ATTR;
        _Lyte.Security.createSanitizer = function (obb) {
            if (obb && obb.__target__) {
                obb = obb.__target__;
            }
            if (!obb.GLOBAL_ATTRIBUTES) {
                obb.GLOBAL_ATTRIBUTES = [];
            }
            if (!obb.FORBID_TAGS) {
                obb.FORBID_TAGS = [];
            }
            if (!obb.FORBID_ATTR) {
                obb.FORBID_ATTR = [];
            }
            if (!obb.GLOBAL_TAGS) {
                obb.GLOBAL_TAGS = [];
            }
            obb.REUSE_CONFIG = true;
            obb.GLOBAL_ATTRIBUTES.push("is", "yield-name", "lt-prop-route", "lt-prop-dp", "lt-prop-fragment", "lt-prop-qp", "lt-prop", "lt-prop-class", "lt-prop-id", "lt-prop-rel", "lt-prop-title", "lt-prop-style", "lt-prop-target", "lt-prop-td", "lt-prop-custom", "lt-prop-target", "lt-prop-id", "lt-prop-class", "lt-prop-style", "lt-prop-rel", "lt-prop-title");
            obb.GLOBAL_TAGS.push("link-to");
            var globalTagArr = Array.from(obb.GLOBAL_TAGS);
            var attr = [];
            for (var a = 0; a < globalTagArr.length; a++) {
                if (_LC._registeredComponents[globalTagArr[a]]) {
                    attr = _LC._registeredComponents[globalTagArr[a]].observedAttributes;
                } else if (Lyte.registeredCustomComponent[globalTagArr[a]]) {
                    attr = Lyte.registeredCustomComponent[globalTagArr[a]].observedAttributes;
                }
                if (attr) {
                    for (var i = 0; i < attr.length; i++) {
                        if (obb.GLOBAL_ATTRIBUTES.indexOf(attr[i]) == -1) {
                            obb.GLOBAL_ATTRIBUTES.push(attr[i]);
                        }
                    }
                }
            }
            _Lyte.Security._userSanitizerInstance_ = ZWAF['7_0_0'].HTMLPurifier(obb);
            _Lyte.Security._userSanitizerInstance_._GLOBAL_TAGS = obb.GLOBAL_TAGS;
            _Lyte.Security._userSanitizerInstance_._GLOBAL_ATTRIBUTES = obb.GLOBAL_ATTRIBUTES;
            _Lyte.Security._userSanitizerInstance_._FORBID_TAGS = obb.FORBID_TAGS;
            _Lyte.Security._userSanitizerInstance_._FORBID_ATTR = obb.FORBID_ATTR;
            return _Lyte.Security._userSanitizerInstance_;
        };
    }
    //var toArrayLyte = "toArrayLyte";
    //var bindStr = "_bindings";
    //var compStr = "component";
    //var forHelperStr = "_forHelpers";
    //var dynamicNodesStr = "_dynamicNodes";
    //var calleeStr = "_callee";
    //var getAttributeStr = "getAttribute";
    //var hasAttributeStr = "hasAttribute";
    //var removeAttributeStr ="removeAttribute";
    //var setAttributeStr = "setAttribute";
    //var parentNodeStr = "parentNode";
    //var nodeNameStr = "nodeName";
    //var ownerElementStr = "ownerElement";
    var globalDOMEvents = ["focus", "focusin", "focusout", "resize", "scroll", "click", "dblclick", "mousedown", "mouseup", "mousemove", "mouseover", "mouseout", "change", "select", "submit", "keydown", "keypress", "keyup", "contextmenu"];
    var registerHelperStr = "registerHelper";
    var delStr = "delete";

    /*disable async function*/
    window.defProp = function defProp() {
        Object.defineProperty.apply(Object, arguments);
    };

    /*disable async function*/
    function makeSet(obj, key) {
        if (!obj[key]) {
            defProp(obj, key, {
                value: new Set(),
                enumerable: false,
                writable: true,
                configurable: true
            });
        }
    }
    function makeVal(obj, key, val) {
        if (!obj[key]) {
            defProp(obj, key, {
                value: val,
                enumerable: false,
                writable: true,
                configurable: true
            });
        }
    }
    function addBindings(obj, property) {
        if (property) {
            var bindings = obj._bindings;
            if (!bindings) {
                makeSet(obj, "_bindings");
                bindings = obj._bindings;
            }
            bindings.add(property);
        }
    }
    /*disable async function*/
    function makeArray(obj, key) {
        if (!obj[key]) {
            defProp(obj, key, {
                value: [],
                enumerable: false,
                writable: true,
                configurable: true
            });
        }
    }

    function createDocFragment() {
        return document.createDocumentFragment();
    }

    function createElement(elm) {
        return document.createElement(elm);
    }

    function _insertBefore(parent, newNode, refNode) {
        parent.insertBefore(newNode, refNode);
    }

    function deleteBindingCheckSize(obj, key, valToDelete) {
        obj[key][delStr](valToDelete);
        if (!obj[key].size) {
            delete obj[key];
        }
    }
    _Lyte.registerErrorCodes({
        "LC001": "Error while parsing custom prop handler attribute {0}. Check if the value provided is a valid JSON",
        "LC002": "{0} Component is not compiled. Please compile using Lyte CLI",
        "LC003": "Helper named {0} is not defined",
        "LC004": "Action named {0} doesn't exists",
        "LC005": "Lyte.objectUtils doesn't support {0} function",
        "LC006": "Lyte.arrayUtils doesn't support {0} function",
        "LC007": "Component name not specified in Lyte.Component.render",
        "LC008": "Specified outlet {0} doesn't exists - Lyte.Component.render",
        "LC009": "Method named {0} doesn't exists in {1} component",
        "LC010": "Parent Node / reference Node not provided for insertBefore method",
        "LC011": "Error in promise provided in initialize function of data '{0}' of {1} component"
    });

    /*	IE Browser
    	_Lyte._ie 
    	Edge Browser
    	_Lyte._ed 
    	Replace with needed;
    	_Lyte._rwpf 
    	IE / Edge Browser
    	_Lyte._ms
    */

    var userAgent = navigator.userAgent;
    //temporary fix for IE 11
    if (userAgent.match(/rv:11/)) {
        _Lyte._ie = true;
        window.action = function () {
            return;
        };
    }
    if (userAgent.match('Edge')) {
        var s = createElement("div");
        s.innerHTML = "<template><div>c</div></template>";
        if (s.querySelector("template").childNodes.length) {
            _Lyte._ie = true;
        } else {
            _Lyte._ed = true;
        }
        s.remove();
    }

    var Test = function (_HTMLElement) {
        _inherits(Test, _HTMLElement);

        function Test() {
            _classCallCheck(this, Test);

            var _this4 = _possibleConstructorReturn(this, (Test.__proto__ || Object.getPrototypeOf(Test)).call(this));

            if (!_this4.attributes.t) {
                _LC.frSpecial = true;
            }
            return _this4;
        }

        return Test;
    }(HTMLElement);

    if (_Lyte._ie || _Lyte._ed) {
        var doc = createDocFragment();
        doc.appendChild(document.createTextNode("  dummy "));
        doc.childNodes[0].replaceWith(document.createTextNode("changed"));
        if (doc.childNodes[0].textContent !== "changed") {
            _Lyte._rwpf = true;
        }
        _Lyte._ms = true;
    }

    _Lyte.Component = {};
    Lyte.Compile = {};
    var _LyteComponent = _Lyte.Component;
    _Lyte.Component.lazyRegisterScheduler = idleScheduler;
    _Lyte.Component.priorityRegistrationQ = idleScheduler.priorityQueue;

    _Lyte.arrayUtils = function () {
        //arrayFunctions
        return _LC.aF.apply(_LC, arguments);
    };
    _Lyte.objectUtils = function () {
        //objectFunctions
        return _LC.oF.apply(_LC, arguments);
    };
    Object.defineProperty(_LyteComponent, "register", {
        get: function get() {
            Lyte._preRegister();
            return _LC.registerComponentWrapper;
        },
        "enumerable": true
    });
    _LyteComponent.nonFalsyAttrs = {
        add: function add(value) {
            if (Array.isArray(value)) {
                value.forEach(function (item) {
                    _LC.booleanAttrList.push(item);
                });
            } else {
                _LC.booleanAttrList.push(value);
            }
        },
        _remove: function _remove(item) {
            var ind = _LC.booleanAttrList.indexOf(item);
            if (ind !== -1) {
                _LC.booleanAttrList.splice(ind, 1);
            }
        },
        remove: function remove(value) {
            if (Array.isArray(value)) {
                value.forEach(function (item) {
                    _LyteComponent.nonFalsyAttrs._remove(item);
                });
            } else {
                _LyteComponent.nonFalsyAttrs._remove(item);
            }
        }
    };

    _LyteComponent.getComponentClass = function (compName) {
        return _LC._registeredComponents[compName];
    };
    _LyteComponent.registerHelper = function () {
        _LC.registerHelper.apply(_LC, arguments);
    };
    _LyteComponent.set = function () {
        _LC.set.apply(_LC, arguments);
    };
    _LyteComponent.registeredHelpers = {};
    _LyteComponent.registeredComponents = {};
    function noop() {}
    _LyteComponent.customPropHandlersList = {};
    _LyteComponent.registerCustomPropHandler = function (propName) {
        var dasherized = _LC.String.dasherize(propName);
        propName = _LC.String.toCamelCase(propName);
        if (_LC.customPropHandlers.indexOf(propName) === -1) {
            _LC.customPropHandlers.push(propName);
            var customPropHanlderFn = customElementPrototype.prototype[propName] = function () {
                var argsLength = arguments.length;
                var arg0 = arguments[0];
                var options = arguments[2];
                var compData = LyteComponent.getCmpData(this.component.data);
                if (!arg0) {
                    //Read all the values
                    var _obj2 = {};
                    for (var _key2 in compData) {
                        if (_key2.startsWith(propName)) {
                            var objKey = _key2.substring(propName.length);
                            objKey = _LC.String.lowerCaseFirstLetter(objKey);
                            _obj2[objKey] = compData[_key2];
                        }
                    }
                    return _obj2;
                } else if (typeof arg0 === "string") {
                    if (argsLength > 1) {
                        //Set a value
                        this.set(propName + _LC.String.upperCaseFirstLetter(arg0), arguments[1], options);
                    } else {
                        //Read a value
                        var actKey = propName + _LC.String.upperCaseFirstLetter(arg0);
                        return compData[actKey];
                    }
                } else if ((typeof arg0 === 'undefined' ? 'undefined' : _typeof(arg0)) === "object") {
                    //Write a set of values
                    for (var _key3 in arg0) {
                        var _objKey = propName + _LC.String.upperCaseFirstLetter(_key3);
                        this.set(_objKey, arg0[_key3], arguments[1]);
                    }
                }
            };
            _LyteComponent.customPropHandlersList[propName] = customPropHanlderFn;
            _LC.customPropRegex = new RegExp("^(" + _LC.customPropHandlers.join("|") + ")");
        }
    };
    _LyteComponent.unregisterComponent = function (componentName, configObj) {
        configObj = configObj || {};
        if (_LyteComponent.registeredComponents[componentName]) {
            var comp = _LC._registeredComponents[componentName];
            if (comp.activeInstances > 0) {
                _Lyte.warn("There are active instances of the component " + componentName + " and hence cannot be unregistered");
            } else if (comp.component.activeInstances > 0) {
                _Lyte.warn("There are active instances of the component " + componentName + " and hence cannot be unregistered");
            } else {
                //Do the unregisteration here
                comp._properties = comp.component._properties = {};
                comp._mixins = comp._actions = comp._template = comp._dynamicNodes = null;
                comp._callBacks = comp.component._callBacks = {};
                comp._observers = comp.component._observers = [];
                comp._data = comp.component_data = undefined;
                comp._methods = comp.component._methods = {};
                comp.prototype.get = noop;
                comp.prototype.set = noop;
                // delete comp.prototype.setData;
                // delete comp.prototype.getData;
                Object.defineProperty(comp.prototype, "setData", {
                    configurable: true,
                    writable: true,
                    value: function value(arg0, arg1) {
                        this._initProperties = this._initProperties || {};
                        if (typeof arg0 === "string") {
                            this._initProperties[arg0] = arg1;
                        } else if ((typeof arg0 === 'undefined' ? 'undefined' : _typeof(arg0)) === "object") {
                            for (var _key4 in arg0) {
                                this._initProperties[_key4] = arg0[_key4];
                            }
                        }
                    }
                });

                Object.defineProperty(comp.prototype, "setMethods", {
                    configurable: true,
                    writable: true,
                    value: function value(arg0, arg1) {
                        this._initMethods = this._initMethods || {};
                        if (typeof arg0 === "string") {
                            this._initMethods[arg0] = arg1;
                        } else if ((typeof arg0 === 'undefined' ? 'undefined' : _typeof(arg0)) === "object") {
                            for (var _key5 in arg0) {
                                this._initMethods[_key5] = arg0[_key5];
                            }
                        }
                    }
                });

                delete _LyteComponent.registeredComponents[componentName];
                var template = document.querySelector("template[tag-name=" + componentName + "]");
                if (template) {
                    template.remove();
                }
                // lyteht -> lyteHelperTemplates
                var helperTemplate = comp._helperTemplate;
                if (helperTemplate) {
                    helperTemplate.remove();
                }
                // if(comp._depthTemp) {
                //     comp._depthTemp.remove();    
                // }
                if (comp.component._depthTemp) {
                    comp.component._depthTemp.remove();
                }
            }
        } else {
            _Lyte.warn("Component " + componentName + " not yet registered");
        }
    };
    _Lyte.createCustomElement = function (customElementName, definition) {
        var constructor = definition.constructor;
        delete definition.constructor;
        var connectedCallback = definition.connectedCallback;
        delete definition.connectedCallback;
        var attributeChangedCallback = definition.attributeChangedCallback;
        delete definition.attributeChangedCallback;
        var disconnectedCallback = definition.disconnectedCallback;
        delete definition.disconnectedCallback;

        this.defProperty = function (obj, key, val) {
            var obj1 = {};
            if (val.get) {
                /*disable async function*/
                obj1.get = val.get;
            }
            if (val.set) {
                /*disable async function*/
                obj1.set = val.set;
            }
            Object.defineProperty(obj, key, obj1, true);
        };

        var classDef = function (_HTMLElement2) {
            _inherits(classDef, _HTMLElement2);

            function classDef() {
                _classCallCheck(this, classDef);

                var _this5 = _possibleConstructorReturn(this, (classDef.__proto__ || Object.getPrototypeOf(classDef)).call(this));

                if (window.ignoreParent) {
                    _this5.__lyteIgnore = true;
                    // window.ignoreParent = false;
                    return _possibleConstructorReturn(_this5);
                }
                _this5.decideConstructor();
                return _this5;
            }

            _createClass(classDef, [{
                key: 'decideConstructor',
                value: function decideConstructor() {
                    if (ltCf && (ltCf.v4 || ltCf.isWidgetBuild)) {
                        // check wether v3 or v4
                        // V3Registry // ?how
                        var V3Registry = ltCf.versionBridge.component.V3Registry;
                        var foundInV4List = V3Registry.allList.v4raw[this.localName];
                        var foundInV3List = V3Registry.allList.v3raw[this.localName];
                        var foundInWidgetList = V3Registry.allList.widgetRaw[this.localName];

                        if (foundInV4List) {
                            // found same name in v4
                            if (!foundInV3List || this._callee && this._callee.__v4 || this.hasAttribute("lyte-v4") || this.hasAttribute("lyte-registry") || ltCf.lyteV4 || ltCf.fromV4Render) {
                                //v4
                                var v4compClass = foundInV4List;
                                var _self = this;
                                classDef._V4InsApi.forEach(function (apiName) {
                                    _self[apiName] = v4compClass.prototype[apiName];
                                });
                            }
                        } else if (foundInWidgetList) {
                            if (this._callee && this._callee.__widget || this.hasAttribute("lyte-widget") || window.__lyteConfig.isWidgetComponent || ltCf.lyteWidget || ltCf.fromWidgetRender) {
                                //v4
                                var widgetCompClass = foundInWidgetList;
                                var _self2 = this;
                                if (ltCf._firstRegisteredComp[this.localName] != "widgetRaw") {
                                    classDef._V3InsApi.forEach(function (apiName) {
                                        _self2[apiName] = widgetCompClass.prototype[apiName];
                                    });
                                }
                            } else if (foundInV3List) {
                                var v3CompClass = foundInV3List;
                                if (ltCf._firstRegisteredComp[this.localName] != "v3raw") {
                                    classDef._V3InsApi.forEach(function (apiName) {
                                        self[apiName] = v3CompClass.prototype[apiName];
                                    });
                                }
                            } else {
                                // not found in foundInV3List
                                _LC.V3.pendingComp.add(this);
                                this.__v3lyteIgnore = true;
                                return;
                            }
                        }
                    }
                    //v3
                    this.actualConstructor();
                }
            }, {
                key: 'actualConstructor',
                value: function actualConstructor() {
                    if (this.isNewComp(customElementName)) {
                        this.executeCallbacks(constructor, arguments);
                    } else {
                        this.__lyteIgnore = true;
                    }
                }
            }, {
                key: 'connectedCallback',
                value: function connectedCallback() {
                    this._connectedCallback();
                }
            }, {
                key: '_connectedCallback',
                value: function _connectedCallback() {
                    if (this.__lyteIgnore || this.hasAttribute("lyte-rendered-ce")) {
                        return;
                    }
                    this.executeCallbacks(connectedCallback, arguments);
                    this.setAttribute("lyte-rendered-ce", "");
                    this._connectedCalled = true;
                }
            }, {
                key: 'attributeChangedCallback',
                value: function attributeChangedCallback(attr, oldValue, newValue) {
                    this._attributeChangedCallback(attr, oldValue, newValue);
                }
            }, {
                key: '_attributeChangedCallback',
                value: function _attributeChangedCallback() {
                    if (!this.__lyteIgnore || this.__v3lyteIgnore) {
                        this.executeCallbacks(attributeChangedCallback, arguments);
                    }
                }
            }, {
                key: 'disconnectedCallback',
                value: function disconnectedCallback() {
                    this._disconnectedCallback();
                }
            }, {
                key: '_disconnectedCallback',
                value: function _disconnectedCallback() {
                    if (this.__v3lyteIgnore) {
                        _LC.V3.pendingComp.remove(this);
                        return;
                    }
                    if (!_LyteComponent.shouldIgnoreDisconnect() && !this.__lyteIgnore) {
                        this.executeCallbacks(disconnectedCallback, arguments);
                        this._parentHelper = null;
                    }
                }
            }, {
                key: 'executeCallbacks',
                value: function executeCallbacks(callBack, argArr) {
                    if (callBack) {
                        callBack.apply(this, Array.from(argArr));
                    }
                }
            }, {
                key: 'isNewComp',
                value: function isNewComp(customElementName) {
                    if (this.hasAttribute("lyte-rendered-ce")) {
                        return false;
                    }
                    return true;
                }
            }]);

            return classDef;
        }(HTMLElement);

        classDef._V4InsApi = ["_connectedCallback", "_attributeChangedCallback", "_disconnectedCallback", "actualConstructor", "executeLyteCallbacks", "isClonedNode", "_isClonedAttribute", "isClonedAttribute"];
        classDef._V3InsApi = ["_connectedCallback", "_attributeChangedCallback", "_disconnectedCallback", "actualConstructor", "executeCallbacks", "isNewComp"];
        var staticDef = definition.static;
        definition._static = staticDef;
        if (staticDef) {
            for (var key in staticDef) {
                if (_typeof(staticDef[key]) === "object") {
                    this.defProperty(classDef, key, staticDef[key]);
                } else {
                    Object.defineProperty(classDef, key, {
                        value: staticDef[key]
                    });
                }
            }
            delete definition.static;
        }
        classDef._definition = definition;
        for (var key in definition) {
            if (_typeof(definition[key]) === "object") {
                this.defProperty(classDef.prototype, key, definition[key]);
            } else {
                Object.defineProperty(classDef.prototype, key, { writable: true, value: definition[key] });
            }
        }
        definition.static = staticDef;
        definition.constructor = constructor;
        definition.connectedCallback = connectedCallback;
        definition.attributeChangedCallback = attributeChangedCallback;
        definition.disconnectedCallback = disconnectedCallback;
        if (document.readyState === "complete" || document.readyState === "interactive") {
            // document is already ready to go
            customElements.define(customElementName, classDef, undefined, _Lyte.isWidgetBuild ? { "widgetRaw": true } : { v3raw: true });
        } else {
            LyteComponent.toBeRegistered.push({ name: customElementName, def: classDef, _lyteOptions: _Lyte.isWidgetBuild ? { "widgetRaw": true } : { v3raw: true } });
        }
        Lyte.registeredCustomComponent[customElementName] = classDef;
    };
    var elementPrototype = typeof HTMLElement !== "undefined" ? HTMLElement : Element;

    _Lyte.appendTemplateDiv = function () {
        document.body.appendChild(_LC.tDiv);
        document.body.appendChild(_LC.h1Div);
        _LCHD.appendTemp();
    };

    document._addShadowForGlobalRegistry = function (shadow) {
        for (var _i4 = 0; _i4 < globalDOMEvents.length; _i4++) {
            var evnt = globalDOMEvents[_i4];
            shadow.addEventListener(evnt, globalEventHandler, true);
        }
        for (var j = 0; j < windowEventListeners.length; j++) {
            shadow.addEventListener.apply(shadow, windowEventListeners[j]);
        }
        shadow.addEventListener("change", changeEventHandler);
    };

    function onDomContentForLyte() {
        if (Lyte.$.assetsDiv) {
            Lyte.$.assetsDiv.addEventListener("click", function () {
                if (!window.event) {
                    _LC._windowEvNeeded = true;
                }
            });
            Lyte.$.assetsDiv.dispatchEvent(new Event("click"));
        }

        // document.head.appendChild(Lyte.$.assetsDiv);
        if (!_Lyte._ie) {
            document.body.appendChild(_LC.lyteComponentsDiv);
            //document.body.appendChild(_LC.tDiv);
        }
        document.body.appendChild(_LC.hDiv);
        var bodyEvents = globalDOMEvents;
        for (var _i5 = 0; _i5 < bodyEvents.length; _i5++) {
            var evnt = bodyEvents[_i5];
            document.body.addEventListener(evnt, globalEventHandler, true);
        }
        //ssrcode_start
        document.body.querySelectorAll("[server-rendered]").forEach(function (cN) {
            if (cN.bindServerData) {
                if (!cN.component.data.lyteUnbound) {
                    cN.bindServerData();
                    // callSSRBind(cN);
                }
            } else {
                cN.setAttribute("ssrbindservernode", "true");
            }
        });
        //ssrcode_end
        var comp = _LC.toBeRegistered;
        if (comp.length) {
            for (var j = 0; j < comp.length; j++) {
                customElements.define(comp[j].name, comp[j].def, undefined, comp[j]._lyteOptions);
            }
            _LC.toBeRegistered = [];
        }
        if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {
            var style = createElement("style");
            style.innerHTML = "* { cursor : pointer}";
            document.head.appendChild(style);
        }
        if (Lyte.isWidgetBuild) {
            var wrapper = Lyte.$.widgetWrapper;
            document.body.appendChild(wrapper);
            if (window.docEventListenerHandler) {
                window.docEventListenerHandler.attachShadow(wrapper.shadowRoot);
            }
            LyteComponent.shadow.shadowList.push(wrapper.shadowRoot);
            wrapper.shadowRoot._shadowChild = [];
            wrapper.shadowRoot._lyteShadow = true;
            wrapper.shadowRoot._compList = [];
            // wrapper.shadowRoot._id = id;
            wrapper.shadowRoot._duplicateStyle = [];
            wrapper.shadowRoot._linkRef = [];

            wrapper.instantiated = true;
            LyteComponent.shadow.attachEvents(wrapper.shadowRoot);
            // let appChild = document.body.appendChild;
            // let rmChild = document.body.removeChild;
            // document.body.appendChild = function(ele){
            // 	return _widgetLyte.$.widgetWrapper.shadowRoot.appendChild.apply(_widgetLyte.$.widgetWrapper.shadowRoot,arguments) ;
            // }
            // document.body.removeChild = function(ele){
            // 	return _widgetLyte.$.widgetWrapper.shadowRoot.removeChild.apply(_widgetLyte.$.widgetWrapper.shadowRoot,arguments) ;
            // }
        }
    }

    var changeEventHandler = function changeEventHandler(event1) {
        var target = event1.target || event1.srcElement;
        if (!target._attributeDetails) {
            return;
        }
        var attributeName = "value";
        if (target.type === "checkbox" || target.type === "radio") {
            attributeName = "checked";
        }
        var contextSwitchArray = [];
        var attrNode;
        var attrDetail = target._attributeDetails[attributeName];
        var saveAttr = _LCSV.getAttr(target._specialAttributeDetails);
        if (!attrDetail || !attrDetail.isLbind && !saveAttr) {
            return;
        }
        //attrNode = (attributeName === "checked") ? target._attributeDetails[attributeName].bindedNode : target.getAttributeNode(attributeName);
        var callee = target;
        if (!target._callee) {
            while (callee && !_LC.isCustomElement(callee) && callee.tagName !== "LYTE-YIELD") {
                if (callee.tagName === "BODY") {
                    callee = null;
                    break;
                }
                callee = callee.parentNode;
            }
            if (callee && callee.tagName === "LYTE-YIELD") {
                target._callee = callee._registerYield._callee;
            } else {
                target._callee = callee;
            }
        }
        var self = target._callee;
        if (saveAttr) {
            _LCSV.triggerAllListeners(self, saveAttr.hookName, target, true);
            // return;
        }
        if (target) {
            _LC.adCx(target, contextSwitchArray);
        }
        if (attrDetail) {
            var _obj3 = _LC.getNew(self.component.data, attrDetail.dynamicValue);
            if (!_obj3.context) {
                return;
            }
            var lastKeyIndex = +_obj3.lastKey;
            if (Array.isArray(_obj3.context) && typeof lastKeyIndex == "number") {
                var callReplaceAt = lastKeyIndex < _obj3.context.length;
                if (_obj3.context[lastKeyIndex] !== target[attributeName] || !callReplaceAt) {
                    _LC.aF(_obj3.context, callReplaceAt ? "replaceAt" : "insertAt", lastKeyIndex, target[attributeName]);
                }
            } else {
                _LC.set(_obj3.context, _obj3.lastKey, target[attributeName]);
            }
        }
        // _LC.set(obj.context, obj.lastKey, target[attributeName]);
        if (target) {
            _LC.rmCx(target, contextSwitchArray);
        }
    };
    document.addEventListener("change", changeEventHandler);
    var docCaptureGlobalEventHandler = function docCaptureGlobalEventHandler(ev) {
        var evnt = ev.type;
        if (window.docEventListenerHandler && window.docEventListenerHandler.docEventlisteners && ev.composedPath()[0].getRootNode().host) {
            var listenerArr = window.docEventListenerHandler.docEventlisteners.capture[evnt];
            if (listenerArr) {
                var listenerArrCpy = Array.from(listenerArr);
                listenerArrCpy.forEach(function (listener) {
                    if (listenerArr.indexOf(listener) != -1) {
                        listener(ev);
                    }
                });
            }
        }
    };
    var docBubbleGlobalEventHandler = function docBubbleGlobalEventHandler(ev) {
        var evnt = ev.type;
        if (window.docEventListenerHandler && window.docEventListenerHandler.docEventlisteners && ev.composedPath()[0].getRootNode().host) {
            var listenerArr = window.docEventListenerHandler.docEventlisteners.bubble[evnt];
            if (listenerArr) {
                var listenerArrCpy = Array.from(listenerArr);
                listenerArrCpy.forEach(function (listener) {
                    if (listenerArr.indexOf(listener) != -1) {
                        listener(ev);
                    }
                });
            }
        }
    };
    var globalEventHandler = function globalEventHandler(ev) {
        var target = ev.target;
        var evnt = ev.type;
        var toRemove;
        if (/^(click|dblclick)$/.test(evnt) && target.getAttribute && target.getAttribute("lyte-state") != null && !_Lyte.isWidgetBuild) {
            ev.preventDefault();
            return;
        }
        if (ev.currentTarget && ev.currentTarget !== document.body && !(ev.currentTarget instanceof DocumentFragment)) {
            target = ev.currentTarget;
        }
        if (_LC._windowEvNeeded) {
            toRemove = true;
            window.event = ev;
        }
        var eventStopped = false;
        while (target && target.getAttribute && (!target.getAttribute(evnt) || !['mouseenter', 'mousemove', 'mouseover', 'mouseout', 'mouseleave'].includes(ev.type) && target.hasAttribute("disabled") && evnt != "blur") && target.tagName != "BODY") {
            if (target._hiddenBoundEvents && target._hiddenBoundEvents[evnt]) {
                break;
            }
            if (_LC.hasLyteEvents(target, evnt)) {
                eventStopped = _LC.handleLyteEvents(target, ev);
                if (eventStopped) {
                    break;
                }
            }
            target = target.parentNode;
        }
        if (eventStopped || !target) {
            if (ev._handledResolve) {
                ev._handledResolve();
            }
            return;
        }
        var callee = target;
        if (target._callee && target._callee.component && target._callee.component.constructor._v4 || target.component && target.component.constructor && target.component.constructor._v4) {
            return;
        }
        if (!target._callee) {
            while (callee && !_LC.isCustomElementV3(callee) && callee.tagName !== "LYTE-YIELD") {
                if (callee.tagName === "BODY") {
                    callee = null;
                    break;
                }
                callee = callee.parentNode;
            }
            if (callee && callee.tagName === "LYTE-YIELD") {
                target._callee = callee._registerYield._callee;
            } else {
                target._callee = callee === target ? undefined : callee;
            }
        }
        if (target._evBoundEvents && target._evBoundEvents[evnt]) {
            //Not needed - but check and remove
            // let actions = target._callee? target._callee.constructor._actions : target.constructor._actions ;
            //let actions = target.constructor._actions;
            var actObj = target._evBoundEvents[evnt];
            var cloneActObj = _Lyte.deepCopyObject(actObj);
            _LC.skipArgProcessing(cloneActObj, ev, target);
            _LC.throwAction.call(target, target, evnt, cloneActObj, undefined, undefined, target, ev, undefined, true);
        } else if (target.getAttribute && target.getAttribute(evnt) && target._boundEvents && target._boundEvents[evnt]) {
            // let actions = target._callee.constructor._actions;
            var func = target.getAttribute(evnt).split(" => ")[1];
            var _actObj = target._boundEvents[evnt];
            var _cloneActObj = _Lyte.deepCopyObject(_actObj);
            _LC.skipArgProcessing(_cloneActObj, ev, target);
            _LC.throwAction.call(target._callee, target._callee, evnt, _cloneActObj, undefined, undefined, target, ev);
        }
        _LCHD.triggerGlobalEvent(target, evnt, ev);
        if (target.tagName === "LABEL") {
            var input = target.querySelector("input");
            if (input && input.getAttribute(evnt)) {
                // let actions = target._callee.constructor._actions;
                var _func = input.getAttribute(evnt).split(" => ")[1];
                //	let actObj = target._callee.constructor.getHelper(func);
                var _actObj2 = target._boundEvents[evnt];
                var _cloneActObj2 = _Lyte.deepCopyObject(_actObj2);
                _LC.skipArgProcessing(_cloneActObj2, ev, target);
                _LC.throwAction.call(target._callee, target._callee, evnt, _cloneActObj2, undefined, undefined, input, ev);
            }
        }
        if (toRemove) {
            window.event = undefined;
        }
        if (ev._handledResolve) {
            ev._handledResolve();
        }
        // if(postProcess && postProcess.length){
        //     postProcess.forEach(function(listener){
        //         listener(ev);
        //     })
        // }
    };

    var LyteYield = function (_HTMLElement3) {
        _inherits(LyteYield, _HTMLElement3);

        function LyteYield() {
            _classCallCheck(this, LyteYield);

            var _this6 = _possibleConstructorReturn(this, (LyteYield.__proto__ || Object.getPrototypeOf(LyteYield)).call(this));

            _this6.decideConstructor();
            return _this6;
        }

        _createClass(LyteYield, [{
            key: 'decideConstructor',
            value: function decideConstructor() {
                // if(window.__lyteConfig && window.__lyteConfig.v4){
                if (ltCf && (ltCf.v4 || window.__lyteConfig.isWidgetBuild)) {
                    var V3Registry = ltCf.versionBridge.component.V3Registry;

                    var foundInV4List = V3Registry.allList.v4[this.localName];
                    var foundInV3List = V3Registry.allList.v3[this.localName];
                    var foundInWidgetList = V3Registry.allList.widget[this.localName];

                    if (foundInV4List) {
                        // found same name in v4
                        if (!foundInV3List || this._callee && this._callee.__v4 || this.hasAttribute("lyte-v4") || this.hasAttribute("lyte-registry") || ltCf.lyteV4 || ltCf.fromV4Render) {
                            //v4
                            var v4CompClass = foundInV4List;
                            var _self3 = this;
                            LyteYield._V4InsApi.forEach(function (apiName) {
                                _self3[apiName] = v4CompClass.prototype[apiName];
                            });
                        }
                    } else if (foundInWidgetList) {
                        if (this._callee && this._callee.__widget || this.hasAttribute("lyte-widget") || window.__lyteConfig.isWidgetComponent || ltCf.lyteWidget || ltCf.fromWidgetRender) {
                            //v4
                            var widgetCompClass = foundInWidgetList;
                            var _self4 = this;
                            if (ltCf._firstRegisteredComp[this.localName] != "widget") {
                                LyteYield._V3InsApi.forEach(function (apiName) {
                                    _self4[apiName] = widgetCompClass.prototype[apiName];
                                });
                            }
                        } else if (foundInV3List) {
                            var v3CompClass = foundInV3List;
                            if (ltCf._firstRegisteredComp[this.localName] != "v3") {
                                LyteYield._V3InsApi.forEach(function (apiName) {
                                    self[apiName] = v3CompClass.prototype[apiName];
                                });
                            }
                        } else {
                            // not found in foundInV3List
                            _LC.V3.pendingComp.add(this);
                            this.__v3lyteIgnore = true;
                            return;
                        }
                    }
                }
                //v4
            }
        }, {
            key: 'connectedCallback',
            value: function connectedCallback() {
                this._connectedCallback();
            }
        }, {
            key: '_connectedCallback',
            value: function _connectedCallback() {
                this._callee = this._callee || _LC.getCallee(this.parentNode, this);
                _LCHD.yield.connect(this);
                if (!this._registerYield && this._callee) {
                    var yieldName;
                    if (this._callee._fR && this._callee._fR._yieldCallee) {
                        this._registerYield = { "_callee": this._callee._fR._yieldCallee.component.$node };
                    } else if (this._callee._yields && (yieldName = this.attributes["yield-name"]) && (yieldName = yieldName.nodeValue) && this._callee._yields[yieldName]) {
                        this._registerYield = { "_callee": this._callee._yields[yieldName]._callee };
                    }
                }
            }
        }, {
            key: 'disconnectedCallback',
            value: function disconnectedCallback() {
                this._disconnectedCallback();
            }
        }, {
            key: '_disconnectedCallback',
            value: function _disconnectedCallback() {
                if (this.__v3lyteIgnore) {
                    _LC.V3.pendingComp.remove(this);
                    return;
                }
                if (_LyteComponent.shouldIgnoreDisconnect() || this._deleted || this._ignoreDisconnect) {
                    return;
                }
                _LCHD.yield.disConnect(this);
                this._deleted = true;
                if (!this._properties) {
                    return;
                }
                var nodeContextSwitchArray = [];
                var cmpData = LyteComponent.getCmpData(this.component.data);
                _LC.adCx(this, nodeContextSwitchArray);
                _LC.removeSelectedBindingDeep(this._properties, cmpData, true);
                var node = this._registerYield;
                if (!node) {
                    _LC.rmCx(this, nodeContextSwitchArray);
                    return;
                }
                var toAppendContextSwitchArray = [];
                this._parentHelper = null;
                //newContext not needed
                var del = "delete"; //for ie 11.0
                _LC.adCx(node, toAppendContextSwitchArray);
                for (var _key6 in this._dynamicProperty) {
                    if (this._dynamicProperty[_key6].isActualNode) {
                        this._dynamicProperty[_key6].isActualNode._helperNodes[del](this);
                    } else {
                        var helperNodes = node._callee.getProperty(_key6)._helperNodes;
                        if (helperNodes) {
                            helperNodes[del](this);
                        }
                    }
                }
                this._dynamicProperty = {};
                for (var _i6 = 0; _i6 < this._helpers.length; _i6++) {
                    node._callee.removeHelpers(this._helpers[_i6]);
                }
                this._helpers = [];
                _LC.rmCx(node, toAppendContextSwitchArray);
                _LC.rmCx(this, nodeContextSwitchArray);
                // var self = this;
                // setTimeout(function() {
                //     self._registerYield = null
                //     self._callee = null;
                // },0);
            }
        }, {
            key: 'getProperty',
            value: function getProperty(key) {
                var arr = key.match(/([^[\].]+|\[\])/g);
                var property = this;
                if (!property._properties[arr[0]]) {
                    property._properties[arr[0]] = {};
                }
                property = property._properties[arr[0]];

                defProp(property, '_path', { enumerable: false, value: arr[0] });
                for (var _i7 = 1; _i7 < arr.length; _i7++) {
                    if (arr[_i7].startsWith("'") || arr[_i7].startsWith('"')) {
                        //added check
                        arr[_i7] = arr[_i7].substring(1, arr[_i7].length - 1);
                    }
                    if (!property[arr[_i7]]) {
                        property[arr[_i7]] = {};
                        defProp(property[arr[_i7]], '_path', { enumerable: false, value: property._path + "." + arr[_i7] });
                    }
                    property = property[arr[_i7]];
                }
                return property;
            }
        }]);

        return LyteYield;
    }(HTMLElement);

    LyteYield._V4InsApi = ["_connectedCallback", "getProperty", "_disconnectedCallback"];
    LyteYield._V3InsApi = ["_connectedCallback", "getProperty", "_disconnectedCallback"]; //no i18n

    customElements.define("lyte-yield", LyteYield, undefined, _Lyte.isWidgetBuild ? { "widget": true } : { v3: true });

    var customElementPrototype = function (_elementPrototype) {
        _inherits(customElementPrototype, _elementPrototype);

        function customElementPrototype() {
            _classCallCheck(this, customElementPrototype);

            var _this7 = _possibleConstructorReturn(this, (customElementPrototype.__proto__ || Object.getPrototypeOf(customElementPrototype)).call(this));

            if (window.isLyteWidget && window.parentWrapperComps && window.parentWrapperComps.indexOf(_this7.tagName) != -1 && !_this7.children.length) {
                _this7.__lyteIgnore = true;
            }
            if (window.ignoreParent) {
                _this7.__lyteIgnore = true;
                // window.ignoreParent = false;
                return _possibleConstructorReturn(_this7);
            }
            _this7.decideConstructor();
            return _this7;
        }

        _createClass(customElementPrototype, [{
            key: 'decideConstructor',
            value: function decideConstructor() {
                if (window.__lyteConfig && (window.__lyteConfig.v4 || window.__lyteConfig.isWidgetBuild)) {
                    var _self5 = this;
                    var V3Registry = ltCf.versionBridge.component.V3Registry;
                    var foundInV4List = V3Registry.allList.v4[this.localName];
                    var foundInV3List = V3Registry.allList.v3[this.localName];
                    var foundInWidgetList = V3Registry.allList.widget[this.localName];
                    if (foundInV4List) {
                        if (!foundInV3List || this._callee && this._callee.__v4 || this.hasAttribute("lyte-v4") || this.hasAttribute("lyte-registry") || ltCf.lyteV4 || ltCf.fromV4Render) {
                            //v4
                            var v4compClass = foundInV4List;
                            customElementPrototype._V4InsApi.forEach(function (apiName) {
                                _self5[apiName] = v4compClass.prototype[apiName];
                            });
                            this.setData = v4compClass.componentClass.prototype.setData;
                            this.setMethods = v4compClass.componentClass.prototype.setMethods;
                        } else if (foundInV3List) {
                            //v3
                            var v3CompClass = foundInV3List;
                            _self5.component = _self5.constructor.component = v3CompClass.component;
                        }
                    } else if (foundInWidgetList) {
                        if (this._callee && this._callee.__widget || ltCf.__widget || this.hasAttribute("lyte-widget") || window.__lyteConfig.isWidgetComponent || ltCf.lyteWidget || ltCf.fromWidgetRender) {
                            var widgetCompClass = foundInWidgetList;
                            if (ltCf._firstRegisteredComp[this.localName] != "widget") {
                                customElementPrototype._V3InsApi.forEach(function (apiName) {
                                    _self5[apiName] = widgetCompClass.prototype[apiName];
                                });
                            }
                            _self5.component = widgetCompClass.component;
                            _self5.__widget = true;
                            // this.setData = v4compClass.componentClass.prototype.setData;
                            // this.setMethods = v4compClass.componentClass.prototype.setMethods;
                        } else if (foundInV3List) {
                            var _v3CompClass = foundInV3List;
                            if (ltCf._firstRegisteredComp[this.localName] != "v3") {
                                customElementPrototype._V3InsApi.forEach(function (apiName) {
                                    _self5[apiName] = _v3CompClass.prototype[apiName];
                                });
                            }
                            _self5.component = _v3CompClass.component;
                        } else {
                            // not found in foundInV3List
                            _LC.V3.pendingComp.add(this);
                            this.__v3lyteIgnore = true;
                            return;
                        }
                    } else if (this.hasAttribute("lyte-widget") || window.__lyteConfig.isWidgetComponent || ltCf.lyteWidget || ltCf.fromWidgetRender) {
                        //pending widget component;
                        _LC.V3.pendingComp.add(this);
                        this.__v3lyteIgnore = true;
                        return;
                    }
                }
                //v3
                this.actualConstructor();
            }
        }, {
            key: 'doRegistration',
            value: function doRegistration(componentName, customCrmComponent) {
                if (!this.component.constructor.__isRegistered) {
                    if (idleScheduler.tasks.get(componentName) || idleScheduler.currentTask && idleScheduler.currentTask.id === componentName) {
                        // console.log("idleScheduler task handling in component ", componentName);
                        if (idleScheduler.currentTask && idleScheduler.currentTask.id !== componentName) {
                            //   console.log("idleScheduler pending task handling in component ",idleScheduler.currentTask.id);
                            if (Lyte.performance) {
                                var _p1 = performance.now();
                            }
                            var sval = idleScheduler.tasks.get(idleScheduler.currentTask.id);
                            if (sval && idleScheduler.isGenerator(sval.handler)) {
                                var gnxt = sval.handler.next(),
                                    gval;
                                while (gnxt.done == false) {
                                    gval = gnxt.value;
                                    if (typeof gval == "function") {
                                        gval();
                                    }
                                    gnxt = sval.handler.next();
                                }
                                idleScheduler.dequeueTask(idleScheduler.currentTask.id);
                            }
                            if (Lyte.performance) {
                                var _p2 = performance.now();
                                var oldPerf = Lyte.Component.registerPerf[idleScheduler.currentTask.id];
                                Lyte.Component.registerPerf[idleScheduler.currentTask.id] = (oldPerf ? oldPerf : 0) + (_p2 - _p1);
                            }
                        }
                        if (Lyte.performance) {
                            var p1 = performance.now();
                        }
                        var obj = idleScheduler.dequeueTask(componentName);
                        var gen = obj.handler;
                        if (idleScheduler.isGenerator(gen)) {
                            var gnxt = gen.next(),
                                gval;
                            while (gnxt.done == false) {
                                gval = gnxt.value;
                                if (typeof gval == "function") {
                                    gval();
                                }
                                gnxt = gen.next();
                            }
                        }
                        if (Lyte.performance) {
                            var p2 = performance.now();
                            var oldPerf = Lyte.Component.registerPerf[componentName];
                            Lyte.Component.registerPerf[componentName] = (oldPerf ? oldPerf : 0) + (p2 - p1);
                        }
                    } else {
                        if (Lyte.performance) {
                            var p1 = performance.now();
                        }
                        customCrmComponent._registerComponent(componentName, customCrmComponent, customCrmComponent.component._widget);
                        _LC.postRegistration(componentName, customCrmComponent);
                        idleScheduler.dequeueTask(componentName);
                        if (Lyte.performance) {
                            var p2 = performance.now();
                            var oldPerf = Lyte.Component.registerPerf[componentName];
                            Lyte.Component.registerPerf[componentName] = (oldPerf ? oldPerf : 0) + (p2 - p1);
                        }
                    }
                }
            }
        }, {
            key: 'actualConstructor',
            value: function actualConstructor() {
                if (this.hasAttribute("lyte-rendered") || this._ccCalled) {
                    this.__lyteIgnore = true;
                    return;
                } else if (!_LyteComponent.registeredComponents[this.localName]) {
                    this.__lyteIgnore = true;
                    var origClass = _LC._registeredComponents[this.localName];
                    origClass._pendingComponents = origClass._pendingComponents || [];
                    origClass._pendingComponents.push(this);
                    return;
                }
                this.__v3 = true;
                var wdt = _LyteComponent.currentWidget ? _LyteComponent.currentWidget : this._callee ? this._callee.__lyteWidget : undefined;
                // if((!wdt && !_LyteComponent.registeredComponents[this.localName]) || (wdt && (!_LyteComponent.registeredWidgetComponents[wdt] || !_LyteComponent.registeredWidgetComponents[wdt][this.localName]))) {
                // 	return;
                // }
                this.constr = this.constructor;
                // Check this 
                // var widget = this.constr.__widgetName; // is throwing error
                /*disable async function*/
                var widget = this.constructor.__widgetName;
                /*disable async function*/
                var map;
                /*disable async function*/
                if (widget) {
                    /*disable async function*/
                    map = widgetMap;
                    /*disable async function*/
                    window.ss = widgetMap;
                    /*disable async function*/
                    widget = map.get(widget);
                }
                // if(widget) {
                //     widget = widgetMap.get(widget);
                // }
                // if(wdt){
                //     this.constr = _LyteComponent.registeredWidgetComponents[wdt][this.localName]; 
                // }
                // this.constructor.component.compInstances.push(this);
                this.constr.activeInstances++;
                this.constructor.component.activeInstances++;
                var fastRenderIndex = void 0;
                var lytePropAttr = this.attributes._lyteprop;
                lytePropAttr = lytePropAttr ? lytePropAttr.nodeValue : undefined;
                var fastRenderedProp = (fastRenderIndex = lytePropAttr) ? _LC.fRP[fastRenderIndex] : undefined;
                var compInstance = this.component = fastRenderedProp ? fastRenderedProp.component : this.component ? new this.component() : new this.constructor.component();
                compInstance.__isComponent__ = true;
                if (Lyte.getConfig("lazyComponentRegister")) {
                    this.doRegistration(this.localName, this.constructor);
                }
                this._properties = {};
                this.registeredProp = _LC.directive.registeredProp[this.localName];
                // compInstance.methods = {};
                // this._methods = compInstance.methods;
                //ssrcode_start
                compInstance._ssr = this.constructor._ssr;
                //ssrcode_end
                compInstance._config = this.constructor._config;
                //        this.component.data = this.constructor._data ? this.constructor._data() : {};
                var compData = void 0;
                //comment the following two when return cli update is done.
                //ssrcode_start
                if (this.hasAttribute("component-data")) {
                    this._ssrData = JSON.parse(this.getAttribute("component-data"));
                    this.removeAttribute("component-data");
                }
                //ssrcode_end
                var act = compInstance.actions;
                // Object.defineProperty(compInstance,"actions",{
                //     get : function() {
                // 		Lyte.warn("Accessing actions directly is deprecated. Move the required common code from action block to a common function and access it.");
                // 		return act;
                // 	}   
                // });
                if (!fastRenderedProp) {
                    // var _cmpData = {};
                    var _cmpData = {}; //this.$data ? this.$data : {}; //af check
                    compData = compInstance.data = {};
                    var data = this.component.constructor._data ? this.component.constructor._data.apply(compInstance) : {};
                    var def = "default";
                    defProp(_cmpData, '__component__', {
                        value: this,
                        configurable: true,
                        writable: true,
                        enumerable: false
                    });
                    _cmpData.errors = {};
                    compData = compInstance.data = _cmpData;
                    if (_LC.__data.length) {
                        _LC.__data.forEach(function (item) {
                            data = Object.assign(data, item);
                        });
                    }
                    compInstance.__data = data;
                    this._hideAttr = {};
                    var self = this;
                    for (var _key7 in data) {
                        var obj = data[_key7];
                        compData[_key7] = obj[def];
                        if (obj.initialize) {
                            if (typeof obj.initialize == "function") {
                                var promise = obj.initialize.apply(self.component);
                                if (promise) {
                                    compData[_key7] = promise;
                                } else {
                                    _Lyte.error("LC011", _key7, self.tagName);
                                }
                            }
                        }
                        var customDtype;
                        if (Lyte.Transform[obj.type]) {
                            var customDataType = Lyte.Transform[obj.type];
                            if (/^(object|array)$/.test(customDataType.extends) && (customDataType.hasOwnProperty("properties") || customDataType.hasOwnProperty("items"))) {
                                customDtype = true;
                            }
                        }
                        if (/^(object|array)$/.test(obj.type) && obj.watch || customDtype) {
                            Lyte.establishObjectBinding(compData, _key7, false, undefined, undefined, obj.watch ? true : undefined);
                        }
                        if (obj.hasOwnProperty("hideAttr")) {
                            this._hideAttr[_key7] = obj.hideAttr;
                        }
                    }
                    // this.$data = compData;
                    if (this._initMethods) {
                        var _arr = Object.keys(this._initMethods);
                        compData.$methodAttributes = _arr.reduce(function (obj, key) {
                            obj[key] = true;
                            return obj;
                        }, {});
                    }
                    if (this.$data) {
                        var initProperties = this.$data;
                        for (var _key8 in initProperties) {
                            compData[_key8] = initProperties[_key8];
                        }
                    }
                    this.$data = compData;
                    if (this._initProperties) {
                        var _arr2 = Object.keys(this._initProperties).filter(function (ele) {
                            if (!compData.$methodAttributes) {
                                return true;
                            };
                            return !compData.$methodAttributes[ele];
                        });
                        compData.$dataAttributes = _arr2.reduce(function (obj, key) {
                            obj[key] = true;
                            return obj;
                        }, {});
                    }
                    var observed_attributes = this.component.constructor._observedAttributes;
                    if (observed_attributes && this.attributes) {
                        Object.values(this.attributes).forEach(function (value) {
                            if (observed_attributes.includes(_LC.String.toCamelCase(value.name))) {
                                compData.$dataAttributes = compData.$dataAttributes ? compData.$dataAttributes : [];
                                compData.$dataAttributes[_LC.String.toCamelCase(value.name)] = true;
                            }
                        });
                    }
                    observed_attributes = [];
                    compInstance.$dataAttributes = compData.$dataAttributes;
                    compInstance.$methodAttributes = compData.$methodAttributes;
                    if (compInstance.$dataAttributes) {
                        Object.freeze(compInstance.$dataAttributes);
                        Object.freeze(compData.$dataAttributes);
                    }
                    if (compInstance.$methodAttributes) {
                        Object.freeze(compInstance.$methodAttributes);
                        Object.freeze(compData.$methodAttributes);
                    }
                    compInstance.$data = compData;
                    if (window.isLyteWidget) {
                        _LCSV.connect(this);
                    }
                    if (this.constructor._serviceToBeUsed) {
                        for (var serKey in this.constructor._serviceToBeUsed) {
                            var serName = this.constructor._serviceToBeUsed[serKey];
                            if (Lyte.registeredServices.hasOwnProperty(serName)) {
                                this.component[serKey] = new Lyte.registeredServices[serName]();
                            } else {
                                this.__toRemoveLazy = this.__toRemoveLazy || {};
                                var self = this;
                                var id = Lyte.$.requiredServices(serKey, serName, function (serviceData, serviceKey, _sname, servName) {
                                    self.component[serviceKey] = Lyte.$.instantiateService(servName);
                                    var _toRemove = self.__toRemoveLazy[servName];
                                    _toRemove.forEach(function (id) {
                                        Lyte.$.toRemoveFromRequiredServices(id);
                                    });
                                    delete self.__toRemoveLazy[servName];
                                });
                                this.__toRemoveLazy[serName] = this.__toRemoveLazy[serName] || [];
                                this.__toRemoveLazy[serName].push(id);
                            }
                        }
                    }
                    this.initializeMethod(this, this.component.constructor._methods);
                }
                if (compInstance.$node) {
                    for (var key in compInstance.$node) {
                        if (key != "localName") {
                            this[key] = compInstance.$node[key];
                        }
                    }
                }
                compInstance.$node = this;
                for (var propName in _LyteComponent.customPropHandlersList) {
                    this[propName] = _LyteComponent.customPropHandlersList[propName];
                }
                if (this.component && this.component.constructor._template && this.component.constructor._template.widget) {
                    this.__lyteWidget = this.component.constructor._template.widget;
                    var widget = widgetMap.get(this.__lyteWidget);
                    widget ? widget.components.set(this, true) : undefined;
                }
                var _config_flag = void 0;
                if (compInstance._config) {
                    _config_flag = compInstance._config.clientLifeCycleHooks == true || (_typeof(compInstance._config.clientLifeCycleHooks) == 'object' ? compInstance._config.clientLifeCycleHooks.includes('constructor') : false);
                }
                var _overrides = void 0;
                //ssrcode_start
                _overrides = compInstance._ssr ? compInstance._ssr.overrides : undefined;
                //ssrcode_end
                if (!fastRenderedProp) {
                    // this.callback("constructor");
                    this._actions = this._actions ? this._actions : {};
                    this._callee = this._callee || this.getCallee(this.parentNode);
                    if (this._callee && this.constructor.__widgetName) {
                        if (this._callee.constructor.__widgetName != this.constructor.__widgetName) {
                            widget.additionalComps.add(this.parentElement);
                        }
                    }

                    //check if it is called from server || to ssr bind
                    //ssrcode_start
                    if (this._callee && (this._callee.serverCall || this._callee.hasAttribute("server-rendered"))) {
                        this.serverCall = true;
                        if (this._callee._ssrBind) {
                            this._ssrBind = this._callee._ssrBind;
                        }
                    }
                    //ssrcode_end
                    //check if it has ssr contructor for ssr
                    //ssrcode_client              
                    if (_config_flag || !this.hasAttribute('server-rendered')) {
                        if (_overrides && _overrides.constructor && this.serverCall) {
                            _overrides.constructor.apply(this);
                        } else {
                            // this.callback("constructor");
                        }
                    }

                    //checking lyte.attr ytpe and given default value type
                    for (var key in compData) {
                        if ((window.isLyteWidget || window.__lyteEnablePromise) && compData[key] instanceof Promise) {
                            //ask ln
                            continue;
                        }
                        var error = _LC.handleValidation(compData, key, compData[key], compInstance, true);
                        if (error) {
                            compData[key] = undefined;
                        }
                    }
                } else {
                    this._fR = fastRenderedProp;
                    delete _LC.fRP[fastRenderIndex];
                    // _LC.pushFrc(fastRenderIndex);
                }
            }
        }, {
            key: 'getMethods',
            value: function getMethods(arg0) {
                return this.component.getMethods(arg0);
            }
        }, {
            key: 'hasAction',
            value: function hasAction(arg0) {
                return this.component.hasAction(arg0);
            }
        }, {
            key: 'setActions',
            value: function setActions(arg0, arg1) {
                return this.component.setActions(arg0, arg1);
            }
        }, {
            key: 'setMethods',
            value: function setMethods(arg0, arg1) {
                return this.component.setMethods(arg0, arg1);
            }
            // getData(arg0) {
            //     return this.component.getData(arg0);
            // }
            // setData(arg0, arg1 ,options) {
            //     return this.component.setData(arg0, arg1, options);
            // }

        }, {
            key: 'getCallee',
            value: function getCallee(callee) {
                return _LC.getCallee(callee, this);
            }
        }, {
            key: 'afterConnected',
            value: function afterConnected(fastRenderProp, ssrBind) {
                var constr = this.constructor;
                var compConstr = this.component.constructor;
                if (this.constructor._mutable === true || Lyte.getConfig("mutable")) {
                    this.component.data = Lyte.mut(this.component.data);
                }

                //initProperties is used because, we may have cases where the component wouldn't have been registered but 
                //it would be in dom already with some attributes. In those cases we can store the data in _initProperties as key, value.
                //These properties would then be applied to the component, once it gets instantiated. 

                //This is done, in order to solve when on a string value update of an if helper, the binding in the true or false case must be established. 
                //Without this, we won't establish the _properties in the component to the actual Data. 
                if (this.getAttribute("_lyteprop")) {
                    return "";
                }
                var obsattr = compConstr._observedAttributes;
                for (var _i8 = 0; _i8 < obsattr.length; _i8++) {
                    var _key9 = obsattr[_i8];
                    var prop = this.getProperty(_key9);
                    defProp(prop, '__fromComponent', {
                        value: true,
                        enumerable: false
                    });
                }
                this.getProperty("errors");
                var $lg = Lyte.__gl,
                    compInstance = this.component,
                    compData = compInstance.data;
                compData.$lg = $lg;
                if (this._initProperties) {
                    var initProperties = this._initProperties;
                    for (var _key10 in initProperties) {
                        var actVal = void 0;
                        var _field = compInstance.__data[_key10];
                        if (_field && _field.type !== _LC.getDataType(initProperties[_key10]) && (initProperties[_key10] !== undefined || _field.type === "boolean")) {
                            actVal = _LC.typeCast(initProperties[_key10], compInstance.__data[_key10].type);
                        } else {
                            actVal = initProperties[_key10];
                        }
                        // if(field){
                        var error = _LC.handleValidation(compData, _key10, actVal, compInstance, true);
                        if (!error) {
                            compData[_key10] = actVal;
                            var customDtype;
                            if (_field && Lyte.Transform[_field.type]) {
                                var customDataType = Lyte.Transform[_field.type];
                                if (/^(object|array)$/.test(customDataType.extends) && (customDataType.hasOwnProperty("properties") || customDataType.hasOwnProperty("items"))) {
                                    customDtype = true;
                                }
                            }
                            if (_field && /^(object|array)$/.test(_field.type) && _field.watch || customDtype) {
                                Lyte.establishObjectBinding(compData, _key10, undefined, undefined, undefined, _field.watch ? true : undefined);
                            }
                        }
                        // }
                    }
                    this._initProperties = undefined;
                }
                // if(compData.errors && Object.keys(compData.errors).length){
                //     Lyte.error("Error in data passed to component-"+this.component.$node.localName+" for the properties-"+Object.keys(this.component.data.errors).toString());
                // }
                if (this._initMethods) {
                    var initMethods = this._initMethods;
                    for (var _key11 in initMethods) {
                        compInstance.$node._methods[_key11] = initMethods[_key11];
                    }
                    this._initMethods = undefined;
                }
                _LCSV.afterConnect(this);
                var _config_flag = void 0;
                if (compInstance._config) {
                    if (compInstance._config.clientLifeCycleHooks != undefined) {
                        _config_flag = compInstance._config.clientLifeCycleHooks == true || (_typeof(compInstance._config.clientLifeCycleHooks) == 'object' ? compInstance._config.clientLifeCycleHooks.includes('init') : false);
                    }
                }
                var _overrides = void 0;
                //ssrcode_start        
                _overrides = compInstance._ssr ? compInstance._ssr.overrides : undefined;
                //ssrcode_end
                //ssrcode client
                ssrBind && this.cmpBind(fastRenderProp);
                if (window.isLyteWidget) {
                    var errorDetails = this.component.data.errors;
                    if (Object.keys(errorDetails).length) {
                        compData._error = true;
                    }
                }
                if (_config_flag || !this.hasAttribute('server-rendered')) {
                    if (_overrides && _overrides.init && this.serverCall) {
                        _overrides.init.apply(this);
                    } else {
                        this.callback('init');
                    }
                    this.onCallBack('init');
                }
                this.registerYields();
                if (compData.lyteUnbound) {
                    _LC.unbound = true;
                }
                var content = "";
                var unboundBeta = compData.lyteFastRender;

                //to bind in ssr
                //ssrcode_start        
                if (this.hasAttribute("server-rendered")) {
                    return '';
                }
                //ssrcode_end
                if (!unboundBeta) {
                    content = this.renderNodes(compConstr._template, compConstr._dynamicNodes, undefined, undefined, undefined, undefined, compConstr._tC, undefined, true);
                } else {
                    content = this.renderFast(compConstr._dynamicNodes, compConstr._sta, compInstance);
                    requestAnimationFrame(function () {
                        requestAnimationFrame(function () {
                            _LC.callCC();
                        });
                    });
                }
                return content;
            }
        }, {
            key: 'initializeMethod',
            value: function initializeMethod(node, actMethods) {
                var compInstance = void 0;
                if (node.component) {
                    compInstance = node.component;
                } else {
                    compInstance = node;
                    node = compInstance.$node;
                }
                compInstance.methods = {};
                node._methods = compInstance.methods;
                for (var _key12 in actMethods) {
                    compInstance.methods[_key12] = actMethods[_key12];
                }
                // var met = compInstance.methods;
                // Object.defineProperty(compInstance,"methods",{
                //     get : function() {
                // 		Lyte.warn("Accessing methods directly is deprecated. Kindly make use of 'this.executeMethod' Api.");
                // 		return met;
                // 	},
                //     set : function(value){
                //         met = value
                //     }   
                // });
            }
        }, {
            key: 'renderComponent',
            value: function renderComponent(dynNode, preDefObj) {
                var componentName = dynNode.componentName;
                var staticAttrs = dynNode.staticAttrs;
                var constr = LyteComponent._registeredComponents[componentName];
                if (!constr) {
                    return "";
                }
                var compConstr = LyteComponent._registeredComponents[componentName].component;
                var component = new constr.component();
                preDefObj.component = component;
                if (Lyte.getConfig("lazyComponentRegister")) {
                    this.doRegistration(componentName, constr);
                }
                if (this.constructor._mutable === true || Lyte.getConfig("mutable")) {
                    component.data = Lyte.mut({});
                } else {
                    component.data = {};
                }
                var cmpData = LyteComponent.getCmpData(component.data);
                var data = compConstr._data ? compConstr._data.apply(component) : {};
                var def = "default";
                for (var _key13 in data) {
                    cmpData[_key13] = data[_key13][def];
                }
                cmpData.errors = {};
                component.__data = data;
                // if(component.constructor) {
                // 	component.constructor.apply(component);
                // }
                var obsAttrs = LyteComponent._registeredComponents[componentName].component._observedAttributes;
                preDefObj.data = preDefObj.data || {};
                for (var key in staticAttrs) {
                    if (obsAttrs.indexOf(key) !== -1) {
                        preDefObj.data[key] = staticAttrs[key];
                    }
                }
                var initProperties = preDefObj.data;
                if (initProperties) {
                    for (var _key14 in initProperties) {
                        var actVal = void 0;
                        if (component.__data[_key14] && component.__data[_key14].type !== _LC.getDataType(initProperties[_key14]) && (initProperties[_key14] !== undefined || component.__data[_key14].type === "boolean")) {
                            actVal = _LC.typeCast(initProperties[_key14], component.__data[_key14].type);
                        } else {
                            actVal = initProperties[_key14];
                        }
                        var error = _LC.handleValidation(cmpData, _key14, actVal, component);
                        if (!error) {
                            cmpData[_key14] = actVal;
                        }
                    }
                }
                if (true) {
                    component.$node = { "querySelector": noop, "localName": componentName };
                    this.initializeMethod(component, compConstr._methods);
                    if (component.init) {
                        component.init.apply(component);
                    }
                    var initCallbacks = void 0;
                    if (compConstr._callBacks && (initCallbacks = compConstr._callBacks.init)) {
                        for (var _i9 = 0; _i9 < initCallbacks.length; _i9++) {
                            initCallbacks[_i9].value.apply(component);
                        }
                    }
                    preDefObj.unbound = true;
                    delete component.$node.querySelector;
                    if (Lyte.getConfig("lazyComponentRegister") && !LyteComponent._registeredComponents[componentName].component.__isRegistered) {
                        var sval = Lyte.Component.lazyRegisterScheduler.dequeueTask(componentName);
                        if (Lyte.performance) {
                            var p1 = performance.now();
                        }
                        if (sval && idleScheduler.isGenerator(sval.handler)) {
                            var gnxt = sval.handler.next(),
                                gval;
                            while (gnxt.done == false) {
                                gval = gnxt.value;
                                if (typeof gval == "function") {
                                    gval();
                                }
                                gnxt = sval.handler.next();
                            }
                        }
                        if (Lyte.performance) {
                            var p2 = performance.now();
                            var oldPerf = Lyte.Component.registerPerf[componentName];
                            Lyte.Component.registerPerf[componentName] = (oldPerf ? oldPerf : 0) + (p2 - p1);
                        }
                    }
                    return this.renderFast(LyteComponent._registeredComponents[componentName].component._dynamicNodes, LyteComponent._registeredComponents[componentName].component._sta, component, preDefObj);
                }
            }
        }, {
            key: 'renderFast',
            value: function renderFast(dynamicNodes, arr, comp, compPreDef) {
                var _this8 = this;

                var fastRenderIndex;
                var prevComp;
                if (comp) {
                    prevComp = this.component;
                    this.component = comp;
                }
                var compData = LyteComponent.getCmpData(this.component.data);
                var str = "";
                var dynamicCompile = arr;
                var dynamicCompileNodes = arr.cc;
                var removeFirstChar = false;
                for (var i = 0; i < dynamicCompileNodes.length; i++) {
                    if (dynamicCompileNodes[i] != undefined) {
                        var inte = dynamicCompileNodes[i];
                        var dynNode = dynamicNodes[inte];
                        if (dynNode.dynamicValue) {
                            var locVal = _LC.getDD(compData, dynNode.newDynamicValue);
                            locVal = locVal == undefined || locVal == null ? "" : locVal;
                            // str = str + ZSEC.Encoder.encodeForHTML(locVal);
                            str = str + Lyte.Security.escape(locVal);
                        } else if (dynNode.helperInfo) {
                            _LC.ffr = true;
                            var helperVal = this.processHelper({ name: dynNode.helperInfo.name, args: this.processArgs(this, dynNode, [], undefined, undefined, true) }, undefined);
                            _LC.ffr = false;
                            helperVal = helperVal == undefined || helperVal == null ? "" : helperVal;
                            //  str = str + ( (dynNode.helperInfo.name === "unescape") ? helperVal : ZSEC.Encoder.encodeForHTML(helperVal) );
                            str = str + (dynNode.helperInfo.name === "unescape" ? helperVal : Lyte.Security.escape(helperVal));
                        } else if (dynNode.type) {
                            switch (dynNode.type) {
                                case "for":
                                    {
                                        var prevDynamic = dynamicNodes[inte - 1].attr.items;
                                        var items;
                                        if (prevDynamic.dynamicValue) {
                                            items = _LC.getDD(compData, prevDynamic.newDynamicValue);
                                        } else if (prevDynamic.helperInfo) {
                                            items = this.processHelper({ name: prevDynamic.helperInfo.name, args: this.processArgs(this, prevDynamic, [], undefined, undefined, true) }, undefined);
                                        }
                                        var itemKey = dynNode._args.item || "item";
                                        var indexKey = dynNode._args.index || "index";
                                        var renderedStr = "";
                                        if (items && items.length) {
                                            var initialItemValue = compData[itemKey];
                                            var initialIndexValue = compData[indexKey];
                                            for (var indexInd = 0; indexInd < items.length; indexInd++) {
                                                var _item = items[indexInd];
                                                compData[itemKey] = _item;
                                                compData[indexKey] = indexInd;
                                                renderedStr += this.renderFast(dynNode.dynamicNodes, dynNode._sta, undefined, compPreDef);
                                            }
                                            compData[itemKey] = initialItemValue;
                                            compData[indexKey] = initialIndexValue;
                                        }
                                        str += renderedStr;
                                    }
                                    break;
                                case "forIn":
                                    {
                                        var _prevDynamic = dynamicNodes[inte - 1].attr.object;
                                        var object;
                                        if (_prevDynamic.dynamicValue) {
                                            object = _LC.getDD(compData, _prevDynamic.newDynamicValue);
                                        } else if (_prevDynamic.helperInfo) {
                                            object = this.processHelper({ name: _prevDynamic.helperInfo.name, args: this.processArgs(this, _prevDynamic, [], undefined, undefined, true) }, undefined);
                                        }
                                        var valueKey = dynNode._args.value || "value";
                                        var keyKey = dynNode._args.key || "key";
                                        var _renderedStr = "";
                                        var objKeys = void 0;
                                        if (object && (objKeys = Object.keys(object))) {
                                            var initialValueValue = compData[valueKey];
                                            var initialKeyValue = compData[keyKey];
                                            for (var keyIndex = 0; keyIndex < objKeys.length; keyIndex++) {
                                                var _key15 = objKeys[keyIndex];
                                                compData[valueKey] = object[_key15];
                                                compData[keyKey] = _key15;
                                                _renderedStr += this.renderFast(dynNode.dynamicNodes, dynNode._sta, undefined, compPreDef);
                                            }
                                            compData[itemKey] = initialValueValue;
                                            compData[indexKey] = initialKeyValue;
                                        }
                                        str += _renderedStr;
                                    }
                                    break;
                                case "if":
                                case "switch":
                                    {
                                        var _prevDynamic2 = dynamicNodes[inte - 1].attr.value;
                                        var value;
                                        if (_prevDynamic2.dynamicValue) {
                                            value = _LC.getDD(compData, _prevDynamic2.newDynamicValue);
                                        } else if (_prevDynamic2.helperInfo) {
                                            value = this.processHelper({ name: _prevDynamic2.helperInfo.name, args: this.processArgs(this, _prevDynamic2, [], undefined, undefined, true) }, undefined);
                                        }
                                        var currentCaseName;
                                        if (value) {
                                            currentCaseName = dynNode.type === "if" ? "true" : value.toString();
                                        } else {
                                            if (dynNode.type === "if") {
                                                currentCaseName = "false";
                                            } else {
                                                switch (value) {
                                                    case undefined:
                                                        currentCaseName = "undefined";
                                                        break;
                                                    case null:
                                                        currentCaseName = "null";
                                                        break;
                                                    case false:
                                                        currentCaseName = "false";
                                                        break;
                                                    case "":
                                                        currentCaseName = '""';
                                                        break;
                                                }
                                            }
                                        }
                                        var scope = dynNode.cases[currentCaseName];
                                        if (!scope) {
                                            if ((scope = dynNode.default) && scope._sta) {
                                                str += this.renderFast(scope.dynamicNodes, scope._sta, undefined, compPreDef);
                                            }
                                        } else {
                                            while (scope) {
                                                str += this.renderFast(scope.dynamicNodes, scope._sta, undefined, compPreDef);
                                                if (scope.additional) {
                                                    if (scope.additional.next) {
                                                        scope = dynNode.cases[scope.additional.next];
                                                    } else {
                                                        scope = dynNode.default;
                                                    }
                                                } else {
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                    break;
                                case "attr":
                                    {
                                        var nextDynamic = void 0;
                                        var fastRenderProp = void 0;
                                        var dynLength = dynamicNodes.length;
                                        for (var _k = inte + 1; _k < dynLength; _k++) {
                                            var locDyn = dynamicNodes[_k];
                                            if (locDyn.type !== "registerYield" && locDyn.type !== "componentDynamic" && locDyn.type !== "insertYield" && locDyn.type !== "component") {
                                                break;
                                            } else {
                                                if (dynamicNodes[_k].type === "componentDynamic" || dynamicNodes[_k].type === "insertYield" || dynamicNodes[_k].type === "component") {
                                                    if (dynamicNodes[_k].position.toString() == dynamicNodes[inte].position.toString()) {
                                                        if (dynamicNodes[_k].type == "componentDynamic") {
                                                            if (_LyteComponent.registeredComponents[dynamicNodes[_k].componentName]) {
                                                                nextDynamic = dynamicNodes[_k];
                                                                break;
                                                            }
                                                        } else {
                                                            nextDynamic = dynamicNodes[_k];
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        var setAttr = void 0;
                                        if (nextDynamic) {
                                            setAttr = nextDynamic.type !== "component";
                                            fastRenderIndex = _LC.fRC++;
                                            fastRenderProp = _LC.fRP[fastRenderIndex] = { "data": {} };
                                        }
                                        if (!nextDynamic || nextDynamic.type !== "component") {
                                            str = str.substring(0, str.length - 11);
                                        }
                                        var attr = dynNode.attr;
                                        var actionObj = {};
                                        for (var _key16 in attr) {
                                            if (attr[_key16].dynamicValue) {
                                                // let nodeValue = this.get(attr[key].dynamicValue);
                                                var _nodeValue = attr[_key16].newDynamicValue ? _LC.getDD(compData, attr[_key16].newDynamicValue) : this.get(attr[_key16].dynamicValue);

                                                if (fastRenderProp) {
                                                    fastRenderProp.data[attr[_key16].camelCase] = _nodeValue;
                                                    if (typeof _nodeValue == "string" && setAttr) {
                                                        _nodeValue = this.formatValue(_key16, _nodeValue);
                                                        str = str + _nodeValue + " ";
                                                    }
                                                } else {
                                                    _nodeValue = this.formatValue(_key16, _nodeValue);
                                                    str = str + _nodeValue + " ";
                                                }
                                            } else if (attr[_key16].helperInfo) {
                                                if (attr[_key16].helperInfo.name === "action") {
                                                    var actionName = attr[_key16].helperInfo.args[0];
                                                    var boundName = void 0;
                                                    if (actionName.startsWith('"') || actionName.startsWith("'")) {
                                                        boundName = actionName.substring(1, actionName.length - 1);
                                                    } else {
                                                        _Lyte.warn("Deprecation warning. Action name " + actionName + " must be in quotes");
                                                        boundName = actionName;
                                                    }
                                                    var actArgs = this.processArgs(this, attr[_key16], [], "__lyteEvent__", "__lyteNode__");
                                                    var actualAttrName = attr[_key16].globalEvent ? attr[_key16].name : attr[_key16].name.indexOf("-") !== -1 ? attr[_key16].name : attr[_key16].name.substr(2);
                                                    actionObj[actualAttrName] = { "name": boundName, "args": attr[_key16].helperInfo.args, "actArgs": actArgs, "globalEvent": attr[_key16].globalEvent ? true : false, "skipArgProcessing": true };
                                                } else if (attr[_key16].helperInfo.name === "method") {
                                                    var methodsObj = compPreDef ? compPreDef.methods : this.component.methods;
                                                    if (fastRenderProp) {
                                                        var methodFunc;

                                                        (function () {
                                                            var methods = fastRenderProp.methods = fastRenderProp.methods || {};
                                                            var parentComp = compPreDef ? compPreDef.component : _this8.component;
                                                            var actArgs = _this8.processArgs(_this8, attr[_key16], [], "__lyteEvent__", "__lyteNode__");

                                                            methodFunc = function methodFunc() {
                                                                //eslint-disable-line no-loop-func
                                                                var node = this.$node;
                                                                var args = actArgs.slice(1);
                                                                var functionName = actArgs[0];
                                                                var customArgs = Array.from(arguments);
                                                                var mainArgs = args.concat(customArgs);
                                                                return parentComp.$node._methods[functionName].apply(parentComp, mainArgs);
                                                            };

                                                            methods[attr[_key16].camelCase] = methodFunc;
                                                        })();
                                                    }
                                                } else {
                                                    var _nodeValue2 = this.processHelper({ name: attr[_key16].helperInfo.name, args: this.processArgs(this, attr[_key16], [], undefined, undefined, true) }, undefined);
                                                    if (fastRenderProp) {
                                                        fastRenderProp.data[attr[_key16].camelCase] = _nodeValue2;
                                                        if (typeof _nodeValue2 == "string" && setAttr) {
                                                            _nodeValue2 = this.formatValue(_key16, _nodeValue2);
                                                            str = str + _nodeValue2 + " ";
                                                        }
                                                    } else {
                                                        _nodeValue2 = this.formatValue(_key16, _nodeValue2);
                                                        str = str + _nodeValue2 + " ";
                                                    }
                                                }
                                            }
                                        }
                                        if (Object.keys(actionObj).length) {
                                            var locIndex = _LC.fRC++;
                                            str = str + "lyteaction=" + locIndex + " ";
                                            _LC.fRP[locIndex] = actionObj;
                                            actionObj.componentName = this.component.$node.localName || "undefined";
                                            //str = str + "lyteaction=" + ZSEC.Encoder.encodeForHTMLAttribute(JSON.stringify(actionObj)) + " ";
                                        }
                                        if (fastRenderProp && nextDynamic.type !== "component" && nextDynamic.type !== "insertYield") {
                                            str = str + "_lyteprop=" + fastRenderIndex + " ";
                                        }
                                        if (!dynNode.attrHandling) {
                                            dynamicCompile[i + 1] = dynamicCompile[i + 1].substr(1);
                                            dynNode.attrHandling = true;
                                        }
                                    }
                                    break;
                                case "insertYield":
                                    {
                                        var preDefObj = fastRenderIndex !== undefined ? _LC.fRP[fastRenderIndex] : undefined;
                                        if (preDefObj) {
                                            delete _LC.fRP[fastRenderIndex];
                                            // _LC.pushFrc(fastRenderIndex);
                                        }
                                        fastRenderIndex = undefined;
                                        var yieldObj = void 0;
                                        var yieldName = dynNode.yieldName || preDefObj.data.yieldName;
                                        if (preDefObj) {
                                            delete preDefObj.data.yieldName;
                                        }
                                        var yieldCallee = void 0;
                                        if (!compPreDef || !compPreDef.yields) {
                                            yieldObj = this._yields[yieldName];
                                            if (yieldObj) {
                                                yieldCallee = yieldObj._callee;
                                            } else {
                                                break;
                                            }
                                        } else {
                                            yieldObj = compPreDef.yields[yieldName];
                                            yieldCallee = compPreDef._yieldCallee;
                                        }
                                        if (yieldObj) {
                                            var parentScope = void 0;
                                            var locComp = void 0;
                                            if (yieldCallee instanceof HTMLElement) {
                                                parentScope = yieldCallee;
                                            } else {
                                                parentScope = this;
                                                locComp = this.component;
                                                this.component = yieldCallee.component;
                                            }
                                            var contextSwitch = {};
                                            var contextSwitchArray = [];
                                            var psCmpData = LyteComponent.getCmpData(parentScope.component.data);
                                            if (yieldObj._cx) {
                                                _LC.adCx(yieldObj, contextSwitchArray);
                                            }
                                            if (preDefObj) {
                                                for (var key in preDefObj.data) {
                                                    contextSwitch[key] = psCmpData[key];
                                                    psCmpData[key] = preDefObj.data[key];
                                                }
                                            }
                                            var componentScope = parentScope.component;
                                            if (prevComp && prevComp.$node == yieldCallee) {
                                                componentScope = prevComp;
                                            }
                                            // if(componentScope == this.component) {
                                            //     componentScope = prevComp;
                                            // }
                                            str = str + parentScope.renderFast(yieldObj.dynamicNodes || yieldObj._dynamicNodes, yieldObj._sta, componentScope, yieldCallee);
                                            for (var _key17 in contextSwitch) {
                                                psCmpData[_key17] = contextSwitch[_key17];
                                            }
                                            if (yieldObj._cx) {
                                                _LC.rmCx(yieldObj, contextSwitchArray);
                                            }
                                            if (locComp) {
                                                parentScope.component = locComp;
                                            }
                                        }
                                        //str = str + this.renderComponent(dynNode, preDefObj, compData);
                                    }
                                    break;
                                case "component":
                                    {
                                        if (fastRenderIndex !== undefined) {
                                            var _preDefObj = _LC.fRP[fastRenderIndex];
                                            var componentName = _preDefObj.data.componentName;
                                            if (componentName) {
                                                if (_LyteComponent.registeredComponents[componentName]) {
                                                    str = str + "<" + componentName + (_Lyte.isWidgetBuild ? " lyte-widget " : "") + " _lyteprop=" + fastRenderIndex + ">";
                                                    fastRenderIndex = undefined;
                                                    str = str + this.renderComponent({ "componentName": componentName }, _preDefObj, compData);
                                                    str = str + "</" + componentName + ">";
                                                } else {
                                                    str = str + "component not registered";
                                                    // Handle case where component has not been registered yet. 
                                                }
                                            }
                                        }
                                    }
                                    break;
                                case "componentDynamic":
                                    {
                                        var _preDefObj2 = fastRenderIndex !== undefined ? _LC.fRP[fastRenderIndex] : {};
                                        fastRenderIndex = undefined;
                                        str = str + this.renderComponent(dynNode, _preDefObj2, compData);
                                    }
                                    break;
                                case "registerYield":
                                    {
                                        var _preDefObj3 = void 0;
                                        if (fastRenderIndex !== undefined) {
                                            _preDefObj3 = _LC.fRP[fastRenderIndex];
                                        } else {
                                            fastRenderIndex = _LC.fRC++;
                                            _preDefObj3 = _LC.fRP[fastRenderIndex] = {};
                                        }
                                        _preDefObj3.yields = _preDefObj3.yields || {};
                                        _preDefObj3.yields[dynNode._args["yield-name"]] = dynNode;
                                        if (!_preDefObj3._yieldCallee) {
                                            _preDefObj3._yieldCallee = compPreDef ? compPreDef : { "component": this.component };
                                        }
                                    }
                            }
                        } else {
                            str = str + dynamicCompile[i];
                        }
                    } else {
                        str = str + dynamicCompile[i];
                    }
                }
                if (comp) {
                    this.component = prevComp;
                }
                return str;
            }
        }, {
            key: 'formatValue',
            value: function formatValue(key, nodeValue) {
                var type = typeof nodeValue === 'undefined' ? 'undefined' : _typeof(nodeValue);
                if (nodeValue === "") {
                    type = "undefined";
                }
                var retVal = void 0;
                var isSpecialAttr = key == "src" || key == "href";
                switch (type) {
                    case "boolean":
                        return nodeValue ? key : "";
                    case "object":
                        retVal = typeof Record != "undefined" && nodeValue instanceof Record ? JSON.stringify(nodeValue.$.toJSON()) : JSON.stringify(nodeValue);
                        // return key + "=" + (isSpecialAttr ? retVal : ZSEC.Encoder.encodeForHTMLAttribute(retVal));
                        return key + "=\"" + (isSpecialAttr ? retVal : Lyte.Security.escape(retVal)) + "\"";
                    case "undefined":
                        return key;
                    default:
                        {
                            // return key + "=" + (isSpecialAttr ? nodeValue : ZSEC.Encoder.encodeForHTMLAttribute(nodeValue) );
                            return key + "=\"" + (isSpecialAttr ? nodeValue : Lyte.Security.escape(nodeValue)) + "\"";
                        }
                }
            }
            //ssrcode_start

        }, {
            key: 'bindServerData',
            value: function bindServerData() {
                if (!this._ssrData) {
                    return;
                }
                var data = this._ssrData,
                    dynamicNodes = this.constructor._dynamicNodes;
                var newData = LyteComponent.sendtoclient.call(this, data, false, this.component.__data);
                if (!data.bindIds) {
                    return;
                }
                var bindIds = data.bindIds.value;
                delete data.bindIds;
                var cmpData = LyteComponent.getCmpData(this.component.data);
                Object.assign(cmpData, newData);
                // this.removeAttribute( "component-data" );
                var currentProps = {},
                    helpers = {},
                    plholder = {},
                    pbind = {},
                    toRemoveTextNodes = [];
                // let pre_dynamicNodes;
                for (var _i10 = 0; _i10 < bindIds.length; _i10++) {
                    var prop = bindIds[_i10],
                        node = void 0,
                        _obj4 = void 0;
                    // console.log(i, prop);
                    // if(!dynamicNodes){
                    //     dynamicNodes = pre_dynamicNodes;
                    // }
                    // if(bindIds.length !== 149){
                    //     debugger
                    // }
                    if (prop._helperId && helpers[prop._helperId]) {
                        dynamicNodes = helpers[prop._helperId]._dN;
                    } else {
                        dynamicNodes = this.constructor._dynamicNodes;
                    }
                    if (prop.type == "4C") {
                        node = _LC.tDiv.content.querySelector("[bindId='" + prop._helperId + "'");
                        var childNodes = Array.from(this.querySelectorAll("[forId='" + prop.forId + "'")),
                            _helpers = [];
                        if (childNodes.length) {
                            for (var _k2 = 0; _k2 < childNodes.length; _k2++) {
                                var nd = childNodes[_k2],
                                    idx = _k2;
                                if (nd.localName == "text") {
                                    if (nd.hasAttribute("placeholderid")) {
                                        childNodes[idx] = nd.previousSibling;
                                        _helpers.push(nd.previousSibling._helper);
                                        // node._helpers[ prop.forIndex ] = node._helpers[ prop.forIndex ] ? node._helpers[ prop.forIndex ] : [];
                                        // node._helpers[ prop.forIndex ].push(nd.previousSibling._helper);
                                    } else {
                                        childNodes[idx] = nd.nextSibling;
                                    }
                                    if (!nd.hasAttribute("bindid") && !nd.hasAttribute("placeholderid")) {
                                        toRemoveTextNodes.push(nd);
                                    }
                                }
                            }
                            node._forContent[prop.forIndex] = node._forContent[prop.forIndex] ? node._forContent[prop.forIndex] : [];
                            node._forContent[prop.forIndex] = node._forContent[prop.forIndex].concat(childNodes);
                        }
                        // node._items[ prop.forIndex ] = node._items[ prop.forIndex ] ? node._items[ prop.forIndex ] : {"_dynamicProperty" : {}, "itemProperty" : {}, "indexProperty": {}, "_cx" : { "type" : "for", "node" : node } };
                        node._helpers[prop.forIndex] = node._helpers[prop.forIndex] ? node._helpers[prop.forIndex] : [];
                        for (var p = 0; p < _helpers.length; p++) {
                            var _h = _helpers[p];
                            node._helpers[prop.forIndex].push(_h);
                        }
                        //   pre_dynamicNodes = dynamicNodes;
                        // dynamicNodes = this.constructor._dynamicNodes;
                        if (prop._item) {
                            var cprop = currentProps[prop._item],
                                oldProp = undefined;
                            if (cprop && cprop.helperId == prop._helperId) {
                                if (--cprop.count == 0) {
                                    oldProp = cprop.prevProp;
                                    delete currentProps[prop._item];
                                    if (oldProp) {
                                        cmpData[prop._item] = oldProp.data;
                                    }
                                    this._properties[prop._item] = oldProp;
                                } else {
                                    cmpData[prop._item] = node._currentItems[prop.forIndex + 1];
                                    var _nItmObj = {};
                                    _nItmObj._cx = {
                                        type: "for",
                                        itemValue: prop._item,
                                        indexValue: prop._index,
                                        itemIndex: prop.forIndex + 1,
                                        node: helpers[prop._helperId].node.ownerElement
                                    };
                                    _nItmObj._dynamicProperty = {};
                                    node._items.push(_nItmObj);
                                }
                                var _itmObj = node._items[prop.forIndex];
                                _itmObj.itemProperty = this.getProperty(prop._item);
                                _itmObj.indexProperty = this.getProperty(prop._index);
                            }
                        }
                        if (prop._index) {
                            var cprop = currentProps[prop._index],
                                oldProp = undefined;
                            if (cprop && cprop.helperId == prop._helperId) {
                                if (--cprop.count == 0) {
                                    oldProp = cprop.prevProp;
                                    delete currentProps[prop._index];
                                    if (oldProp) {
                                        cmpData[prop._index] = oldProp.data;
                                    }
                                    this._properties[prop._index] = oldProp;
                                } else {
                                    cmpData[prop._index] = prop.forIndex + 1;
                                }
                            }
                        }
                        if (prop._key) {
                            var cprop = currentProps[prop._key],
                                oldProp = undefined;
                            if (cprop && cprop.helperId == prop._helperId) {
                                if (--cprop.count == 0) {
                                    oldProp = cprop.prevProp;
                                    delete currentProps[prop._key];
                                    if (oldProp) {
                                        cmpData[prop._key] = oldProp.data;
                                    }
                                    this._properties[prop._key] = oldProp;
                                } else {
                                    cmpData[prop._key] = node._keysArray[node._keysArray.length - cprop.count];
                                }
                                // node._items = node._items || {};
                                // var _iObj = node._items[ prop.forIndex ] = node._items[ prop.forIndex ] || {};
                                // _iObj._cx = {
                                //     type: "forIn",
                                //     itemValue: prop._value,
                                //     keyValue: prop._key,
                                //     itemIndex: prop.forIndex,
                                //     node: helpers[prop._helperId].node.ownerElement,
                                // };
                                // node._items[ prop.forIndex ] = _iObj; 
                            }
                        }
                        if (prop._value) {
                            var cprop = currentProps[prop._value],
                                oldProp = undefined;
                            if (cprop && cprop.helperId == prop._helperId) {
                                if (--cprop.count == 0) {
                                    oldProp = cprop.prevProp;
                                    delete currentProps[prop._value];
                                    if (oldProp) {
                                        cmpData[prop._value] = oldProp.data;
                                    }
                                } else {
                                    var nextKey = node._keysArray[node._keysArray.length - cprop.count];
                                    cmpData[prop._value] = node._currentObject[nextKey];
                                    var _nItmObj = {};
                                    _nItmObj._cx = {
                                        type: "forIn",
                                        itemValue: prop._value,
                                        keyValue: prop._key,
                                        itemIndex: nextKey,
                                        node: helpers[prop._helperId].node.ownerElement
                                    };
                                    _nItmObj._dynamicProperty = {};
                                    node._items[nextKey] = _nItmObj;
                                }
                                var _itmObj = node._items[prop.forIndex];
                                _itmObj.itemProperty = this.getProperty(prop._value);
                                node._propBindingObject[prop.forIndex] = _itmObj.itemProperty;
                                if (cprop.count == 0) {
                                    node._attributes.object._bindings.add(node._propBindingObject);
                                    this._properties[prop._value] = oldProp;
                                }
                                // _itmObj.indexProperty = this.getProperty(prop._index);    
                            }
                        }
                        for (var pkey in currentProps) {
                            if (currentProps[pkey].helperId == prop._helperId) {
                                this._properties[pkey] = {};
                            }
                        }
                        // let t = this.querySelector( "[forId='" + prop.forId + "'" )
                        // t?t.parentNode.removeChild(t):t=null;
                        // if(childNodes){
                        //     for (let i = childNodes.length - 1; i >= 0; i--) {
                        //         if (childNodes[i].getAttribute("forId") && !childNodes[i].getAttribute("bindId")) {
                        //             childNodes[i].parentNode.removeChild(childNodes[i]); 
                        //         }
                        //     }
                        // }
                        continue;
                    }

                    if (prop.type == "A1") {
                        var isCustom = void 0;
                        node = this.querySelector("[" + prop.id + "='" + prop.id + "'");
                        node._boundEvents = node._boundEvents || {};
                        node._attributeDetails = node._attributeDetails || {};
                        _obj4 = {
                            "name": prop.boundName,
                            "args": prop.args
                        };
                        node._boundEvents[prop.actionName] = _obj4;
                        if (prop.event.indexOf("-") != -1) {
                            isCustom = true;
                        }
                        Lyte.Component.registeredHelpers.action.call(this, node, prop.event, isCustom, _obj4);
                        node._attributeDetails[prop.event] = dynamicNodes[prop.idx].attr[prop.event];
                        //continue;
                    }

                    if (prop.type == "M2") {
                        node = this.querySelector("[" + prop.id + "='" + prop.id + "'");
                        node._attributeDetails = node._attributeDetails || {};
                        node._initMethods = node._initMethods || {};
                        node._attributeDetails[prop.actualName] = dynamicNodes[prop.idx].attr[prop.actualName];
                        prop.node.ownerElement = node;
                        prop.node.helperValue = prop.args;
                        node._callee = this;
                        prop.node._callee = this;
                        Lyte.Component.registeredHelpers.method.call(this, this, prop.node, prop.args.args[0]);
                        node._removedAttributes = prop.node;
                        //continue;
                    }

                    // if( prop._forType && prop.idx && ( prop._forType == "for" || prop._forType == "forIn" ) && (!prop.isTemplate || prop.nested)){
                    //     this.bindServerFor( prop, dynamicNodes[ prop.idx + 1 ], bindIds, i ,plholder,pbind,helpers, toRemoveTextNodes);
                    //     continue;
                    // }

                    if (prop.type == "6") {
                        node = this.querySelector("template[bindId='" + prop.id + "'");
                        node._callee = this;
                        node._dynamicProperty = {};
                        node._helpers = [];
                        node._dynamicNodes = dynamicNodes[prop.idx].dynamicNodes;
                        node._currentComponent = node.getAttribute("component-name");
                        node._renderedComponent = node._renderedComponent ? node._renderedComponent : {};
                        node._renderedComponent[node._currentComponent] = this.querySelector(node._currentComponent + "[bindId='" + prop.id + "']");
                        helpers[prop.id] = prop;
                        helpers[prop.id]._dN = dynamicNodes[prop.idx].dynamicNodes;
                        //continue;
                    }
                    if (prop.type == "2") {
                        node = this.querySelector("[bindId='" + prop.id + "'");
                        toRemoveTextNodes.push(node);
                        node = node.nextSibling;
                        if (prop.syntax) {
                            node.syntaxValue = prop.syntax;
                        } else if (prop.helperValue) {
                            node.helperValue = prop.helperValue;
                        }
                        if (prop._dynamicProps && prop._dynamicProps.length > 1 && prop._mP) {
                            node._multipleProperty = node._multipleProperty || [];
                            node._multipleProperty.push({ index: prop._mP.index, dynamicValues: prop._dynamicProps, actProp: this.getProperty(prop._dynamicProps[0].name) });
                        }
                        if (node.nextSibling && node.nextSibling.localName == "textend") {
                            toRemoveTextNodes.push(node.nextSibling);
                        }
                        // this.querySelector( "[bindId='" + prop.id + "'" ).remove();
                    }

                    if (prop.type == "3") {
                        // let dynamicNodes;
                        // if( prop._forType && prop._helperId ){
                        //     dynamicNodes = _LC.tDiv.content.querySelector( "[bindId='" + prop._helperId + "'" )._dynamicNodes;
                        // }else if( prop._yield ){
                        //     dynamicNodes = this._yields[ this.querySelector( "[helperId='" + prop._helperId + "'" ).getAttribute('yield-name') ]._dynamicNodes;
                        // }
                        if (prop.isTemplate) {
                            var _tDiv = _LC.tDiv.content.querySelector("[bindId='" + prop.id + "'");
                            if (prop._type != "7" || prop._type == "7" && !_tDiv) {
                                node = this.getServerTemplates(prop, dynamicNodes, plholder, helpers, toRemoveTextNodes);
                            } else {
                                node = _tDiv;
                            }
                        } else {
                            node = this.querySelector("[bindId='" + prop.id + "'");
                        }
                        _obj4 = prop.node;

                        if (prop.helperValue) {
                            _obj4.helperValue = prop.helperValue;
                        } else {
                            _obj4.syntaxValue = prop.syntax;
                        }
                        _obj4.ownerElement = node;
                        _obj4._callee = this;

                        node._callee = this;
                        if (prop._type == "4") {
                            if (prop._item) {
                                currentProps[prop._item] = { helperId: prop.id, count: prop.len, prevProp: this._properties[prop._item], data: cmpData[prop._item] };
                            }
                            if (prop._index) {
                                currentProps[prop._index] = { helperId: prop.id, count: prop.len, prevProp: this._properties[prop._index], data: cmpData[prop._index] };
                            }
                            helpers[prop.id] = prop;
                            helpers[prop.id]._dN = node._dynamicNodes;
                        }
                        if (prop._type == "5") {
                            if (prop._key) {
                                currentProps[prop._key] = { helperId: prop.id, count: prop.len, prevProp: this._properties[prop._key], data: cmpData[prop._key] };
                            }
                            if (prop._value) {
                                currentProps[prop._value] = { helperId: prop.id, count: prop.len, prevProp: this._properties[prop._value], data: cmpData[prop._value] };
                            }
                            helpers[prop.id] = prop;
                            helpers[prop.id]._dN = node._dynamicNodes;
                        }
                        if (prop.isTemplate && /^(7|8)$/.test(prop._type) && prop._syntax) {

                            var helperNode = void 0;
                            if (prop._yield) {
                                helperNode = this.querySelector("[bindId='" + prop._helperId + "'");
                            } else {
                                helperNode = _LC.tDiv.content.querySelector("[bindId='" + prop._helperId + "'");
                            }
                            if (!/^(4|5)$/.test(helpers[prop._helperId]._type)) {
                                helperNode._dynamicProperty = helperNode._dynamicProperty || {};
                                helperNode._dynamicProperty[prop.syntax] = helperNode._dynamicProperty[prop.syntax] || [];
                                helperNode._dynamicProperty[prop.syntax].push(_obj4);
                                helperNode._helpers = helperNode._helpers || [];
                                helperNode._helpers.push(node);
                            }
                        }
                        if (prop._aD) {
                            node._attributeDetails = node._attributeDetails || {};
                            node._removedAttributes = node._removedAttributes || {};
                            node._attributeDetails[prop._aD.name] = prop._aD;
                            node._removedAttributes[prop._aD.name] = _obj4;
                            if (node.hasAttribute("server-rendered") && node._ssrData.hasOwnProperty(prop._aD.camelCase) && node._ssrData[prop._aD.camelCase].fP) {
                                var nData = LyteComponent.getCmpData(node.component.data);
                                nData[prop._aD.camelCase] = _LC.getDD(cmpData, prop._aD.newDynamicValue);
                            }
                        }
                        if (prop.isTemplate || !prop.nested) {
                            node = _obj4;
                        }
                    }

                    if (prop.type == "7" || prop.type == "8") {
                        node = _LC.tDiv.content.querySelector("[bindId='" + prop.id + "'");
                        this.bindServerIf(prop, dynamicNodes[prop.idx], node, pbind);
                        // pre_dynamicNodes = dynamicNodes;
                        // if(prop.type == "if"){
                        //     if(dynamicNodes[prop.idx].cases.hasOwnProperty(prop.case)){
                        //         dynamicNodes = dynamicNodes[prop.idx].cases[prop.case].dynamicNodes;
                        //     }
                        // }
                        // else{
                        //     if(dynamicNodes[prop.idx].cases.hasOwnProperty(prop.case)){
                        //         dynamicNodes = dynamicNodes[prop.idx].cases[prop.case].dynamicNodes;
                        //     }
                        //     else{
                        //         dynamicNodes = dynamicNodes[prop.idx].default.dynamicNodes;
                        //     }
                        // }
                        helpers[prop.id] = prop;
                        if (node._cases[prop.case]) {
                            helpers[prop.id]._dN = node._cases[prop.case].dynamicNodes;
                        } else if (node._default && prop.type == "8") {
                            helpers[prop.id]._dN = node._default.dynamicNodes;
                        }

                        //continue;
                    }

                    if (prop.type == "9") {
                        //
                        node = this.querySelector("[bindId='" + prop.id + "'");
                        var dynamicNode = dynamicNodes[prop.idx];
                        node._dynamicNodes = dynamicNode.dynamicNodes;
                        helpers[prop.id] = prop;
                        helpers[prop.id]._dN = node._dynamicNodes;
                        node._ht = dynamicNode._ht;
                        node._sta = dynamicNode._sta;
                        node._callee = this;
                        //continue;
                    }

                    if (prop.type == "10") {
                        // 
                        node = this.querySelector("[bindid='" + prop.id + "'");
                        node._callee = this;
                        node.component = {};
                        node.component.data = {};
                        defProp(node.component.data, "__component__", {
                            value: node,
                            configurable: true,
                            writable: true,
                            enumerable: false
                        });
                        var _dynamicNode = dynamicNodes[prop.idx];
                        node._dynamicNodes = _dynamicNode._dynamicNodes;
                        node._dynamicProperty = node._dynamicProperty || {};
                        node._properties = {};
                        if (!this._yields) {
                            this.registerYields();
                        }
                        node._registerYield = this._yields[node.getAttribute('yield-name')];
                        node._properties = prop.properties;
                        //this.querySelector( ( "[is='yield'][yield-name='" + node.getAttribute('yield-name') + "'" ));
                        //continue;
                    }
                    if (prop.type == "1") {
                        // 
                        node = this.querySelector("[bindid='" + prop.id + "'");
                        node._callee = this;
                        //continue;
                    }
                    //node._attributeDetails =  node._attributeDetails || {};
                    // node._removedAttributes = node._removedAttributes || {items : prop.node} // 
                    node._callee = this;
                    if (prop._dynamicProps) {
                        for (var y = 0; y < prop._dynamicProps.length; y++) {
                            var itm = prop._dynamicProps[y];
                            this.bindServerNode(prop, node, itm.name, helpers, itm.nested);
                        }
                    } else {
                        this.bindServerNode(prop, node, undefined, helpers);
                    }
                    dynamicNodes = this.constructor._dynamicNodes;
                }
                currentProps = undefined, helpers = undefined;
                toRemoveTextNodes.forEach(function (nd) {
                    nd.remove();
                });
            }
        }, {
            key: 'bindServerNode',
            value: function bindServerNode(prop, node, syntax, helpers, nested) {
                var actProperty = void 0;
                if (syntax || prop.syntax) {
                    actProperty = this.getProperty(syntax || prop.syntax);
                }
                if (prop.isTemplate && (prop._type == "4" || prop._type == "5")) {
                    if (actProperty && !actProperty._forHelpers) {
                        makeSet(actProperty, "_forHelpers");
                    }
                    node.ownerElement._actualBinding = actProperty;
                    node.ownerElement._attributeDetails = prop.attributeDetails;
                    var _dynamicNodes = node.ownerElement._dynamicNodes;
                    actProperty ? actProperty._forHelpers.add(node.ownerElement) : undefined;
                    var _node = node.ownerElement,
                        item;
                    var _cmpdata = this.component.data;
                    var _key = prop._type == "4" ? prop._index : prop._key;
                    var _val = prop._type == "4" ? prop._item : prop._value;
                    // if(prop._helperId && prop.hasOwnProperty("_forIndex")){
                    //     let lastNode =  _LC.tDiv.content.querySelector( "[bindId='" + prop._helperId + "'" );
                    //     let index = _cmpdata[lastNode.getAttribute("index")]+=1;
                    //     item = lastNode._attributes["items"][_cmpdata[lastNode.getAttribute("index")]];
                    //     if(prop._type == "for"){
                    //         if(_key){
                    //             _cmpdata[_key] = prop._forIndex;
                    //         }
                    //         if(_val){
                    //             _cmpdata[_val] = this.getData(prop.syntax)[_cmpdata[prop._index]];
                    //         }
                    //     }
                    //     else if(prop._type == "forIn"){

                    //     };
                    //     // _cmpdata[lastNode.getAttribute("item")] = item;
                    //     // _cmpdata[prop._index] = this.getData(prop._index) || -1;
                    //     // _cmpdata[prop._index] +=1;
                    //     // _cmpdata[_val] = this.getData(prop.syntax)[_cmpdata[_val]]
                    // }
                    // else{
                    if (prop._type == "4") {
                        // _node._attributes["items"] = this.getData(prop.syntax);
                        if (_key) {
                            _cmpdata[_key] = 0;
                        }
                        if (_val) {
                            _cmpdata[_val] = _node._attributes.items ? _node._attributes.items[0] : undefined;
                        }
                        node.ownerElement._items = node.ownerElement._items || [];
                        var _obj = {};
                        _obj._cx = {
                            itemIndex: 0,
                            type: "for",
                            itemValue: _val,
                            indexValue: _key,
                            node: node.ownerElement
                        };
                        _obj._dynamicProperty = {};
                        node.ownerElement._items.push(_obj);
                    } else if (prop._type == "5") {
                        var fKey = Object.keys(_node._attributes.object)[0];
                        if (_key) {
                            _cmpdata[_key] = fKey;
                        }
                        if (_val) {
                            _cmpdata[_val] = _node._attributes.object ? _node._attributes.object[fKey] : undefined;
                        }
                        node.ownerElement._items = node.ownerElement._items || {};
                        var _obj = {};
                        _obj._cx = {
                            itemIndex: fKey,
                            type: "forIn",
                            itemValue: _val,
                            keyValue: _key,
                            node: node.ownerElement
                        };
                        _obj._dynamicProperty = {};
                        node.ownerElement._items[fKey] = _obj;
                    }
                    // }
                    // _LC.establishSelectedBinding(actProperty,this.component.data,this);
                    // if(!actProperty._dynamicNodes){
                    //     makeArray( actProperty, "_dynamicNodes" );
                    // }
                    // actProperty._dynamicNodes.push( node );
                    // return;
                }
                if (prop._forType) {
                    var ownerEle = node;
                    if (node.nodeType == 2) {
                        ownerEle = node.ownerElement;
                    }
                    if (prop._forType == "4") {
                        ownerEle._cx = {
                            itemIndex: prop._forIndex,
                            type: "for",
                            itemValue: helpers[prop._helperId]._item,
                            indexValue: helpers[prop._helperId]._index,
                            node: _LC.tDiv.content.querySelector("[bindId='" + prop._helperId + "'")
                        };
                    }
                    if (prop._forType == "5") {
                        ownerEle._cx = {
                            itemIndex: prop._forIndex,
                            type: "5",
                            itemValue: helpers[prop._helperId]._value,
                            keyValue: helpers[prop._helperId]._key,
                            node: _LC.tDiv.content.querySelector("[bindId='" + prop._helperId + "'")
                        };
                    }
                }
                if (prop._yield) {
                    var helperNode = this.querySelector("[helperId='" + prop._helperId + "'");
                    helperNode._dynamicProperty = helperNode._dynamicProperty || {};
                    helperNode._dynamicProperty[prop.syntax] = helperNode._dynamicProperty[prop.syntax] || [];
                    helperNode._dynamicProperty[prop.syntax].push(node);
                    if (actProperty) {
                        makeSet(actProperty, "_helperNodes");
                        node.ownerElement._cx = { node: helperNode };
                        actProperty._helperNodes.add(helperNode);
                    }
                } else if (prop.isTemplate && nested) {
                    var _helperNode = _LC.tDiv.content.querySelector("[bindId='" + prop._helperId + "'"),
                        dynamicNode = void 0;
                    if (_helperNode.hasOwnProperty("_currentCase")) {
                        var pObj = helpers[prop._helperId];
                        if (pObj.case !== undefined && _helperNode._cases.hasOwnProperty(pObj.case)) {
                            dynamicNode = _helperNode._cases[pObj.case].dynamicNodes[prop.idx + 1];
                        } else {
                            dynamicNode = _helperNode._default.dynamicNodes[prop.idx + 1];
                        }
                        node._cases = dynamicNode ? dynamicNode.cases : _helperNode._cases;
                        node._default = dynamicNode ? dynamicNode.default : _helperNode._default;

                        _helperNode._helpers = _helperNode._helpers || [];
                        _helperNode._helpers.push(node.ownerElement ? node.ownerElement : node);

                        if (prop._helperId) {
                            if (_helperNode._dynamicProperty) {
                                if (prop.type == "attr") {
                                    _helperNode._dynamicProperty[syntax] = _helperNode._dynamicProperty[syntax] || [];
                                    _helperNode._dynamicProperty[syntax].push(prop.node);
                                } else {
                                    _helperNode._dynamicProperty[prop._syntax] = _helperNode._dynamicProperty[prop._syntax] || []; //
                                    _helperNode._dynamicProperty[prop._syntax].push(node);
                                }
                            }
                            if (_helperNode._items) {
                                var dI = _helperNode._items[prop._forIndex];
                                if (dI && dI._dynamicProperty) {
                                    dI._dynamicProperty[prop._syntax] = dI._dynamicProperty[prop._syntax] || [];
                                    dI._dynamicProperty[prop._syntax].push(node);
                                }
                            }
                        }
                        if (actProperty) {
                            makeSet(actProperty, "_helperNodes");
                            actProperty._helperNodes.add(_helperNode);
                        }
                    }
                } else if (nested && prop._helperId) {
                    var _helperNode2 = _LC.tDiv.content.querySelector("[bindId='" + prop._helperId + "'");

                    if (_helperNode2._dynamicProperty) {
                        if (prop.type == "3") {
                            _helperNode2._dynamicProperty[syntax] = _helperNode2._dynamicProperty[syntax] || [];
                            _helperNode2._dynamicProperty[syntax].push(prop.node);
                        } else {
                            _helperNode2._dynamicProperty[prop._syntax] = _helperNode2._dynamicProperty[prop._syntax] || []; //
                            _helperNode2._dynamicProperty[prop._syntax].push(node);
                        }
                    }
                    if (_helperNode2._items) {
                        var dI = _helperNode2._items[prop._forIndex];
                        if (dI && dI._dynamicProperty) {
                            dI._dynamicProperty[prop._syntax] = dI._dynamicProperty[prop._syntax] || [];
                            dI._dynamicProperty[prop._syntax].push(node);
                        }
                    }
                    if (actProperty) {
                        makeSet(actProperty, "_helperNodes");
                        actProperty._helperNodes.add(_helperNode2);
                    }
                } else {
                    if (actProperty) {
                        makeArray(actProperty, "_dynamicNodes");
                        actProperty._dynamicNodes.push(node);
                    }
                }
                if (node.nodeName == 'LYTE-YIELD') {
                    if (!node.component) {
                        node.component = {};
                        node.component.data = {};
                        defProp(node.component.data, "__component__", {
                            value: node,
                            configurable: true,
                            writable: true,
                            enumerable: false
                        });
                        node.properties = {};
                    }
                    var nData = LyteComponent.getCmpData(node.component.data);
                    if (prop.helperValue) {
                        nData[prop.node.nodeName] = node.getAttribute(prop.node.nodeName);
                    } else if (this.component.data.hasOwnProperty(prop.syntax)) {
                        nData[prop.node.nodeName] = this.getData(prop.syntax);
                    }
                }
                if (actProperty) {
                    _LC.establishSelectedBinding(actProperty, this.component.data, this, prop);
                }
            }
        }, {
            key: 'getServerTemplates',
            value: function getServerTemplates(prop, dynamicNodes, plholder, helpers, toRemoveTextNodes) {
                var node = document.createElement("template");

                if (prop._type == "4" || prop._type == "5") {
                    var docFrag = document.createDocumentFragment();
                    if (prop._type == "4") {
                        node.setAttribute("item", prop._item);
                        node.setAttribute("index", prop._index);
                    } else if (prop._type == "5") {
                        node.setAttribute("key", prop._key);
                        node.setAttribute("value", prop._value);
                    }
                    if (dynamicNodes) {
                        node._dynamicNodes = dynamicNodes[prop.idx + 1].dynamicNodes;
                        docFrag.append(dynamicNodes[prop.idx + 1]._ht.content.cloneNode(true));
                        node._ht = dynamicNodes[prop.idx + 1]._ht;
                        node._htA = true;
                    } else {
                        node._dynamicNodes = [];
                    }
                    node._items = [];
                    node._helpers = [];
                    node._forContent = [];

                    // docFrag.append( dynamicNodes[ prop.idx + 1 ]._ht.content.cloneNode(true) );
                    node.content.appendChild(docFrag);

                    if (prop._type == "5") {
                        var data = this.getData(prop.syntax);
                        node._keysArray = Object.keys(data);
                        node._currentObject = data;
                        node._attributes = { object: data };
                        node._initProperties = { object: data };
                        node._propBindingObject = {};
                    } else {
                        var data = this.getData(prop.syntax);
                        node._attributes = { items: data };
                        node._initProperties = { items: data };
                        node._currentItems = data;
                    }

                    if (prop._helperId) {
                        var helperNode = void 0;
                        var helper = helpers[prop._helperId];
                        if (prop._yield) {
                            helperNode = this.querySelector("[helperId='" + prop._helperId + "'");
                            helperNode._helpers = helperNode._helpers || [];
                            helperNode._helpers.push(node);
                        } else if (/^(4|5)$/.test(helper._type)) {
                            helperNode = _LC.tDiv.content.querySelector("[bindId='" + prop._helperId + "'");
                            helperNode._helpers = helperNode._helpers || [];
                            helperNode._helpers[prop._forIndex] = helperNode._helpers[prop._forIndex] ? helperNode._helpers[prop._forIndex] : [];
                            helperNode._helpers[prop._forIndex].push(node);
                        }
                        // else{
                        //     helperNode = _LC.tDiv.content.querySelector( "[bindId='" + prop._helperId + "'" );
                        //     helperNode._helpers = helperNode._helpers || [];
                        //     helperNode._helpers.push( node );
                        // }
                    }
                } else if (prop._type != "component") {
                    node._dynamicProperty = node._dynamicProperty || {};
                    node._cases = dynamicNodes ? dynamicNodes[prop.idx + 1].cases : undefined;
                }

                if (prop._syntax && prop._type) {
                    node.setAttribute('is', this.getssrType(prop._type, true));
                } else {
                    node.setAttribute('is', this.getssrType(prop._type, true));
                }
                node.setAttribute('bindId', prop.id);
                var placeHolder = void 0;
                if (prop._type !== "6" && !plholder[prop.id]) {
                    placeHolder = this.querySelector("[placeHolderId='" + prop.id + "'");
                    var tN = document.createTextNode("");
                    tN._helper = node;
                    // placeHolder._helper = node;
                    // placeHolder.nextSibling._helper=node;
                    Object.defineProperty(plholder, prop.id, { value: tN });
                    placeHolder.parentNode.insertBefore(tN, placeHolder);
                    if (helpers[prop._helperId] && /^(7|8)$/.test(helpers[prop._helperId].type)) {
                        var _tN = _LC.tDiv.content.querySelector("[bindid='" + helpers[prop._helperId].id + "'");
                        if (_tN._caseContent.indexOf(placeHolder) !== -1) {
                            var ind = _tN._caseContent.indexOf(placeHolder);
                            _tN._caseContent[ind] = tN;
                        }
                    }
                    toRemoveTextNodes.push(placeHolder);
                    // this.querySelector( "[placeHolderId='" + prop.id + "'").remove();
                }
                node._removedAttributes = { items: prop.node }; //
                node._placeHolder = plholder[prop.id];
                node._callee = this;
                _LC.apdNode(node, this);
                return node;
            }
        }, {
            key: 'bindServerFor',
            value: function bindServerFor(prop, dynamicNode, bindIds, idx, plholder, pbind, helpers, toRemoveTextNodes) {
                var item = this.querySelector("[bindId='" + prop.id + "'"),
                    node = _LC.tDiv.content.querySelector("[bindId='" + prop._helperId + "'"),
                    _node = void 0;

                if (prop.type == "attr" && prop.isTemplate) {
                    _node = this.getServerTemplates(prop, node._dynamicNodes, plholder, helpers, toRemoveTextNodes);
                    if (!node._helpers[prop._index]) {
                        node._helpers[prop._forIndex] = [];
                    }
                    node._helpers[prop._forIndex].push(_node);
                    // if( prop._syntax ){
                    //     this.bindServerIf( prop, node._dynamicNodes[ prop.idx + 1 ], _node ,pbind);
                    //     bindIds.splice( idx + 1, 1 );

                    // }
                    _LC.apdNode(_node, this);
                }
                node._items[prop._forIndex] = node._items[prop._forIndex] ? node._items[prop._forIndex] : { "_dynamicProperty": {}, "itemProperty": {}, "indexProperty": {}, "propProperty": {}, "propPropertyDyn": {}, "propNodes": {}, "_cx": { "type": "for", "node": node } };
                node._items[prop._forIndex]._cx.forIndex = prop._forIndex;

                //for text or if in for
                if (prop._type) {
                    //== "nestedIf" ){

                    var _actProperty = this.getProperty(prop.syntax);
                    makeSet(_actProperty, "_helperNodes");
                    _actProperty._helperNodes.add(node);

                    if (node._items[prop._forIndex]._dynamicProperty) {
                        node._items[prop._forIndex]._dynamicProperty[prop.syntax] = node._items[prop._forIndex]._dynamicProperty[prop.syntax] ? node._items[prop._forIndex]._dynamicProperty[prop.syntax] : [];
                        if (prop.type == "3") {
                            var _obj5 = prop.node;
                            _obj5.ownerElement = _node;
                            _obj5._attributeDetails = node._attributeDetails;
                            _obj5._callee = this;
                            _obj5.syntaxValue = prop.syntax;
                            node._items[prop._forIndex]._dynamicProperty[prop.syntax].push(_obj5);
                            return;
                        }
                        item = item.childNodes[0];
                        item._callee = this;
                        item.syntaxValue = prop.syntax;
                        node._items[prop._forIndex]._dynamicProperty[prop.syntax].push(item);
                        return;
                    }
                }
                var actProperty = void 0;
                if (prop._index) {
                    actProperty = this.getProperty(prop._index);
                    node._items[prop._forIndex].indexProperty = actProperty;
                    node._items[prop._forIndex]._cx.indexValue = prop._index;
                } else {
                    actProperty = this.getProperty(prop._item);
                    node._items[prop._forIndex].itemProperty = actProperty;
                    node._items[prop._forIndex]._cx.itemValue = prop._item;
                    if (prop._forType == "5") {
                        node._propBindingObject[prop._forIndex] = actProperty;
                    }
                }
                makeArray(actProperty, "_dynamicNodes");
                actProperty._dynamicNodes.push(item);
            }
        }, {
            key: 'bindServerIf',
            value: function bindServerIf(prop, dynamicNode, node, pbind) {
                // if( node == null ){
                //     node = this.getServerTemplates( prop, dynamicNode );
                //     _LC.apdNode(node, this);
                // }

                var cases = node._cases ? node._cases : dynamicNode.cases,
                    childNodes = void 0,
                    newChildNodes = [];
                if (!pbind[prop.id]) {
                    childNodes = Array.from(this.querySelectorAll("[pBindId='" + prop.id + "'"));
                    if (childNodes.length != 0) {
                        // let firstnode = childNodes[0];
                        // let lastNode = childNodes[childNodes.length-1];
                        // childNodes[0]=childNodes[0].nextSibling;
                        // if(firstnode.localName == "text" && !firstnode.getAttribute("bindId") && !firstnode.getAttribute("placeholderId") ){
                        //     firstnode.remove();
                        // }
                        for (var _i11 = 0; _i11 < childNodes.length; _i11++) {
                            var te = childNodes[_i11];
                            if (te.localName == "text") {
                                if (te.getAttribute("pbindid")) {
                                    if (!te.getAttribute("placeholderid")) {
                                        te = childNodes[_i11].nextSibling;
                                        if (te.nodeType == 3) {
                                            newChildNodes.push(te);
                                            if (!childNodes[_i11].hasAttribute("bindid") && !childNodes[_i11].hasAttribute("placeholderid")) {
                                                childNodes[_i11].remove();
                                            }
                                            continue;
                                        }
                                    }
                                }
                                // if(!te.hasAttribute('bindid')){
                                //     childNodes[i].remove();
                                // }
                            }
                            if (te.hasAttribute("pbindid")) {
                                newChildNodes.push(te);
                            }
                        }
                        // childNodes[childNodes.length-1] = childNodes[childNodes.length-1].nextSibling;
                        // if(lastNode.localName == "text" && !lastNode.getAttribute("bindId") && !lastNode.getAttribute("placeholderId") ){
                        //     lastNode.remove();
                        // }
                        pbind[prop.id] = newChildNodes;
                    }
                }
                // emptyTextNode = document.createTextNode("");
                // emptyTextNode._helper = node;
                // this.insertBefore( emptyTextNode, childNodes[ childNodes.length - 1 ] ) ;

                node._attributes = { value: prop.case
                    // node._placeHolder = emptyTextNode;
                };node._caseContent = pbind[prop.id];
                node._cases = cases;
                node._default = node._default ? node._default : dynamicNode.default;
                node._currentCase = prop.case !== undefined ? prop.case + "" : "false";

                for (var _k3 in cases) {
                    var template = document.createElement("template");
                    template.append(document.createDocumentFragment());
                    template.setAttribute("case", _k3);

                    node.content.append(template);
                }
                if (prop.type == "8") {
                    var _template = document.createElement("template");
                    _template.append(document.createDocumentFragment());
                    _template.setAttribute("default", "");
                    node.content.append(_template);
                }
            }
        }, {
            key: 'getRandomId',
            value: function getRandomId(type) {
                var id = type + Math.floor(Math.random() * 100000),
                    ids = this.constructor._bindsIds;
                while (ids.includes(id)) {
                    id = type + Math.floor(Math.random() * 1000);
                }
                ids.push(id);
                return id;
            }
        }, {
            key: 'getssrType',
            value: function getssrType(type, bind) {
                var o = { componentDynamic: "1", text: "2", attr: "3", for: "4", forIn: "5", component: "6", if: "7", switch: "8", registerYield: "9", insertYield: "10", action: "A1", method: "M2", forContent: "4C" };
                if (!bind) {
                    return o[type] ? o[type] : type;
                } else {
                    for (var _i12 in o) {
                        if (o[_i12] == type) {
                            return _i12;
                        }
                    }
                }
            }
            //ssrcode_end
            //RN
            //ssroverrides

        }, {
            key: 'renderNodes',
            value: function renderNodes(toAppend, dynamicNodes, helperNode, options, establishBindings, returnVal, templateContent, yieldComp, initialRender) {
                options = options || {};
                var content = void 0;
                var constr = this.constr;
                /*if(_Lyte._ie){
                    let newFrag = toAppend.cloneNode(true, "lyte");
                    this.constructor.splitTextNodes(newFrag);
                    content = newFrag;
                }
                else{
                    content = toAppend.cloneNode(true, "lyte");
                }*/
                var templateDepthHandlingNeeded = false;
                if (_Lyte._ms || !toAppend) {
                    templateDepthHandlingNeeded = true;
                    content = _LC.getContentForIE(templateContent, constr);
                } else if (toAppend.hasAttribute("depth")) {
                    templateDepthHandlingNeeded = true;
                    content = _LC.getContentForIE(toAppend, constr);
                } else {
                    content = toAppend.content.cloneNode(true, "lyte");
                }
                var updateHelpers = [],
                    processLast = [],
                    helperFunc = void 0,
                    stoppedNode = void 0;
                var cmpData = LyteComponent.getCmpData(this.component.data);
                //to get bindings in ssr components
                //ssrcode_start
                if (this._ssrBind) {
                    cmpData.bindIds = cmpData.bindIds || [];
                }
                //ssrcode_end
                // componentDynamic = "1" , text ="2" , attr = "3" , for = "4" , forIn = "5", component = "6" , if = "7" , switch = "8" , registeryield = "9" , insertyield = "10" , action = "A1" , method = "M2", forContent = "4C"
                var toBeInsMap = new Map();
                for (var _i13 = 0; _i13 < dynamicNodes.length; _i13++) {
                    var info = dynamicNodes[_i13],
                        type = info.type,
                        pos = info.position,
                        _dynamicN = content,
                        helperInfo = void 0;
                    _dynamicN = getDynamicNode(_dynamicN, pos);
                    if (info.trans) {
                        _dynamicN._hooksPresent = true;
                    }
                    if (!dynamicNodes._cache && !(this.registeredProp && this.registeredProp.length)) {
                        dynamicNodes._cache = {};
                    }
                    if (type === "componentDynamic") {
                        if (_Lyte.isWidgetBuild) {
                            _dynamicN.setAttribute("lyte-widget", "");
                        }
                        if (helperNode) {
                            _dynamicN._parentHelper = helperNode;
                        }
                        if (options.node) {
                            _dynamicN._cx = options;
                        } else if (helperNode) {
                            _dynamicN._cx = helperNode._cx;
                        }

                        //to bind componentDynamic in ssr components
                        //ssrcode_start
                        if (this._ssrBind) {
                            var id = void 0,
                                _type = this.getssrType(type);
                            if (_dynamicN.hasAttribute("bindId")) {
                                id = _dynamicN.getAttribute("bindId");
                            } else {
                                id = this.getRandomId(_type + "_"); //type + Math.floor( Math.random() * 1000 );
                                // dynamicN.setAttribute( "helperId", id );
                                _dynamicN.setAttribute("bindId", id);
                            }
                            var _obj6 = { id: id, type: _type, idx: _i13 };
                            cmpData.bindIds.push(_obj6); //    
                            if (helperNode) {
                                _obj6._helperId = helperNode.getAttribute("bindid");
                                if (/^(for|forIn)$/.test(helperNode.getAttribute("is"))) {
                                    _obj6._forType = this.getssrType(helperNode.getAttribute("is"));
                                    _obj6._forIndex = _dynamicN._cx.itemIndex;
                                }
                            }
                        }
                        //ssrcode_end          
                    } else if (type === "text") {
                        this.bindNode(_dynamicN, undefined, helperNode, options, dynamicNodes[_i13], processLast, establishBindings, undefined, dynamicNodes._cache, type, undefined, toBeInsMap);
                    } else if (type === "attr") {
                        _dynamicN._attributeDetails = info.attr;
                        if (_dynamicN.nodeName === "LYTE-YIELD") {
                            _dynamicN._callee = this;
                            _dynamicN.component = {};
                            _dynamicN.component.data = {};
                            defProp(_dynamicN.component.data, "__component__", {
                                value: _dynamicN,
                                configurable: true,
                                writable: true,
                                enumerable: false
                            });
                            _dynamicN._properties = {};
                            for (var j = 0; j < _dynamicN.attributes.length; j++) {
                                var attr = _dynamicN.attributes[j];
                                if (attr.nodeName !== "is" && attr.nodeName !== "yield-name") {
                                    _dynamicN._properties[_LC.String.toCamelCase(attr.nodeName)] = {};
                                }
                            }
                        }
                        var toBeRemoved = [];
                        var processDirectiveLazy = [];
                        for (var _key18 in info.attr) {
                            var _attr = info.attr[_key18];
                            _attr._depthTemp = info._depthTemp;
                            var attrName = _key18;
                            var node = void 0;
                            if (_attr && (_attr.dynamicValue || _attr.helperInfo)) {
                                if (options.node) {
                                    _dynamicN._cx = options;
                                } else if (helperNode) {
                                    _dynamicN._cx = helperNode._cx;
                                }
                                var actionName = void 0,
                                    boundName = void 0;
                                if (_attr.helperInfo && _attr.helperInfo.name === "action") {
                                    _dynamicN._boundEvents = _dynamicN._boundEvents || {};
                                    actionName = _attr.helperInfo.args[0];
                                    if (actionName.startsWith('"') || actionName.startsWith("'")) {
                                        boundName = actionName.substring(1, actionName.length - 1);
                                    } else {
                                        // _Lyte.warn("Deprecation warning. Action name " + actionName + " must be in quotes");
                                        boundName = actionName;
                                    }
                                    var actualAttrName = _attr.globalEvent ? attrName : attrName.indexOf("-") !== -1 ? attrName : attrName.substr(2);
                                    _dynamicN._boundEvents[actualAttrName] = { "name": boundName, "args": _attr.helperInfo.args };

                                    //to bind actions in ssr components
                                    var _id = void 0;
                                    // if( dynamicN.hasAttribute( "bindId" ) ){
                                    //    id = dynamicN.getAttribute( "bindId" );
                                    // }else{
                                    //    id = type + Math.floor( Math.random() * 1000 );
                                    //    dynamicN.setAttribute( "bindId", id );
                                    // }
                                    _id = "A1_" + Math.floor(Math.random() * 1000);
                                    //ssrcode_start
                                    if (this._ssrBind) {
                                        var helpId = void 0;
                                        _dynamicN.setAttribute(_id, _id);
                                        this.component.data.bindIds.__actions = this.component.data.bindIds.__actions ? this.component.data.bindIds.__actions : [];
                                        var _obj7 = { id: _id, type: "A1", args: _attr.helperInfo.args, "event": _attr.name, actionName: actualAttrName, idx: _i13, "boundName": boundName };
                                        if (helperNode) {
                                            helpId = helperNode.getAttribute("bindId");
                                            _obj7._helperId = helpId;
                                            if (/^(for|forIn)$/.test(helperNode.getAttribute("is"))) {
                                                _obj7._forType = this.getssrType(helperNode.getAttribute("is"));
                                                _obj7._forIndex = _dynamicN._cx.itemIndex;
                                            }
                                        }
                                        //this.component.data.bindIds.__actions.push( obj );
                                        this.component.data.bindIds.push(_obj7);
                                    }
                                    //ssrcode_end                       
                                }
                                if (!_attr.globalEvent) {
                                    /*this.bindNode(dynamicN.getAttributeNode(attrName), toBeRemoved, helperNode, options, attr, undefined, establishBindings);
                                     */
                                    if (!_dynamicN.hasAttribute(attrName)) {
                                        _dynamicN.setAttribute(attrName, "{{dummy}}");
                                    }
                                    node = this.bindNode(_dynamicN.attributes.getNamedItem(attrName), toBeRemoved, helperNode, options, _attr, undefined, establishBindings, undefined, dynamicNodes._cache, type, _i13);
                                    if (node !== _dynamicN.attributes.getNamedItem(attrName)) {
                                        _dynamicN._removedAttributes = _dynamicN._removedAttributes || {};
                                        _dynamicN._removedAttributes[attrName] = node;
                                    }
                                }
                            }
                            if (_attr.hookNode) {
                                processDirectiveLazy.push({ attr: _attr, node: node });
                            }
                        }
                        _LCSV.addNodeLazy(processDirectiveLazy, this, info, _dynamicN, helperNode, yieldComp, options);
                        // _LCCL.addNodeLazy(processDirectiveLazy, this, info, dynamicN, helperNode, yieldComp, options);
                        //Added now
                        if (info.attr && Object.keys(info.attr).length) {
                            _dynamicN._callee = this;
                        }
                        for (var d = 0; d < toBeRemoved.length; d++) {
                            _dynamicN.removeAttribute(toBeRemoved[d]);
                        }
                    } else if (/^(for|forIn|component)$/.test(type)) {
                        if (window.isLyteWidget || window.__lyteEnablePromise) {
                            _dynamicN._cases = info.cases;
                        }
                        if (options.node) {
                            _dynamicN._cx = options;
                        } else if (helperNode) {
                            _dynamicN._cx = helperNode._cx;
                        }
                        _dynamicN._dynamicNodes = info.dynamicNodes;
                        if (_Lyte._ms) {
                            _dynamicN._tC = info.templateContent;
                        }
                        if (info.actualTemplate) {
                            _dynamicN._tC = info.actualTemplate;
                        }
                        if (!_dynamicN._hiddenTemplate) {
                            _dynamicN._hiddenTemplate = [];
                        }
                        var _returnVal = void 0;
                        switch (type) {
                            case "for":
                                _dynamicN._ht = info._ht;
                                _returnVal = this.updateForHelper(_dynamicN, { "type": "default" }, options.node ? options : undefined, establishBindings, info._sta, undefined, initialRender);
                                break;
                            case "forIn":
                                _dynamicN._ht = info._ht;
                                _returnVal = this.updateForInHelper(_dynamicN, { "type": "default" }, options.node ? options : undefined, establishBindings, undefined, initialRender);
                                break;
                            case "component":
                                _returnVal = this.updateDynamicComponent(_dynamicN, false, options.node ? options : undefined, establishBindings, _i13, helperNode);
                        }
                        if (_returnVal) {
                            updateHelpers.push(_returnVal);
                        }
                    } else if (/^(if|switch)$/.test(type)) {
                        var def = "default";
                        _dynamicN._cases = info.cases;
                        _dynamicN._default = info[def];
                        _dynamicN._ht = info._ht;
                        if (options.node) {
                            _dynamicN._cx = options;
                        } else if (helperNode) {
                            _dynamicN._cx = helperNode._cx;
                        }
                        if (info.actualTemplate) {
                            _dynamicN._tC = info.actualTemplate;
                            if (!_dynamicN._origTemplate) {
                                if (_Lyte._ie) {
                                    _dynamicN._origTemplate = createElement("template");
                                } else {
                                    _dynamicN._origTemplate = info._depthTemp.cloneNode(true);
                                }
                                if (_dynamicN.hasAttribute("value")) {
                                    _dynamicN._origTemplate.setAttribute("value", _dynamicN.getAttribute("value"));
                                }
                            }
                        }
                        if (!_dynamicN._hiddenTemplate) {
                            _dynamicN._hiddenTemplate = [];
                        }
                        //to bind if/switch in ssr components
                        var _id2 = void 0;
                        //ssrcode_start
                        if (!_LC.unbound && (this._ssrBind || this._callee && this._callee._ssrBind)) {
                            var _type2 = this.getssrType(type);
                            if (_dynamicN.hasAttribute("bindId")) {
                                _id2 = _dynamicN.getAttribute("bindId");
                            } else {
                                _id2 = this.getRandomId(_type2 + "_");
                                _dynamicN.setAttribute("helperId", _id2);
                                _dynamicN.setAttribute("bindId", _id2);
                            }
                            var _obj8 = { id: _id2, type: _type2, case: type == "if" ? _dynamicN._attributes.value ? true : false : _dynamicN._attributes.value, idx: _i13 },
                                _helpId = void 0;
                            if (helperNode) {
                                _helpId = helperNode.getAttribute("bindId");

                                _obj8._helperId = _helpId;
                                if (/^(for|forIn)$/.test(helperNode.getAttribute("is"))) {
                                    _obj8._forType = this.getssrType(helperNode.getAttribute("is"));
                                    _obj8._forIndex = _dynamicN._cx.itemIndex;
                                }
                            }
                            this.component.data.bindIds.push(_obj8);
                        }
                        //ssrcode_end

                        var _returnVal2 = this.updateSwitchHelper(type, _dynamicN, options.node ? options : undefined, undefined, establishBindings, yieldComp, _id2, toBeInsMap);
                        if (_returnVal2) {
                            updateHelpers.push(_returnVal2);
                            var isBreak = _returnVal2.toAppendMain.querySelector("template[is=break]");
                            if (isBreak) {
                                _dynamicN._isStopped = "break";
                                content = Lyte.Compile.getTrimmedContent(content, info.position, undefined);
                                stoppedNode = info.position;
                                break;
                            }
                            var isContinue = _returnVal2.toAppendMain.querySelector("template[is=continue]");
                            if (isContinue) {
                                _dynamicN._isStopped = "continue";
                                content = Lyte.Compile.getTrimmedContent(content, info.position, undefined);
                                //                		stoppedNode = info.position;
                                break;
                            }
                        }
                    } else if (type === "registerYield") {
                        if (options.node) {
                            _dynamicN._cx = options;
                        } else if (helperNode) {
                            _dynamicN._cx = helperNode._cx;
                        }
                        //ssrcode_start
                        if (!_LC.unbound && this._ssrBind) {
                            //to bind registerYield in ssr components
                            var _id3 = void 0,
                                _type3 = this.getssrType(type);
                            if (_dynamicN.hasAttribute("bindId")) {
                                _id3 = _dynamicN.getAttribute("bindId");
                            } else {
                                _id3 = this.getRandomId(_type3 + "_"); //type + Math.floor( Math.random() * 1000 );
                                _dynamicN.setAttribute("helperId", _id3);
                                _dynamicN.setAttribute("bindId", _id3);
                            }
                            var _obj9 = { id: _id3, type: _type3, idx: _i13 };
                            if (helperNode && helperNode.getAttribute("bindId")) {
                                _obj9._helperId = helperNode.getAttribute("bindId");
                                if (helperNode && helperNode.getAttribute("bindId")) {
                                    _obj9._helperId = helperNode.getAttribute("bindId");
                                    if (/^(for|forIn)$/.test(helperNode.getAttribute("is"))) {
                                        _obj9._forType = this.getssrType(helperNode.getAttribute("is"));
                                        _obj9._forIndex = _dynamicN._cx.itemIndex;
                                    }
                                }
                            }
                            this.component.data.bindIds.push(_obj9);
                        }
                        //ssrcode_end
                        _dynamicN._dynamicNodes = info.dynamicNodes;
                        _dynamicN._sta = info._sta;
                        _dynamicN._ht = info._ht;
                        if (_Lyte._ms) {
                            _dynamicN._tC = info.templateContent;
                        }
                        //                updateHelpers.push(dynamicN);
                        //Added now                
                        _dynamicN._callee = this;
                    } else if (type === "insertYield") {
                        if (helperNode) {
                            _dynamicN._parentHelper = helperNode;
                        }
                        if (options.node) {
                            _dynamicN._cx = options;
                        } else if (helperNode) {
                            _dynamicN._cx = helperNode._cx;
                        }
                        if (!_dynamicN._hiddenTemplate) {
                            _dynamicN._hiddenTemplate = [];
                        }
                        _dynamicN.component = _dynamicN.component || { "data": {} };
                        _dynamicN._properties = _dynamicN._properties || {};
                        //to bind insertYield in ssr components
                        //ssrcode_start
                        if (!_LC.unbound && this._ssrBind) {
                            var _id4 = void 0,
                                _type4 = this.getssrType(type);
                            if (_dynamicN.hasAttribute("bindId")) {
                                _id4 = _dynamicN.getAttribute("bindId");
                            } else {
                                _id4 = this.getRandomId(_type4 + "_"); //type + Math.floor( Math.random() * 1000 );
                                _dynamicN.setAttribute("helperId", _id4);
                                _dynamicN.setAttribute("bindId", _id4);
                            }
                            var _obj10 = { id: _id4, type: _type4, idx: _i13 };
                            if (helperNode && helperNode.getAttribute("bindId")) {
                                _obj10._helperId = helperNode.getAttribute("bindId");
                                if (/^(for|forIn)$/.test(helperNode.getAttribute("is"))) {
                                    _obj10._forType = this.getssrType(helperNode.getAttribute("is"));
                                    _obj10._forIndex = _dynamicN._cx.itemIndex;
                                }
                            }
                            //obj.data  = dynamicN.component;
                            _obj10.properties = _dynamicN._properties;
                            this.component.data.bindIds.push(_obj10);
                        }
                        //ssrcode_end
                        _dynamicN.component = _dynamicN.component || { "data": {} };
                        _dynamicN._properties = _dynamicN._properties || {};
                        var dData = LyteComponent.getCmpData(_dynamicN.component.data);
                        for (var x = 0; x < _dynamicN.attributes.length; x++) {
                            var attrObj = _dynamicN.attributes[x];
                            var _attrName = attrObj.name;
                            var attrValue = attrObj.value;
                            if (_attrName !== "yield-name") {
                                if (_dynamicN._properties && !_dynamicN._properties[_attrName]) {
                                    _dynamicN._properties[_attrName] = {};
                                }

                                if (_dynamicN._attributeDetails && !_dynamicN._attributeDetails[_attrName]) {
                                    dData[_attrName] = attrValue;
                                }
                            }
                        }
                        this.updateYield(_dynamicN, false, options.node ? options : undefined);
                    }
                }
                dynamicNodes._cache = undefined;
                for (var _i14 = 0; _i14 < processLast.length; _i14++) {
                    var dynamicPosition = processLast[_i14].dynamicPositions;
                    var processNode = dynamicPosition.initialNode;
                    var _nodeValue3 = dynamicPosition.dynamicNodeValue;
                    var childLen = _nodeValue3.childNodes.length;
                    if (!childLen) {
                        _nodeValue3.appendChild(document.createTextNode(""));
                        childLen = 1;
                    }
                    var startingNode = _nodeValue3.childNodes[0];
                    if (_Lyte._rwpf && processNode.parentNode.nodeName === "#document-fragment") {
                        while (_nodeValue3.childNodes.length) {
                            _insertBefore(processNode.parentNode, _nodeValue3.childNodes[0], processNode);
                        }
                        processNode.remove();
                    } else {
                        processNode.replaceWith.apply(processNode, _nodeValue3.childNodes);
                    }
                    processLast[_i14].dynamicPositions = { startingNode: startingNode, length: childLen };
                }
                if (toBeInsMap.size) {
                    toBeInsMap.forEach(function (val, key) {
                        val.pN.insertBefore(key, val.cN);
                        if (val.cN.nextSibling) {
                            val.pN.insertBefore(document.createElement("textend"), val.cN.nextSibling);
                        } else {
                            val.pN.appendChild(document.createElement("textend"));
                        }
                    });
                }
                if (stoppedNode) {
                    returnVal = returnVal || {};
                    returnVal.stop = true;
                }
                if (helperNode) {
                    if (options.type) {
                        helperNode._helpers[options.itemIndex] = updateHelpers;
                        if (templateDepthHandlingNeeded) {
                            content = constr.createDocFragment1(content);
                        }
                        return content;
                    } else {
                        helperNode._helpers = helperNode._helpers || [];
                        helperNode._helpers.push.apply(helperNode._helpers, updateHelpers);
                        if (templateDepthHandlingNeeded) {
                            content = constr.createDocFragment1(content);
                        }
                        return content;
                    }
                }
                this.executeBlockHelpers(updateHelpers);
                if (templateDepthHandlingNeeded) {
                    content = constr.createDocFragment1(content);
                }
                return content;
            }
        }, {
            key: 'executeBlockHelpers',
            value: function executeBlockHelpers(updateHelpers, node) {
                for (var _i15 = 0; _i15 < updateHelpers.length; _i15++) {
                    var lastNode = updateHelpers[_i15].lastNode;
                    var parentNode = lastNode.parentNode;

                    if (lastNode._placeHolder) {
                        lastNode = lastNode._placeHolder;
                        parentNode = lastNode.parentNode;
                    }
                    //parentNode = updateHelpers[i].lastNode.parentNode || updateHelpers[i].lastNode._placeHolder.parentNode;
                    _insertBefore(parentNode, updateHelpers[_i15].toAppendMain, lastNode);
                    updateHelpers[_i15] = updateHelpers[_i15].lastNode;
                    // updateHelpers[i].lastNode.parentNode.insertBefore(updateHelpers[i].toAppendMain, updateHelpers[i].lastNode);
                    // updateHelpers[i] = updateHelpers[i].lastNode;
                    //updateHelpers[i]._parentIf = node;
                    //	    		if(!updateHelpers[i]._cx && node) {
                    //	    			updateHelpers[i]._cx = node._cx;
                    //	    		}
                }
            }
        }, {
            key: 'updateBlockHelpers',
            value: function updateBlockHelpers(updateHelpers, contextSwitchInfo) {
                for (var _i16 = 0; _i16 < updateHelpers.length; _i16++) {
                    switch (updateHelpers[_i16].getAttribute('is')) {
                        case "for":
                            this.updateForHelper(updateHelpers[_i16], { "type": "default" }, contextSwitchInfo);
                            break;
                        case "if":
                            this.updateSwitchHelper("if", updateHelpers[_i16], contextSwitchInfo);
                            break;
                        case "forIn":
                            this.updateForInHelper(updateHelpers[_i16], { "type": "default" }, contextSwitchInfo);
                            break;
                        case "switch":
                            this.updateSwitchHelper("switch", updateHelpers[_i16], contextSwitchInfo);
                            break;
                        case "component":
                            this.updateDynamicComponent(updateHelpers[_i16], false, contextSwitchInfo);
                            break;
                        case "insertYield":
                            //              this.updateYield(updateHelpers[i], false, contextSwitchInfo);
                            break;
                        case "yield":
                        case "registerYield":
                            if (contextSwitchInfo) {
                                updateHelpers[_i16]._cx = contextSwitchInfo;
                            }
                            break;
                        default:
                            if (updateHelpers[_i16].tagName === "LYTE-YIELD") {
                                this.updateYield(updateHelpers[_i16], false, contextSwitchInfo);
                            }

                    }
                }
            }
            /*disable async function*/

        }, {
            key: 'attributeChangedCallback',

            //Callback from browser, whenever any of the observed attribute changes. 
            //We call the component set, in order to affect the related changes. 
            value: function attributeChangedCallback(attr, oldValue, newValue) {
                this._attributeChangedCallback(attr, oldValue, newValue);
            }
        }, {
            key: '_attributeChangedCallback',
            value: function _attributeChangedCallback(attr, oldValue, newValue) {
                if (this.__lyteIgnore || this.__v3lyteIgnore) {
                    return;
                }
                var constr = this.constructor;
                var compConstr = this.component.constructor;
                if (compConstr._observedMethodAttributes && compConstr._observedMethodAttributes[attr]) {
                    return;
                }
                var actualAttr = _LC.String.toCamelCase(attr);
                var isCustomProp = _LC.customPropHandlers.indexOf(actualAttr);
                if (isCustomProp !== -1) {
                    var propValue = _LC.customPropHandlers[isCustomProp];
                    var lyteProps = newValue;
                    if (lyteProps) {
                        try {
                            lyteProps = JSON.parse(lyteProps);
                            for (var _key19 in lyteProps) {
                                var actKey = propValue + _LC.String.upperCaseFirstLetter(_key19);
                                this.set(actKey, lyteProps[_key19]);
                            }
                        } catch (e) {
                            _Lyte.error("LC001", attr);
                        }
                    }
                    return;
                }
                if (oldValue === newValue) {
                    return;
                }
                var attrNode = this.attributes.getNamedItem(attr);
                if (attrNode) {
                    if (attrNode.__lyteIgnore) {
                        this.attributes.getNamedItem(attr).__lyteIgnore = false;
                        return;
                    }
                } else if (this["__" + attr]) {
                    this["__" + attr] = false;
                    return;
                }
                var compInstance = this.component;
                var dataDef = compInstance.__data[actualAttr];
                if (dataDef && dataDef.type) {
                    var dataType = dataDef.type;
                    if (dataType !== "string") {
                        var _obj11 = { "attr": attr, "tagName": this.tagName };
                        newValue = _LC.typeCast(newValue, dataType, _obj11);
                        if (_obj11.isError) {
                            _Lyte.warn("data type of the value provided for attribute " + attr + " of " + this.tagName + " is not valid");
                            return;
                        }
                    }
                }

                var compData = compInstance.data;
                if (compData[actualAttr] !== newValue) {
                    // Null check is done because when we do a removeAttribute directly on a component, the corresponding value expected is that of undefined and not null.
                    this.set(actualAttr, newValue === null ? undefined : newValue, undefined, undefined, true);
                } else {
                    _LC.clearError(compData, actualAttr);
                }
            }

            //Used to remove helpers of specific index in a for helper. 

        }, {
            key: 'removeHelpersSpecificIndex',
            value: function removeHelpersSpecificIndex(node, index, destroyChild, type) {
                var isType = node.getAttribute("is");
                if (node._helpers[index]) {
                    for (var j = 0; j < node._helpers[index].length; j++) {
                        this.removeHelpers(node._helpers[index][j], undefined, undefined, index, node, type);
                    }
                }
                _LCSV.removeAll(isType, this, node, index, destroyChild, index, node, type);
                _LCHD.rmHelpersSpecificIndex(node, index);
                if (node._forContent[index]) {
                    for (var _i17 = 0; _i17 < node._forContent[index].length; _i17++) {
                        node._forContent[index][_i17].remove();
                    }
                    var self = this;
                    Object.keys(node._items[index]._dynamicProperty).forEach(function (key) {
                        node._dynProps[key]--;
                        if (!node._dynProps[key]) {
                            var prop = self.getProperty(key);
                            if (prop._helperNodes) {
                                prop._helperNodes[delStr](node);
                            }
                        }
                    });
                    node._items[index] = { "_dynamicProperty": {}, "itemProperty": {}, "indexProperty": {}, "propProperty": {}, "propPropertyDyn": {}, "propNodes": {} };
                }
            }
            //Used to remove all the helpers within an helper. 

        }, {
            key: 'removeHelpers',
            value: function removeHelpers(node, update, direct, updateIndex, parentNode, type) {
                var isType = node.getAttribute("is");
                if (!direct) {
                    node.remove();
                    var helpersObj = node.getAttribute("is") === "component" ? this.__dc : this.__h;
                    var nodeId = node.__lyteId;
                    delete helpersObj[nodeId];
                }

                var del = "delete";
                var parent = void 0;
                var contextSwitchArray = [];
                _LC.adCx(node, contextSwitchArray);
                if (node._forContent) {
                    if (node.getAttribute("is") === "for") {
                        if (node._helpers) {
                            for (var _i18 = 0; _i18 < node._helpers.length; _i18++) {
                                for (var j = 0; j < node._helpers[_i18].length; j++) {
                                    this.removeHelpers(node._helpers[_i18][j], undefined, undefined, updateIndex, parentNode, type);
                                }
                                node._helpers[_i18] = [];
                            }
                        }
                        for (var _s = 0; _s < node._forContent.length; _s++) {
                            for (var _i19 = 0; _i19 < node._forContent[_s].length; _i19++) {
                                node._forContent[_s][_i19].remove();
                            }
                        }
                        var _key20 = node.getAttribute("item");
                        if (node._items.length) {
                            var prop = node._items[0].itemProperty;
                            for (var _i20 = 0; _i20 < node._items.length; _i20++) {
                                var dynProp = node._items[_i20]._dynamicProperty;
                                for (var dP in dynProp) {
                                    var property = this.getProperty(dP);
                                    if (property._helperNodes) {
                                        property._helperNodes[del](node);
                                    }
                                }
                            }
                            if (prop) {
                                for (var _i21 = 0; _i21 < node._items.length; _i21++) {
                                    this.removeBindings(_defineProperty({}, _key20, node._items[_i21].itemProperty), _defineProperty({}, _key20, node._attributes.items[_i21]));
                                }
                            }
                        }
                        _LCSV.removeAll(isType, this, node, undefined, undefined, updateIndex, parentNode, type);
                        if (!update) {
                            if (node._actualBinding) {
                                if (node._attributes.items && node._attributes.items._bindings && node._actualBinding._createdBinding) {
                                    node._attributes.items._bindings[del](node._actualBinding);
                                }
                                if (node._actualBinding._forHelpers) {
                                    node._actualBinding._forHelpers[del](node);
                                }
                                var multiplePrpty = node._removedAttributes.items._multipleProperty;
                                if (node._removedAttributes && node._removedAttributes.items && !node._removedAttributes.items.helperValue && multiplePrpty && multiplePrpty[0].actProp._forHelpers) {
                                    multiplePrpty[0].actProp._forHelpers[del](node);
                                }
                            }
                        }
                        node._items = [];
                    } else {
                        if (node._helpers) {
                            var keys = Object.keys(node._helpers);
                            for (var _i22 = 0; _i22 < keys.length; _i22++) {
                                for (var _j = 0; _j < node._helpers[keys[_i22]].length; _j++) {
                                    this.removeHelpers(node._helpers[keys[_i22]][_j], undefined, undefined, updateIndex, parentNode, type);
                                }
                                node._helpers[keys[_i22]] = [];
                            }
                        }
                        for (var ind in node._forContent) {
                            for (var _i23 = 0; _i23 < node._forContent[ind].length; _i23++) {
                                node._forContent[ind][_i23].remove();
                            }
                        }
                        var items = node._items;
                        var _key21 = node.getAttribute("key");
                        for (var index in items) {
                            var _item2 = items[index];
                            var _prop = _item2.itemProperty;
                            var dynamicProp = _item2._dynamicProperty;
                            for (var _dP in dynamicProp) {
                                var _property = this.getProperty(_dP);
                                if (_property._helperNodes) {
                                    _property._helperNodes[del](node);
                                }
                            }
                            if (_prop) {
                                this.removeBindings(_defineProperty({}, _key21, node._items[index].itemProperty), _defineProperty({}, _key21, node._attributes.object[index]));
                            }
                        }
                        if (!update) {
                            if (node._actualBinding) {
                                if (node._attributes.object && node._attributes.object._bindings && node._actualBinding._createdBinding) {
                                    node._attributes.object._bindings[del](node._actualBinding);
                                }
                                if (node._actualBinding._forHelpers) {
                                    node._actualBinding._forHelpers[del](node);
                                }
                            }
                            var multiplePrpty = node._removedAttributes.object._multipleProperty;
                            if (node._removedAttributes.object && !node._removedAttributes.object.helperValue && multiplePrpty && multiplePrpty[0].actProp._forHelpers) {
                                multiplePrpty[0].actProp._forHelpers[del](node);
                            }
                            if (node._propBindingObject && node._attributes.object && node._attributes.object._bindings) {
                                node._attributes.object._bindings[del](node._propBindingObject);
                            }
                        }
                        _LCSV.removeAll(isType, this, node, undefined, undefined, updateIndex, parentNode, type);
                        node._items = {};
                    }
                    if ((window.isLyteWidget || window.__lyteEnablePromise) && node._promiseContent) {
                        for (var _s2 = 0; _s2 < node._promiseContent.length; _s2++) {
                            node._promiseContent[_s2].remove();
                        }
                    }
                    _LCHD.forRmHelpers(node);
                } else if (node._caseContent || node._yieldContent) {
                    if (node._helpers) {
                        for (var _j2 = 0; _j2 < node._helpers.length; _j2++) {
                            this.removeHelpers(node._helpers[_j2], undefined, undefined, updateIndex, parentNode, type);
                        }
                        node._helpers = [];
                    }
                    if (node._caseContent) {
                        for (var _i24 = 0; _i24 < node._caseContent.length; _i24++) {
                            node._caseContent[_i24].remove();
                        }
                        for (var _key22 in node._dynamicProperty) {
                            if (node._dynamicProperty[_key22].isActualNode) {
                                node._dynamicProperty[_key22].isActualNode._helperNodes[del](node);
                            } else {
                                var helperNodes = this.getProperty(_key22)._helperNodes;
                                if (helperNodes) {
                                    helperNodes[del](node);
                                }
                            }
                        }
                        node._dynamicProperty = {};
                        //node._parentIf = null;
                    } else {
                        for (var _i25 = 0; _i25 < node._yieldContent.length; _i25++) {
                            node._yieldContent[_i25].remove();
                        }
                        node._dynamicProperty = {};
                    }
                    _LCHD.ifRmHelpers(node);
                    var pve = _LC.pendingViewPortElements;
                    if (node._inPve && pve.length) {
                        var _ind = pve.indexOf(_LC.getFakeTemplate(node));
                        if (_ind != -1) {
                            pve.splice(_ind, 1);
                        }
                    }
                    _LCSV.removeAll(isType, this, node, undefined, undefined, updateIndex, parentNode, type);
                } else if (node._renderedComponent) {
                    for (var _key23 in node._renderedComponent) {
                        var comp = node._renderedComponent[_key23];
                        if (comp) {
                            comp.constructor.prototype._disconnectedCallback.call(comp);
                            comp.remove();
                            node._renderedComponent[_key23] = null;
                        }
                    }
                }
                _LC.rmCx(node, contextSwitchArray);
            }
        }, {
            key: 'updateYield',
            value: function updateYield(node, update, contextSwitchInfo) {
                if (!node._specialNodes) {
                    node._specialNodes = [];
                }
                var constr = this.constructor;
                var compConstr = this.component.constructor;
                if (!node._callee) {
                    node._callee = this;
                }
                var toAppend = node._callee._yields[node.getAttribute("yield-name")];
                if (!toAppend) {
                    return;
                }
                node._registerYield = toAppend;
                //ADded now
                var parentScope = toAppend._callee || node._callee._callee;
                if (!parentScope) {
                    if (_Lyte._ms) {
                        var div = createElement("div");
                        div.innerHTML = toAppend.outerHTML;
                        if (_Lyte._ie) {
                            div.firstChild.innerHTML = toAppend.innerHTML;
                        }
                        var content1 = div.childNodes[0];
                        constr.splitTextNodes(content1);
                        content1 = constr.createDocFragment1(content1);
                        node.appendChild(content1);
                    } else {
                        node.appendChild(toAppend.content.cloneNode(true, "lyte"));
                    }

                    node._helpers = [];
                    return;
                }
                if (!toAppend._callee) {
                    toAppend._callee = parentScope;
                }
                node._dynamicProperty = node._dynamicProperty || {};
                //set values from child component. 
                var obj = {},
                    contextSwitchingArray = {},
                    self = this,
                    contextSwitchArray = [];
                _LC.adCx(toAppend, contextSwitchArray);
                var cmpData = LyteComponent.getCmpData(parentScope.component.data);
                Object.keys(node._properties).forEach(function (key) {
                    contextSwitchingArray[key] = {};
                    contextSwitchingArray[key].value = cmpData[key];
                    contextSwitchingArray[key].property = parentScope._properties[key];
                    parentScope._properties[key] = node._properties[key];
                    var nData = LyteComponent.getCmpData(node.component.data);
                    cmpData[key] = nData[key];
                });
                // htA -> helpertemplateApplied
                if (!_Lyte._ms && toAppend._ht && !toAppend._htA) {
                    toAppend._htA = true;
                    toAppend.content.append(toAppend._ht.content.cloneNode(true));
                }
                var yieldComp = node._callee;
                var content = parentScope.renderNodes(toAppend, toAppend._dynamicNodes || [], node, { "node": node }, true, undefined, toAppend._tC, yieldComp);
                if (!node.component.data.lyteUnbound) {
                    var nData = LyteComponent.getCmpData(node.component.data);
                    _LC.establishBindings(node._properties, nData);
                }
                parentScope.executeBlockHelpers(node._helpers);
                Object.keys(node._properties).forEach(function (key) {
                    cmpData[key] = contextSwitchingArray[key].value;
                    parentScope._properties[key] = contextSwitchingArray[key].property;
                });
                _LC.rmCx(toAppend, contextSwitchArray);
                node.appendChild(content);
            }

            // It constructs/updates the dynamicComponent creation
            //upddc

        }, {
            key: 'updateDynamicComponent',
            value: function updateDynamicComponent(node, update, contextSwitchInfo, establishBindings, idx, helperNode) {
                if (!node._specialNodes) {
                    node._specialNodes = [];
                }
                var returnVal = void 0;
                node._callee = this;
                var keepAlive = node.hasAttribute("lyte-keep-alive");
                if (!node._placeHolder) {
                    var emptyTextNode = document.createTextNode("");
                    _LC.replaceWithPf(node, emptyTextNode);
                    node._placeHolder = emptyTextNode;
                    emptyTextNode._helper = node;
                    // node._placeHolder.__lytehelper = node._placeHolder._helper;
                    node._placeHolder._actTemplate = node;
                    _LC.tDiv.content.appendChild(node);
                    if (this._removedTemplate) {
                        this._removedTemplate.push(node);
                    } else {
                        this._removedTemplate = [];
                        this._removedTemplate.push(node);
                    }
                }
                if (!node._renderedComponent) {
                    node._renderedComponent = {};
                    var id = _LC.createLyteId(this);
                    this.__dc[id] = node;
                    node.__lyteId = id;
                }
                //ssrcode_start
                if (this._ssrBind) {
                    var _id5 = void 0;
                    if (node.hasAttribute("bindId")) {
                        _id5 = node.getAttribute("bindId");
                    } else {
                        _id5 = this.getRandomId("6_"); //type + Math.floor( Math.random() * 1000 ); 
                        // dynamicN.setAttribute( "helperId", id );
                        node.setAttribute("bindId", _id5);
                    }
                    var _obj12 = { "id": _id5, "type": "6", "idx": idx };
                    if (helperNode) {
                        _obj12._helperId = helperNode.getAttribute("bindid");
                        if (/^(for|forIn)$/.test(helperNode.getAttribute("is"))) {
                            _obj12._forType = this.getssrType(helperNode.getAttribute("is"));
                            _obj12._forIndex = dynamicN._cx.itemIndex;
                        }
                    }
                    this.component.data.bindIds.push(_obj12);
                }
                //ssrcode_end
                node._cx = contextSwitchInfo || node._cx;
                node._dynamicProperty = node._dynamicProperty || {};
                var componentName = node.getAttribute("component-name") || (node._attributes ? node._attributes["component-name"] : undefined);
                if (!componentName) {
                    return;
                }
                var component = void 0,
                    newComponent = false;
                if (update) {
                    if (keepAlive) {
                        _LyteComponent._setIgnoreDisconnect(true);
                    }
                    if (node._renderedComponent[node._currentComponent]) {
                        var activeComponent = node._renderedComponent[node._currentComponent];
                        keepAlive ? _LC.hDiv.content.appendChild(activeComponent) : activeComponent.remove();
                    }
                    _LyteComponent._setIgnoreDisconnect(false);
                    if (!keepAlive) {
                        node._dynamicProperty = {};
                    }
                    if (node._renderedComponent[componentName] && keepAlive) {
                        component = node._renderedComponent[componentName];
                    } else {
                        var wdFlag = false;
                        if (this.__widget) {
                            ltCf.__widget = wdFlag = true;
                        }
                        component = createElement(componentName);
                        if (wdFlag) {
                            ltCf.__widget = false;
                        }
                        newComponent = true;
                    }
                } else {
                    var _wdFlag = false;
                    if (this.__widget) {
                        ltCf.__widget = _wdFlag = true;
                    }
                    component = createElement(componentName);
                    if (_wdFlag) {
                        ltCf.__widget = false;
                    }
                    newComponent = true;
                }
                if (!keepAlive && node._currentComponent) {
                    node._renderedComponent[node._currentComponent] = null;
                }
                if (newComponent) {
                    //          let componentData = {};
                    for (var _i26 = 0; _i26 < node.attributes.length; _i26++) {
                        if (node.attributes[_i26].name !== "is" && node.attributes[_i26].name !== "component-name" && node.attributes[_i26].name !== "lyte-keep-alive") {
                            component.setAttribute(node.attributes[_i26].name, node.attributes[_i26].value);
                        }
                    }
                    //          componentData = component._attributes;
                    if (node._attributes) {
                        for (var key in node._attributes) {
                            if (key !== "component-name") {
                                component.setData(_LC.String.toCamelCase(key), node._attributes[key]);
                            }
                        }
                    }
                    var toAppend = this.renderNodes(node, node._dynamicNodes, node, undefined, establishBindings, undefined, node._tC);
                    component.appendChild(toAppend);
                }
                if (newComponent) {
                    component._toRegEvnts = node._toRegEvnts;
                }
                if (!update) {
                    returnVal = { "toAppendMain": component, "lastNode": node };
                } else {
                    _LyteComponent._setIgnoreDisconnect(true);
                    if (!node._placeHolder) {
                        _insertBefore(node.parentNode, component, node);
                    } else {
                        _insertBefore(node._placeHolder.parentNode, component, node._placeHolder);
                    }
                    _LyteComponent._setIgnoreDisconnect(false);
                }
                node._renderedComponent[componentName] = component;
                node._currentComponent = componentName;
                component._callee = this;
                //ssrcode_start
                component._ssrBind = component._callee ? component._callee._ssrBind : false;
                //ssrcode_end
                component._actions = node._actions;
                component.setMethods(node._initMethods);
                component._attributeDetails = node._attributeDetails;
                component._boundEvents = node._boundEvents;
                component._cx = node._cx;
                return returnVal;
            }
        }, {
            key: 'beforeUpdateFor',
            value: function beforeUpdateFor(comp, helperNode, propValue, index) {
                // let index = options.itemIndex;
                var propObj = helperNode._items[index].propProperty;
                if (!propObj[propValue]) {
                    propObj[propValue] = {};
                }
                if (!comp._properties[propValue]) {
                    comp._properties[propValue] = {};
                }
                helperNode._properties = _defineProperty({}, propValue, propValue); //to make it as dynamicnode in bindNode
                var oldProp = propObj[propValue];
                propObj[propValue] = comp._properties[propValue];
                comp._properties[propValue] = oldProp;
            }
        }, {
            key: 'afterUpdateFor',
            value: function afterUpdateFor(comp, helperNode, propValue, options) {
                var index = options.itemIndex;
                var propObj = helperNode._items[index].propProperty;
                var oldProp = propObj[propValue];
                propObj[propValue] = this.getProperty(propValue);
                comp._properties[propValue] = oldProp;
            }
            //updFH
            // It constructs/updates the for helper. 

        }, {
            key: 'updateForHelper',
            value: function updateForHelper(node, options, contextSwitchInfo, establishBindings, staticTempArr, yieldComp, initialRender) {
                var hasChild = node.hasAttribute("has-child");
                if (!node._specialNodes) {
                    node._specialNodes = [];
                }
                if (!node._propNodes) {
                    node._propNodes = {};
                }
                if (node.tagName !== "TEMPLATE") {
                    Object.keys(node).forEach(function (item) {
                        if (item !== "innerHTML" && item !== "innerText") {
                            node._origTemplate[item] = node[item];
                        }
                    });
                    if (_Lyte._ie) {
                        var div = createElement("div");
                        div.innerHTML = node._tC;
                        node._origTemplate.innerHTML = div.children[0].innerHTML;
                        this.constr.splitTextNodes(node._origTemplate);
                        if (node.hasAttribute("depth")) {
                            node._origTemplate.setAttribute("depth", node.getAttribute("depth"));
                        }
                    }
                    var placeHolder = node._origTemplate._placeHolder = document.createTextNode("");
                    node._origTemplate.setAttribute("item", node.getAttribute("item"));
                    node._origTemplate.setAttribute("index", node.getAttribute("index"));
                    if ((window.isLyteWidget || window.__lyteEnablePromise) && node.hasAttribute("has-child")) {
                        node._origTemplate.setAttribute("has-child", node.getAttribute("has-child"));
                    }

                    if (node.hasAttribute("unbound")) {
                        //What if unbound is dynamic attribute ? It will be set in _attributes of node._origTemplate -> So No worries (y)
                        node._origTemplate.setAttribute("unbound", "true");
                    }
                    //node.replaceWith(node._origTemplate._placeHolder);
                    _LC.replaceWithPf(node, node._origTemplate._placeHolder);
                    node = _LC.replaceWithOrigTemplate(node);
                    // node = node._origTemplate;
                    node.setAttribute("is", "for");
                    _LC.apdNode(node, this);
                    placeHolder._helper = node;
                }
                // datasumma
                else if (!node._placeHolder) {
                        // var emptyTextNode = document.createTextNode("");
                        //node.replaceWith(emptyTextNode);
                        //to bind in ssr
                        var emptyTextNode, tnode;
                        //ssrcode_start
                        if (this._ssrBind) {
                            emptyTextNode = document.createElement("text");
                            emptyTextNode.setAttribute("placeHolderId", node.getAttribute('bindId'));
                        } else {
                            //ssrcode_end
                            emptyTextNode = document.createTextNode("");
                            //ssrcode_start
                        }
                        //ssrcode_end
                        _LC.replaceWithPf(node, emptyTextNode);
                        node._placeHolder = emptyTextNode;
                        emptyTextNode._helper = node;
                        _LC.apdNode(node, this);
                    }
                node._sta = node._sta || staticTempArr;
                var callee = this;
                node._callee = this;
                node._attributes = node._attributes || {};
                if (options.type === "update" && node._currentItems === node._attributes.items && (!options || !options.force)) {
                    return {};
                }
                node._cx = contextSwitchInfo || node._cx;
                var indexValue = node.getAttribute("index");
                if (!indexValue) {
                    node.setAttribute("index", "index");
                    indexValue = "index";
                }
                var itemValue = node.getAttribute("item");
                if (!itemValue) {
                    node.setAttribute("item", "item");
                    itemValue = "item";
                }
                if (node.hasAttribute("dir-obj")) {
                    node._dirObj = JSON.parse(node.getAttribute("dir-obj"));
                }
                var cmpData = LyteComponent.getCmpData(callee.component.data);
                var initialItemValue = cmpData[itemValue],
                    initialIndexValue = cmpData[indexValue];
                var initialItemProp = callee._properties[itemValue],
                    initialIndexProp = callee._properties[indexValue];
                callee._properties[itemValue] = callee._properties[indexValue] = {};
                var items = node._attributes.items,
                    content = node.content,
                    dynamicNodes = node._dynamicNodes,
                    lastNode = node;
                if (!node._items) {
                    node._items = [];
                }
                node._dynProps = node._dynProps || {};
                var lastIndexForIteration = void 0;
                var firstIndexForIteration = void 0;
                var firstIndex = options.firstIndex;
                var secondIndex = options.secondIndex;
                var thirdIndex = options.thirdIndex;
                var totalNodeIndex = firstIndex + secondIndex;
                var updateIndexProperty = true;
                var indexPropertyStartIndex = 0;
                if (options) {
                    switch (options.type) {
                        case "remove":
                            {
                                lastIndexForIteration = firstIndex;
                                indexPropertyStartIndex = firstIndex;
                                for (var _i27 = firstIndex, v = secondIndex; v > 0; v--, _i27++) {
                                    this.removeHelpersSpecificIndex(node, _i27);
                                }
                                _LCSV.for.beforeUpdate(node, [firstIndex, secondIndex], [], []);
                                //ln
                                /*for(let i=(firstIndex)?firstIndex-secondIndex:firstIndex;i<node._items.length;i++) {
                                    let forItem = node._items[i].itemProperty;
                                    if(forItem._helperNodes){
                                        for (var item of forItem._helperNodes){
                                            let ind = item._cx.itemIndex;
                                            item._cx.itemIndex = (ind)? ind- secondIndex : ind;
                                        }
                                    }
                                }*/
                                for (var _i28 = firstIndex + secondIndex; _i28 < node._items.length; _i28++) {
                                    node._items[_i28]._cx.itemIndex = node._items[_i28]._cx.itemIndex - secondIndex;
                                }
                                node._items.splice(firstIndex, secondIndex);
                                node._helpers.splice(firstIndex, secondIndex);
                                _LCSV.for.afterUpdate(node, [firstIndex, secondIndex], []);
                                node._forContent.splice(firstIndex, secondIndex);
                                node._specialNodes && node._specialNodes.splice(firstIndex, secondIndex);
                                // node._propNodes && node._propNodes.splice(firstIndex, secondIndex);
                                break;
                            }
                        case "insert":
                            {
                                firstIndexForIteration = firstIndex;
                                lastIndexForIteration = secondIndex;
                                indexPropertyStartIndex = firstIndex + secondIndex;
                                if (node._forContent[firstIndex]) {
                                    lastNode = node._forContent[firstIndex][0];
                                }
                                var newArr = [],
                                    newObj = [],
                                    newArr1 = [],
                                    newPropObj = [];
                                for (var _v = secondIndex, _k4 = firstIndex; _v > 0; _v--, _k4++) {
                                    newArr.push([]);
                                    newObj.push({});
                                    newArr1.push([]);
                                    newPropObj.push({ __dummy: true });
                                }
                                _LCSV.for.beforeUpdate(node, [firstIndex, 0], newPropObj, newObj);
                                node._helpers.splice.apply(node._helpers, [firstIndex, 0].concat(newArr));
                                node._items.splice.apply(node._items, [firstIndex, 0].concat(newObj));
                                _LCSV.for.afterUpdate(node, [firstIndex, 0], newPropObj);
                                //ln
                                //                  for(let i=firstIndex + secondIndex;i<node._items.length;i++) {
                                //                      let forItem = node._items[i].itemProperty;
                                //                      for (var item of forItem._helperNodes){
                                //                          item._cx.itemIndex = item._cx.itemIndex + secondIndex;
                                //                      }
                                //                  }
                                for (var _i29 = firstIndex + secondIndex; _i29 < node._items.length; _i29++) {
                                    node._items[_i29]._cx.itemIndex = node._items[_i29]._cx.itemIndex + secondIndex;
                                }
                                node._forContent.splice.apply(node._forContent, [firstIndex, 0].concat(newArr1));
                                node._specialNodes && node._specialNodes.splice.apply(node._specialNodes, [firstIndex, 0].concat(newArr1));
                                // node._propNodes && node._propNodes.splice.apply(node._propNodes,  [firstIndex, 0].concat(newArr1));
                            }
                            break;
                        case "replace":
                            {
                                firstIndexForIteration = firstIndex;
                                lastIndexForIteration = secondIndex;
                                indexPropertyStartIndex = firstIndex + secondIndex;
                                this.removeHelpersSpecificIndex(node, firstIndex); //removed bindning of prop of this node and child nodes - mean btn.ltProp , btn.some.some
                                var _newArr = [],
                                    _newObj = [],
                                    _newArr2 = [],
                                    _newPropObj = [];
                                for (var _v2 = secondIndex, _k5 = firstIndex; _v2 > 0; _v2--, _k5++) {
                                    _newArr.push([]);
                                    _newArr2.push([]);
                                    _newObj.push({});
                                    _newPropObj.push({ __dummy: true });
                                }
                                _LCSV.for.beforeUpdate(node, [options.firstIndex, 1], _newPropObj, _newObj);
                                var _toAppendMain = createDocFragment();
                                if (node._forContent[firstIndex + 1]) {
                                    lastNode = node._forContent[firstIndex + 1][0];
                                }
                                node._helpers.splice.apply(node._helpers, [firstIndex, 1].concat(_newArr));
                                node._items.splice.apply(node._items, [firstIndex, 1].concat(_newObj));
                                _LCSV.for.afterUpdate(node, [options.firstIndex, 1], _newPropObj);
                                //                  for(let i=firstIndex + secondIndex;i<node._items.length;i++) {
                                //                      let forItem = node._items[i].itemProperty._forItem;
                                //                      forItem.itemIndex = forItem.itemIndex + secondIndex - 1 ;
                                //                  }
                                for (var _i30 = firstIndex + secondIndex; _i30 < node._items.length; _i30++) {
                                    node._items[_i30]._cx.itemIndex = node._items[_i30]._cx.itemIndex + secondIndex - 1;
                                }
                                node._forContent.splice.apply(node._forContent, [firstIndex, 1].concat(_newArr2));
                                node._specialNodes && node._specialNodes.splice.apply(node._specialNodes, [firstIndex, 1].concat(_newArr2));
                                // node._propNodes && node._propNodes.splice.apply(node._propNodes,  [firstIndex, 1].concat(newArr1)); 
                                if (options.secondIndex == 1) {
                                    updateIndexProperty = false;
                                }
                                break;
                            }
                        case "splice":
                            {
                                firstIndexForIteration = firstIndex;
                                lastIndexForIteration = secondIndex;
                                indexPropertyStartIndex = firstIndex + secondIndex;
                                var _newArr3 = [],
                                    _newObj2 = [],
                                    _newArr4 = [],
                                    _newPropObj2 = [];
                                for (var _v3 = secondIndex, _k6 = firstIndex; _v3 > 0; _v3--, _k6++) {
                                    _newArr3.push([]);
                                    _newArr4.push([]);
                                    _newObj2.push({});
                                    _newPropObj2.push({ __dummy: true });
                                }
                                for (var _i31 = thirdIndex, j = 0; _i31 > 0; _i31--, j++) {
                                    this.removeHelpersSpecificIndex(node, firstIndex + j);
                                }
                                _LCSV.for.beforeUpdate(node, [firstIndex, thirdIndex], _newPropObj2, _newObj2);
                                var _toAppendMain2 = createDocFragment();
                                if (node._forContent[firstIndex + thirdIndex]) {
                                    lastNode = node._forContent[firstIndex + thirdIndex][0];
                                }
                                node._helpers.splice.apply(node._helpers, [firstIndex, thirdIndex].concat(_newArr3));
                                node._items.splice.apply(node._items, [firstIndex, thirdIndex].concat(_newObj2));
                                _LCSV.for.afterUpdate(node, [firstIndex, thirdIndex], _newPropObj2);
                                //                  for(let i=firstIndex + secondIndex;i<node._items.length;i++) {
                                //                      let forItem = node._items[i].itemProperty._forItem;
                                //                      forItem.itemIndex = forItem.itemIndex + secondIndex - 1 ;
                                //                  }
                                for (var _i32 = firstIndex + secondIndex; _i32 < node._items.length; _i32++) {
                                    node._items[_i32]._cx.itemIndex = node._items[_i32]._cx.itemIndex + secondIndex - thirdIndex;
                                }
                                node._forContent.splice.apply(node._forContent, [firstIndex, thirdIndex].concat(_newArr4));
                                node._specialNodes && node._specialNodes.splice.apply(node._specialNodes, [firstIndex, thirdIndex].concat(_newArr4));
                                // node._propNodes && node._propNodes.splice.apply(node._propNodes,  [firstIndex, thirdIndex].concat(newArr1));
                                if (options.secondIndex == options.thirdIndex) {
                                    updateIndexProperty = false;
                                }
                                break;
                            }
                            break;
                        case "update":
                            {
                                var _key24 = node.getAttribute("item");
                                //                  this.removeHelpers(node, true);
                                for (var _i33 = 0; _i33 < node._items.length; _i33++) {
                                    this.removeHelpersSpecificIndex(node, _i33);
                                    _LCSV.for.update(node);
                                }
                                //                  if(node._attributes.items) {
                                //                      for(let i=0;i<node._attributes.items.length && node._items[i];i++) {
                                //                          _LC.removeSelectedBindingDeep(node._items[i].itemProperty[key], node._attributes.items[i]);
                                //                      }
                                //                  }
                                node._items = [];
                            }
                        case "default":
                            {
                                node._forContent = [];
                                node._specialNodes = [];
                                node._propNodes = {};
                                node._helpers = [];
                                firstIndexForIteration = 0;
                                lastIndexForIteration = items ? items.length : 0;
                                indexPropertyStartIndex = items ? items.length : 0;
                            }
                            break;
                        default:
                            _Lyte.error("Error in updateForHelper");
                    }
                }
                if (!lastNode) {
                    lastNode = node;
                }
                if (lastNode != node && node._helpers.length > 0 && (options.type == "insert" || "replace" || "splice")) {
                    lastNode = _LC.findLastNodeL(lastNode, totalNodeIndex, node);
                }
                var returnVal = void 0;
                var localUnbound = false;
                var initialUnbound = _LC.unbound;
                if (node.hasAttribute("unbound") || node._attributes && node._attributes.unbound && node._attributes.unbound !== "false") {
                    localUnbound = true;
                    _LC.unbound = true;
                }
                if (!node._fRender && (node.getAttribute("unbound") == "lyteFastRender" || node._attributes && node._attributes.unbound == "lyteFastRender")) {
                    node._fRender = true;
                }
                node._currentItems = items;
                if (!_Lyte._ms && lastIndexForIteration - firstIndexForIteration > 0 || (window.isLyteWidget || window.__lyteEnablePromise) && items instanceof Promise) {
                    if (node._ht && !node._htA) {
                        node.content.append(node._ht.content.cloneNode(true));
                        node._htA = true;
                    }
                }
                var currentCaseName = void 0;
                var dirObjData = { data: {}, prop: {} };
                var dirObjProp = { data: {}, prop: {} };
                var trueNode = node;
                if (options.type !== "remove") {
                    var totalString = "";
                    var domArr = [];
                    var toAppendMain = createDocFragment();
                    if (hasChild && (window.isLyteWidget || window.__lyteEnablePromise)) {
                        var scope = void 0,
                            renderPromiseNodes = true;
                        var status = items instanceof Promise ? items.__lyte.status : "resolved";
                        switch (status) {
                            case "init":
                                {
                                    currentCaseName = '__lyteAwait__';
                                }break;
                            case "resolved":
                                {
                                    currentCaseName = 'true';
                                    renderPromiseNodes = false;
                                }break;
                            case "rejected":
                                {
                                    currentCaseName = '__lyteFail__';
                                }break;

                        }
                        if (node._promiseContent && node._promiseContent.length) {
                            this.removeHelpers(node, undefined, true);
                        }
                        trueNode = node.content.querySelector("[case=" + currentCaseName + "]");
                        scope = node._cases[currentCaseName];
                        trueNode._ht = scope._ht;
                        if (trueNode._ht && !trueNode._htA) {
                            trueNode.content.append(trueNode._ht.content.cloneNode(true));
                            trueNode._htA = true;
                        }
                        dynamicNodes = scope.dynamicNodes;
                        if (renderPromiseNodes) {
                            this.renderPromiseNodes(trueNode, dynamicNodes, node, {}, establishBindings, undefined, node._tC, yieldComp, toAppendMain);
                        }
                    }
                    _LCSV.beforeDirObj(node, dirObjData, dirObjProp);
                    for (var _k7 = firstIndexForIteration, _v4 = lastIndexForIteration; _v4 > 0; _k7++, _v4--) {
                        node._helpers[_k7] = [];
                        node._specialNodes[_k7] = [];
                        node._items[_k7] = { "_dynamicProperty": {}, "itemProperty": {}, "indexProperty": {}, "propProperty": {}, "propPropertyDyn": {}, "propNodes": {} };
                        cmpData[itemValue] = items[_k7];
                        cmpData[indexValue] = _k7;
                        var cacheData = {};
                        cacheData[itemValue] = {};
                        cacheData[itemValue]._data = items[_k7];
                        cacheData[itemValue]._dyn = [itemValue];
                        cacheData[indexValue] = {};
                        cacheData[indexValue]._data = _k7;
                        cacheData[indexValue]._dyn = [indexValue];
                        callee._properties[itemValue] = {};
                        callee._properties[indexValue] = {};
                        var optns = { "itemValue": itemValue, "itemIndex": _k7, "type": "for", "node": node, "indexValue": indexValue };
                        //                  defProp(callee._properties[itemValue], '_forItem', {
                        //                      enumerable: false, 
                        //                      writable: true, 
                        //                      configurable: true, 
                        //                      value : optns
                        //                  });
                        node._items[_k7]._cx = optns;
                        var breakCheck = {};
                        var toAppend = void 0;
                        if (node._fRender) {
                            var str = this.renderFast(dynamicNodes, node._sta, this.component);
                            totalString = totalString + str;
                            // var template = document.createElement("template");
                            // template.innerHTML = str;
                            // toAppend = template.content;
                        } else {
                            dynamicNodes._cache = cacheData;
                            toAppend = this.renderNodes(trueNode.hasAttribute("depth") && trueNode._depthTemp ? trueNode._depthTemp : trueNode, dynamicNodes, node, optns, establishBindings, breakCheck, node._tC, yieldComp);
                        }

                        //to bind in ssr components
                        //ssrcode_start
                        if (this._ssrBind) {
                            var _childNodes = Array.from(toAppend.childNodes),
                                id = this.getRandomId("4_"),
                                // for
                            _obj13 = {
                                type: "4C", // forContent
                                forIndex: _k7,
                                forId: id,
                                _helperId: node.getAttribute('bindId'),
                                _item: itemValue,
                                _index: indexValue
                            };
                            this.component.data.bindIds.push(_obj13);
                            var newFrag = document.createDocumentFragment();
                            for (var _i34 = 0; _i34 < _childNodes.length; _i34++) {
                                // if( childNodes[ i ].nodeType == 3 ){
                                //     let textEle = document.createElement( "text" );
                                //     textEle.innerText = "";
                                //     childNodes[ i ] = textEle;
                                // }
                                if (_childNodes[_i34].nodeType == 3) {
                                    if (_childNodes[_i34 - 1] && _childNodes[_i34 - 1].localName == "text") {
                                        _childNodes[_i34 - 1].setAttribute("forId", id);
                                    } else if (_childNodes[_i34].nodeValue != "" && _childNodes[_i34].nodeValue != " ") {
                                        var textEle = document.createElement("text");
                                        textEle.innerText = "";
                                        textEle.setAttribute("forId", id);
                                        newFrag.appendChild(textEle);
                                    }
                                    // var pS = childNodes[ i ].previousSibling && childNodes[ i ].previousSibling.wholeText == childNodes[ i ].wholeText ? childNodes[ i ].previousSibling : childNodes[ i ];
                                    // toBeInsMap.set(textEle, {pN: childNodes[ i ].parentNode, cN: childNodes[ i ]});
                                    // childNodes[ i ] = textEle;
                                } else if (_childNodes[_i34].localName !== "textend") {
                                    _childNodes[_i34].setAttribute("forId", id);
                                }
                                if (_childNodes[_i34].localName !== "textend") {
                                    newFrag.appendChild(_childNodes[_i34]);
                                }
                            }
                            toAppend = newFrag;
                        }
                        //ssrcode_end
                        var dynProps = Object.keys(node._items[_k7]._dynamicProperty);
                        for (var d = 0; d < dynProps.length; d++) {
                            var _key25 = dynProps[d];
                            node._dynProps[_key25] ? node._dynProps[_key25]++ : node._dynProps[_key25] = 1;
                        }
                        node._items[_k7].itemProperty = this.getProperty(itemValue);
                        node._items[_k7].indexProperty = this.getProperty(indexValue);
                        //                  if(options.type !== "default") {
                        if (!_LC.unbound) {
                            _LC.establishBindings(_defineProperty({}, itemValue, node._items[_k7].itemProperty), _defineProperty({}, itemValue, node._attributes.items[_k7]));
                            // for(let propName in node._items[k].propProperty){
                            //     _LC.establishBindings({[propName] : this.getProperty(propName)} ,this.component.data);    
                            // }
                        }
                        //                  }
                        if (!node._fRender) {
                            node._forContent[_k7] = Array.from(toAppend.childNodes);
                        } else {
                            domArr.push(node._forContent[_k7] = []);
                        }
                        //Needs to revisit this and make sure it happen within renderNodes function itself;
                        //                  if(options.type !== "update") {
                        this.executeBlockHelpers(node._helpers[_k7], node);
                        if (!node._fRender) {
                            toAppendMain.appendChild(toAppend);
                        }
                        if (breakCheck.stop) {
                            break;
                        }
                    }
                    if (node._fRender) {
                        var s = document.createElement("template");
                        s.innerHTML = totalString;
                        toAppendMain.appendChild(s.content);
                        _LC.processAction(toAppendMain);
                        var childrenArr;
                        if (_Lyte._ie) {
                            childrenArr = [];
                            var childNodes = toAppendMain.childNodes;
                            for (var i = 0; i < childNodes.length; i++) {
                                if (childNodes[i].nodeType == 1) {
                                    childrenArr.push(childNodes[i]);
                                }
                            }
                        } else {
                            childrenArr = toAppendMain.children;
                        }
                        for (var i = 0; i < domArr.length; i++) {
                            domArr[i].push(childrenArr[i]);
                        }
                        requestAnimationFrame(function () {
                            requestAnimationFrame(function () {
                                _LC.callCC();
                            });
                        });
                    }
                    //Provided so that before appending the component to DOM it is reset to previous value
                    _LC.unbound = initialUnbound;
                    if (options.type === "default") {
                        returnVal = { "toAppendMain": toAppendMain, "lastNode": lastNode };
                    } else {
                        //lastNode.parentNode.insertBefore(toAppendMain, lastNode);
                        if (lastNode._placeHolder) {
                            _insertBefore(lastNode._placeHolder.parentNode, toAppendMain, lastNode._placeHolder);
                        } else {
                            _insertBefore(lastNode.parentNode, toAppendMain, lastNode);
                        }
                    }
                    if (!localUnbound && node._removedAttributes && node._removedAttributes.items && !node._removedAttributes.items.helperValue && node._removedAttributes.items._multipleProperty) {
                        _LC.establishBindings({ "items": node._removedAttributes.items._multipleProperty[0].actProp }, { "items": items });
                    }
                }
                _LC.unbound = initialUnbound;
                if (updateIndexProperty) {
                    for (var _i35 = indexPropertyStartIndex; _i35 < node._items.length; _i35++) {
                        if (node._items[_i35].indexProperty) {
                            _LC.affectChanges(node._items[_i35].indexProperty);
                        }
                    }
                }
                cmpData[itemValue] = initialItemValue;
                cmpData[indexValue] = initialIndexValue;
                callee._properties[itemValue] = initialItemProp;
                callee._properties[indexValue] = initialIndexProp;
                _LCSV.afterDirObj(node, dirObjData, dirObjProp);
                _LCSV.afterRender(node, this, dirObjProp, options, initialRender);
                node._currentItems = items;
                return returnVal;
            }
        }, {
            key: 'renderPromiseNodes',
            value: function renderPromiseNodes(trueNode, dynamicNodes, node, optns, establishBindings, returnVal, templateContent, yieldComp, toAppendMain) {
                var toAppend = this.renderNodes(trueNode, dynamicNodes, undefined, /*node,*/{}, establishBindings, undefined, templateContent, yieldComp);
                node._promiseContent = [];
                var contentArr = [toAppend];
                for (var _i36 = 0; _i36 < contentArr.length; _i36++) {
                    if (contentArr[_i36].nodeType == 11) {
                        node._promiseContent = node._promiseContent.concat(Array.from(contentArr[_i36].childNodes));
                    } else {
                        node._promiseContent.push(contentArr[_i36]);
                    }
                    toAppendMain.append(contentArr[_i36]);
                }
            }
            //It constructs/updates forIn Helper.
            //updFIH

        }, {
            key: 'updateForInHelper',
            value: function updateForInHelper(node, options, contextSwitchInfo, establishBindings, yieldComp, initialRender) {
                var hasChild = node.hasAttribute("has-child");
                if (!node._specialNodes) {
                    node._specialNodes = [];
                }
                if (!node._propNodes) {
                    node._propNodes = {};
                }
                if (node.tagName !== "TEMPLATE") {
                    Object.keys(node).forEach(function (item) {
                        if (item !== "innerHTML" && item !== "innerText") {
                            node._origTemplate[item] = node[item];
                        }
                    });
                    if (_Lyte._ie) {
                        var div = createElement("div");
                        div.innerHTML = node._tC;
                        node._origTemplate.innerHTML = div.children[0].innerHTML;
                        this.constr.splitTextNodes(node._origTemplate);
                        if (node.hasAttribute("depth")) {
                            node._origTemplate.setAttribute("depth", node.getAttribute("depth"));
                        }
                    }
                    var placeHolder = node._origTemplate._placeHolder = document.createTextNode("");
                    node._origTemplate.setAttribute("key", node.getAttribute("key"));
                    node._origTemplate.setAttribute("value", node.getAttribute("value"));
                    if (node.hasAttribute("unbound")) {
                        //What if unbound is dynamic attribute ? 
                        node._origTemplate.setAttribute("unbound", "true");
                    }
                    if ((window.isLyteWidget || window.__lyteEnablePromise) && node.hasAttribute("has-child")) {
                        node._origTemplate.setAttribute("has-child", node.getAttribute("has-child"));
                    }

                    //node.replaceWith(node._origTemplate._placeHolder);
                    _LC.replaceWithPf(node, node._origTemplate._placeHolder);
                    node = _LC.replaceWithOrigTemplate(node);
                    // node = node._origTemplate;
                    node.setAttribute("is", "forIn");
                    _LC.apdNode(node, this);
                    placeHolder._helper = node;
                } else if (!node._placeHolder) {
                    // var emptyTextNode = document.createTextNode("");
                    //node.replaceWith(emptyTextNode);
                    //to bind in ssr
                    var emptyTextNode;
                    //ssrcode_start
                    if (this._ssrBind) {
                        emptyTextNode = document.createElement("text");
                        emptyTextNode.setAttribute("placeHolderId", node.getAttribute('bindId'));
                    } else {
                        //ssrcode_end
                        emptyTextNode = document.createTextNode("");
                        //ssrcode_start
                    }
                    //ssrcode_end
                    _LC.replaceWithPf(node, emptyTextNode);
                    node._placeHolder = emptyTextNode;
                    _LC.apdNode(node, this);
                    emptyTextNode._helper = node;
                }
                var callee = this;
                node._callee = this;
                node._attributes = node._attributes || {};
                if (options.type === "update" && node._currentObject === node._attributes.object && (!options || !options.force)) {
                    return {};
                }
                contextSwitchInfo = contextSwitchInfo ? contextSwitchInfo : node._cx;
                node._cx = contextSwitchInfo;
                var key = node.getAttribute("key");
                if (!key) {
                    key = "key";
                    node.setAttribute("key", "key");
                }
                var value = node.getAttribute("value");
                if (!value) {
                    value = "value";
                    node.setAttribute("value", "value");
                }
                _LCSV.setDirObj(node);
                var cmpData = LyteComponent.getCmpData(callee.component.data);
                var initialKeyValue = cmpData[key];
                var initialValueValue = cmpData[value];
                var initialKeyProp = callee._properties[key];
                var initialValueProp = callee._properties[value];
                callee._properties[key] = callee._properties[value] = {};
                var object = node._attributes.object;
                var content = node.content;
                var dynamicNodes = node._dynamicNodes;
                var lastNode = node;
                var keysArray = [];
                if (!node._items) {
                    node._items = {};
                }
                node._dynProps = node._dynProps || {};
                if (options) {
                    switch (options.type) {
                        case "delete":
                            {
                                this.removeHelpersSpecificIndex(node, options.property, undefined, options.type);
                                _LCSV.forIn.delete(node, options);
                                var delIndex = node._keysArray.indexOf(options.property);
                                if (delIndex > -1) {
                                    node._keysArray.splice(delIndex, 1);
                                }
                                if (node._helpers) {
                                    delete node._helpers[options.property];
                                }
                                delete node._propBindingObject[options.property];
                                node._forContent[options.property] = null;
                                delete node._forContent[options.property];
                            }
                            break;
                        case "add":
                            {
                                var replace = false;
                                keysArray = [options.property]; //what if options.propety is array
                                replace = node._keysArray.indexOf(options.property) != -1 ? true : false;
                                !replace && node._keysArray.push(options.property);
                                var returnedLastNode = _LCSV.forIn.add(node, options, keysArray, replace);
                                if (returnedLastNode) {
                                    lastNode = returnedLastNode;
                                }
                            }
                            break;
                        case "update":
                            {
                                node._keysArray.forEach(function (itemKey, index, array) {
                                    this.removeHelpersSpecificIndex(node, itemKey, undefined, options.type);
                                }, this);
                                _LCSV.forIn.update(node);
                                node._keysArray = keysArray = object ? Object.keys(object) : [];
                                node._helpers = {};
                                node._items = {};
                                node._propBindingObject = {};
                            }
                        // break;
                        case "default":
                            {
                                node._forContent = {};
                                node._specialNodes = {};
                                node._propNodes = {};
                                node._helpers = {};
                                node._keysArray = keysArray = object ? Object.keys(object) : [];
                                //                  keysArray = Object.keys(object);
                            }
                            break;
                        default:
                            _Lyte.error("Error in updateForHelper");

                    }
                }
                var returnVal = void 0;
                if (!object) {
                    var _toAppendMain3 = createDocFragment();
                    if (options.type !== "default") {
                        _insertBefore(lastNode.parentNode, _toAppendMain3, lastNode);
                    } else {
                        returnVal = { "toAppendMain": _toAppendMain3, "lastNode": lastNode };
                    }
                }
                var localUnbound = false;
                var initialUnbound = _LC.unbound;
                if (node.hasAttribute("unbound") || node._attributes && node._attributes.unbound) {
                    localUnbound = true;
                    _LC.unbound = true;
                }
                node._currentObject = object;
                if (!_Lyte._ms && (keysArray.length || (window.isLyteWidget || window.__lyteEnablePromise) && object instanceof Promise) && node._ht && !node._htA) {
                    node.content.append(node._ht.content.cloneNode(true));
                    node._htA = true;
                }
                var currentCaseName = void 0;
                var trueNode = node;
                var dirObjData = { data: {}, prop: {} };
                var dirObjProp = { data: {}, prop: {} };
                if (object && options.type !== "remove") {
                    var toAppendMain = createDocFragment();
                    node._propBindingObject = node._propBindingObject || {};
                    if (hasChild && (window.isLyteWidget || window.__lyteEnablePromise)) {
                        var scope = void 0,
                            renderPromiseNodes = true;
                        var status = object instanceof Promise ? object.__lyte.status : "resolved";
                        switch (status) {
                            case "init":
                                {
                                    currentCaseName = '__lyteAwait__';
                                }break;
                            case "resolved":
                                {
                                    currentCaseName = 'true';
                                    renderPromiseNodes = false;
                                }break;
                            case "rejected":
                                {
                                    currentCaseName = '__lyteFail__';
                                }break;

                        }
                        if (node._promiseContent && node._promiseContent.length) {
                            this.removeHelpers(node, undefined, true);
                        }
                        trueNode = node.content.querySelector("[case=" + currentCaseName + "]");
                        scope = node._cases[currentCaseName];
                        trueNode._ht = scope._ht;
                        if (trueNode._ht && !trueNode._htA) {
                            trueNode.content.append(trueNode._ht.content.cloneNode(true));
                            trueNode._htA = true;
                        }
                        dynamicNodes = scope.dynamicNodes;
                        if (renderPromiseNodes) {
                            this.renderPromiseNodes(trueNode, dynamicNodes, node, {}, establishBindings, undefined, node._tC, yieldComp, toAppendMain);
                        }
                    }
                    _LCSV.beforeDirObj(node, dirObjData, dirObjProp);
                    keysArray.forEach(function (itemKey, index, array) {
                        node._helpers[itemKey] = [];
                        node._specialNodes[itemKey] = [];
                        node._items[itemKey] = { "_dynamicProperty": {}, "itemProperty": {}, "propProperty": {}, "propPropertyDyn": {}, "propNodes": {} };
                        cmpData[key] = itemKey;
                        cmpData[value] = object[itemKey];
                        callee._properties[key] = {};
                        callee._properties[value] = {};
                        var cacheData = {};
                        cacheData[key] = {};
                        cacheData[key]._data = itemKey;
                        cacheData[key]._dyn = [key];
                        cacheData[value] = {};
                        cacheData[value]._data = object[itemKey];
                        cacheData[value]._dyn = [value];
                        var optns = { "itemIndex": itemKey, "itemValue": value, "keyValue": key, "type": "forIn", "node": node };
                        node._items[itemKey]._cx = optns;
                        dynamicNodes._cache = cacheData;
                        var toAppend = this.renderNodes(trueNode.hasAttribute("depth") && trueNode._depthTemp ? trueNode._depthTemp : trueNode, dynamicNodes, node, optns, establishBindings, undefined, node._tC, yieldComp);
                        Object.keys(node._items[itemKey]._dynamicProperty).forEach(function (key) {
                            node._dynProps[key] ? node._dynProps[key]++ : node._dynProps[key] = 1;
                        });
                        node._items[itemKey].itemProperty = this.getProperty(value);
                        node._propBindingObject[itemKey] = node._items[itemKey].itemProperty;
                        node._forContent[itemKey] = Array.from(toAppend.childNodes);
                        //                    this.updateBlockHelpers(node._helpers[itemKey], optns);
                        this.executeBlockHelpers(node._helpers[itemKey], node);

                        //to bind in ssr components
                        //ssrcode_start
                        if (this._ssrBind) {
                            var childNodes = Array.from(toAppend.childNodes),
                                id = this.getRandomId("4_"),
                                // for
                            _obj14 = {
                                type: "4C", // forContent
                                forIndex: itemKey,
                                forId: id,
                                _helperId: node.getAttribute('bindId'),
                                _key: key,
                                _value: value
                            };
                            this.component.data.bindIds.push(_obj14);
                            toAppend.innerHTML = "";
                            var newFrag = document.createDocumentFragment();
                            for (var _i37 = 0; _i37 < childNodes.length; _i37++) {
                                // if( childNodes[ i ].nodeType == 3 ){
                                //     let textEle = document.createElement( "text" );
                                //     textEle.innerText = "";
                                //     childNodes[ i ] = textEle;
                                // }
                                if (childNodes[_i37].nodeType == 3) {
                                    if (childNodes[_i37 - 1] && childNodes[_i37 - 1].localName == "text") {
                                        childNodes[_i37 - 1].setAttribute("forId", id);
                                    } else if (childNodes[_i37].nodeValue != "" && childNodes[_i37].nodeValue != " ") {
                                        var textEle = document.createElement("text");
                                        textEle.innerText = "";
                                        textEle.setAttribute("forId", id);
                                        newFrag.appendChild(textEle);
                                    }
                                    // var pS = childNodes[ i ].previousSibling && childNodes[ i ].previousSibling.wholeText == childNodes[ i ].wholeText ? childNodes[ i ].previousSibling : childNodes[ i ];
                                    // toBeInsMap.set(textEle, {pN: childNodes[ i ].parentNode, cN: childNodes[ i ]});
                                    // childNodes[ i ] = textEle;
                                } else if (childNodes[_i37].localName !== "textend") {
                                    childNodes[_i37].setAttribute("forId", id);
                                }
                                if (childNodes[_i37].localName !== "textend") {
                                    newFrag.appendChild(childNodes[_i37]);
                                }
                            }
                            toAppend = newFrag;
                        }
                        //ssrcode_end
                        toAppendMain.appendChild(toAppend);
                    }, this);
                    //              if(options.type !== "update") {
                    if (!_LC.unbound) {
                        // makeSet(node._attributes.object, "_bindings");
                        addBindings(node._attributes.object, node._propBindingObject);
                        _LC.establishBindings(node._propBindingObject, node._attributes.object);
                    }
                    //              }
                    _LC.unbound = initialUnbound;
                    if (options.type !== "default") {
                        //lastNode.parentNode.insertBefore(toAppendMain, lastNode);
                        if (lastNode._placeHolder) {
                            _insertBefore(lastNode._placeHolder.parentNode, toAppendMain, lastNode._placeHolder);
                        } else {
                            _insertBefore(lastNode.parentNode, toAppendMain, lastNode);
                        }
                    } else {
                        returnVal = { "toAppendMain": toAppendMain, "lastNode": lastNode };
                    }
                }
                _LC.unbound = initialUnbound;
                cmpData[key] = initialKeyValue;
                cmpData[value] = initialValueValue;
                callee._properties[key] = initialKeyProp;
                callee._properties[value] = initialValueProp;
                _LCSV.afterDirObj(node, dirObjData, dirObjProp);
                _LCSV.afterRender(node, this, dirObjProp, options, initialRender);
                node._currentObject = object;
                return returnVal;
            }
            //updSH

        }, {
            key: 'updateSwitchHelper',
            value: function updateSwitchHelper(type, node, contextSwitchInfo, update, establishBindings, yieldComp, id, toBeInsMap) {
                // let hasChild = node.hasAttribute("has-child");
                if (!node._specialNodes) {
                    node._specialNodes = [];
                }
                if (!_Lyte._ms && node._ht && !node._htA) {
                    node.content.append(node._ht.content.cloneNode(true));
                    node._htA = true;
                }
                if (node.tagName !== "TEMPLATE") {
                    Object.keys(node).forEach(function (item) {
                        if (item !== "innerHTML" && item !== "innerText") {
                            node._origTemplate[item] = node[item];
                        }
                    });
                    if (_Lyte._ie) {
                        var div = createElement("div");
                        div.innerHTML = node._tC;
                        node._origTemplate.innerHTML = div.children[0].innerHTML;
                        this.constr.splitTextNodes(node._origTemplate);
                        if (node.hasAttribute("depth")) {
                            node._origTemplate.setAttribute("depth", node.getAttribute("depth"));
                        }
                    }
                    var placeHolder = node._origTemplate._placeHolder = document.createTextNode("");
                    //node.replaceWith(node._origTemplate._placeHolder);
                    _LC.replaceWithPf(node, node._origTemplate._placeHolder);
                    // node = node._origTemplate;
                    node = _LC.replaceWithOrigTemplate(node);
                    node.setAttribute("is", type);
                    _LC.apdNode(node, this);
                    placeHolder._helper = node;
                } else if (!node._placeHolder) {
                    var emptyTextNode;
                    //node.replaceWith(emptyTextNode);
                    //ssrcode_start
                    if (this._ssrBind) {
                        emptyTextNode = document.createElement("text");
                        emptyTextNode.setAttribute("placeHolderId", node.getAttribute('bindId'));
                    } else {
                        //ssrcode_end
                        emptyTextNode = document.createTextNode("");
                        //ssrcode_start
                    }
                    //ssrcode_end
                    _LC.replaceWithPf(node, emptyTextNode);
                    node._placeHolder = emptyTextNode;
                    emptyTextNode._helper = node;
                    _LC.apdNode(node, this);
                }
                var isNew = false;
                var lastNode = node;
                if (!node._callee) {
                    node._callee = this;
                    isNew = true;
                }
                contextSwitchInfo = contextSwitchInfo ? contextSwitchInfo : node._cx;
                node._cx = contextSwitchInfo;
                node._dynamicProperty = node._dynamicProperty ? node._dynamicProperty : {};
                var currentCaseName = void 0;
                var value = void 0;
                if (node.getAttribute("value") === "" || node.getAttribute("value")) {
                    value = node.getAttribute("value");
                } else if (node._attributes) {
                    value = node._attributes.value;
                }
                // if(node._currentCase && value === node._currentCase){
                //     return;
                // }
                if (value) {
                    var status = value instanceof Promise ? value.__lyte.status : "resolved";
                    switch (status) {
                        case "init":
                            {
                                currentCaseName = '__lyteAwait__';
                            }break;
                        case "rejected":
                            {
                                currentCaseName = '__lyteFail__';
                            }break;
                        case "resolved":
                            {
                                // currentCaseName = 'true';
                                // renderPromiseNodes = false;
                                currentCaseName = type === "if" ? "true" : value.toString();
                            }
                    }
                } else {
                    if (type === "if") {
                        currentCaseName = "false";
                    } else {
                        switch (value) {
                            case undefined:
                                currentCaseName = "undefined";
                                break;
                            case null:
                                currentCaseName = "null";
                                break;
                            case false:
                                currentCaseName = "false";
                                break;
                            case "":
                                currentCaseName = '""';
                                break;
                            case 0:
                                currentCaseName = '0';
                        }
                    }
                }
                if (currentCaseName === node._currentCase) {
                    return;
                }
                node._currentCase = currentCaseName;
                var nodeTemp = node._depthTemp || node;
                //        let currentCase = node.content.querySelector('[case=\''+currentCaseName+'\']'),scope;
                var scope = node._cases[currentCaseName];
                var defaultContent = void 0;
                if (!scope) {
                    scope = node._default;
                    defaultContent = _Lyte._ms ? scope.templateContent : nodeTemp.content.querySelector('[default]');
                    if (!_Lyte._ms && scope._ht && !defaultContent._htA) {
                        defaultContent._htA = true;
                        defaultContent.content.append(scope._ht.content.cloneNode(true));
                    }
                    node._isDefault = true;
                    if (!defaultContent) {
                        if (node._caseContent && node._caseContent.length) {
                            this.removeHelpers(node, undefined, true);
                        }
                        node._caseContent = [];
                        var _emptyTextNode = document.createTextNode("");
                        node._caseContent.push(_emptyTextNode);
                        node._currentCaseName = currentCaseName;
                        node._helpers = node._helpers || [];
                        if (update) {
                            //lastNode.parentNode.insertBefore(emptyTextNode, node);
                            if (lastNode._placeHolder) {
                                _insertBefore(lastNode._placeHolder.parentNode, _emptyTextNode, lastNode._placeHolder);
                            } else {
                                _insertBefore(lastNode.parentNode, _emptyTextNode, node);
                            }
                            return;
                        } else {
                            var _toAppendMain4 = createDocFragment();
                            _toAppendMain4.append(_emptyTextNode);
                            return { lastNode: lastNode, toAppendMain: _toAppendMain4 };
                        }
                    }
                }

                //        if(currentCase) {
                //              if(currentCase.tagName === "TEMPLATE" && !currentCase.getAttribute("is")){
                //                  currentCase = currentCase.content;
                //              } else {
                //                  let temp = createElement('template');
                //                  let clone = currentCase.cloneNode(true);
                //                  temp.content.appendChild(clone);
                //                  currentCase.removeAttribute('slot');
                //                  currentCase = temp.content;
                //              }
                //              scope.content = currentCase;
                //        }

                if (node._caseContent && node._caseContent.length) {
                    this.removeHelpers(node, undefined, true);
                }
                var dummyScope = scope;
                var additionalContentArr = [];
                var cnt = 0;
                var dummyCaseName = currentCaseName;
                var template = void 0;
                if (defaultContent) {
                    template = defaultContent;
                } else {
                    template = _Lyte._ms ? {} : nodeTemp.content.querySelector('[case=\'' + _LC.cssEscape(dummyCaseName) + '\']');
                }
                var contentArr = [];
                while (dummyScope) {
                    if (!_Lyte._ms && dummyScope._ht && !template._htA) {
                        template._htA = true;
                        template.content.append(dummyScope._ht.content.cloneNode(true));
                    }
                    var dynamicNodes = dummyScope.dynamicNodes;
                    var compName = template.getAttribute("render-view-port-template");
                    if (compName) {
                        var compConstr = LyteComponent._registeredComponents[compName];
                        if (compConstr) {
                            var preTemp = compConstr.component._preRenderTemplate;
                            if (!preTemp) {
                                _Lyte.error("Viewport template for the component '" + compName + "' not found.");
                            }
                            var root = preTemp.getAttribute("root");
                            var viewTempContent = preTemp.content.cloneNode(true);
                            !root && template.content.appendChild(document.createElement("dummy-view-port"));
                            template.content.appendChild(viewTempContent);
                            root && template.content.appendChild(document.createElement("dummy-view-port"));
                        } else {
                            _Lyte.error("Unable to load viewport template for the component '" + compName + "' . Since it is not registered yet.");
                        }
                    }
                    var processedContent = this.renderNodes(template, dynamicNodes, node, undefined, establishBindings, undefined, dummyScope.templateContent, yieldComp);

                    //to bind ssr in if/switch
                    //ssrcode_start
                    if (this._ssrBind) {
                        var childNodes = Array.from(processedContent.childNodes),
                            newFrag = new DocumentFragment();
                        // processedContent.textContent = "";
                        for (var _i38 = 0; _i38 < childNodes.length; _i38++) {
                            if (childNodes[_i38].nodeType == 3) {
                                if (childNodes[_i38 - 1] && childNodes[_i38 - 1].localName == "text") {
                                    childNodes[_i38 - 1].setAttribute("pbindid", id);
                                } else if (childNodes[_i38].nodeValue != "" && childNodes[_i38].nodeValue != " ") {
                                    var textEle = document.createElement("text");
                                    textEle.innerText = "";
                                    textEle.setAttribute("pBindId", id);
                                    newFrag.appendChild(textEle);
                                }
                                // var pS = childNodes[ i ].previousSibling && childNodes[ i ].previousSibling.wholeText == childNodes[ i ].wholeText ? childNodes[ i ].previousSibling : childNodes[ i ];
                                // toBeInsMap.set(textEle, {pN: childNodes[ i ].parentNode, cN: childNodes[ i ]});
                                // childNodes[ i ] = textEle;
                            } else if (childNodes[_i38].localName !== "textend") {
                                childNodes[_i38].setAttribute("pBindId", id);
                            }
                            if (childNodes[_i38].localName !== "textend") {
                                newFrag.appendChild(childNodes[_i38]);
                            }
                        }
                        processedContent = newFrag;
                    }
                    //ssrcode_end

                    contentArr.push(processedContent);
                    if (dummyScope.additional) {
                        if (dummyScope.additional.next) {
                            template = _Lyte._ms ? {} : node.content.querySelector('[case=\'' + _LC.cssEscape(dummyScope.additional.next) + '\']');
                            dummyScope = node._cases[dummyScope.additional.next];
                        } else {
                            template = _Lyte._ms ? {} : node.content.querySelector('[default]');
                            dummyScope = node._default;
                        }
                    } else {
                        break;
                    }
                }
                node._caseContent = [];
                var toAppendMain = createDocFragment();;
                for (var _i39 = 0; _i39 < contentArr.length; _i39++) {
                    if (contentArr[_i39].nodeType == 11) {
                        //                for(let j=0;j<contentArr[i].childNodes.length;j++) {
                        //                    node._caseContent.push(contentArr[i].childNodes[j]);
                        //                }
                        node._caseContent = node._caseContent.concat(Array.from(contentArr[_i39].childNodes));
                    } else {
                        node._caseContent.push(contentArr[_i39]);
                    }
                    toAppendMain.append(contentArr[_i39]);
                    //            node.parentNode.insertBefore(contentArr[i], node);
                }
                this.executeBlockHelpers(node._helpers, node);
                if (update) {
                    var returnVal = void 0;
                    if (toAppendMain.querySelector("template[is=break]")) {
                        returnVal = "break";
                    } else if (toAppendMain.querySelector("template[is=continue]")) {
                        returnVal = "continue";
                    }
                    //node.parentNode.insertBefore(toAppendMain, node);
                    if (node._placeHolder) {
                        _insertBefore(node._placeHolder.parentNode, toAppendMain, node._placeHolder);
                    } else {
                        _insertBefore(node.parentNode, toAppendMain, node);
                    }
                    return returnVal;
                } else {
                    return { "toAppendMain": toAppendMain, "lastNode": node };
                }
            }
        }, {
            key: 'dummy',
            value: function dummy(a, b) {
                var dummy = this.constr._properties[boundValue].observer;
            }
        }, {
            key: 'callObservers',
            value: function callObservers(boundValue, key) {
                var property = this.constr._properties[boundValue];
                var observers = property ? property.observer : undefined;
                if (observers) {
                    for (var _i40 = 0; _i40 < observers.length; _i40++) {
                        if (key.indexOf('.') === -1 || observers[_i40].path === key) {
                            this["_" + observers[_i40].functionName].apply(this);
                        }
                    }
                }
            }
        }, {
            key: 'bindNode',

            //It registers the binding of the node with the properties with which the dynamicNode depends. 
            value: function bindNode(node, toBeRemoved, helperNode, options, nodeInfo, processLast, establishBindings, isTemplate, cache, type, idx, toBeInsMap) {
                var itemValue = options.itemValue;
                var forIndex = options.itemIndex;
                var forType = options.type;
                var indexValue = options.indexValue;
                var dynamicValue = nodeInfo.dynamicValue;
                var directiveValue = nodeInfo.directiveValue;
                var helperFunc = nodeInfo.helperInfo;
                var nodeValue = void 0,
                    ownerElement = node.ownerElement;
                var dynamicValuesArray = [];
                var cmpData = LyteComponent.getCmpData(this.component.data);
                var isDirectiveNode = void 0;
                //        if(node.nodeType === 2 && _LC.isCustomElement(node.ownerElement,true) ) {
                //          node = {nodeName : node.nodeName, ownerElement: ownerElement, nodeType : 2, nodeValue : node.nodeValue};
                //        }
                if (node.nodeType === 2) {
                    node = { nodeName: node.nodeName, ownerElement: node.ownerElement, nodeType: 2, nodeValue: node.nodeValue, _attributeDetails: node._attributeDetails, _isDirectiveNode: nodeInfo._isDirectiveNode };
                    isDirectiveNode = _LC.directive.isDirectiveNode(nodeInfo);
                }
                var hel_name = helperFunc ? helperFunc.name : undefined;
                //to get bindings in ssr components
                //ssrcode_start
                var id = void 0,
                    obj = void 0,
                    tmpNode = void 0,
                    _type = this.getssrType(type); //id  = this.getRandomId( type );//type + Math.floor( Math.random() * 1000 );
                if (this._ssrBind && hel_name != "action" && hel_name != "method") {
                    if (node.nodeType === 3) {
                        tmpNode = document.createElement("text");
                        id = this.getRandomId(_type + "_");
                        // var pS = node.previousSibling && (node.previousSibling.nodeValue == "" || node.previousSibling.nodeValue == " ") && node.previousSibling.wholeText == node.wholeText ? node.previousSibling : node;
                        toBeInsMap.set(tmpNode, { pN: node.parentNode, cN: node });
                        // pN.insertBefore(document.createElement("text"), node);
                        // id = this.getRandomId( type );
                    } else if (node.nodeType === 2) {
                        id = node.ownerElement.hasAttribute("bindId") ? node.ownerElement.getAttribute("bindId") : this.getRandomId(_type + "_");
                    }
                    if (node.nodeType === 3) {
                        tmpNode.setAttribute("bindId", id);
                    } else if (node.nodeType === 2) {
                        node.ownerElement.setAttribute("bindId", id);
                    }
                }
                //ssrcode_end
                node._callee = this;
                var isHelper = false;
                if (!directiveValue && helperFunc && Object.keys(helperFunc).length) {
                    isHelper = true;
                    var attrName = node.nodeName;
                    nodeValue = node.helperValue = helperFunc;
                    var helperArgs = [];
                    if (helperFunc.name === "action") {
                        var actName = helperFunc.args[0];
                        helperFunc.args[0] = actName.startsWith("'") ? actName.replace(/'/g, '') : actName;
                        actName = helperFunc.args.slice(0, 1)[0];
                        var args = helperFunc.args.slice(1, helperFunc.args.length),
                            isCustom = false;
                        var _attrName2 = node.nodeName;
                        if (_attrName2.indexOf("-") != -1) {
                            isCustom = true;
                        }
                        helperArgs = [ownerElement, _attrName2, isCustom, { name: actName, args: args }];
                        this.processHelper({ "name": helperFunc.name, "args": helperArgs }, node);
                        return;
                    } else {
                        if (helperFunc.name === "method") {
                            helperArgs = helperFunc.args;
                            //ssrcode_start
                            if (this._ssrBind) {
                                var _id6 = "M2_" + Math.floor(Math.random() * 1000);
                                ownerElement.setAttribute(_id6, _id6);
                                var _Node = { "nodeName": node.nodeName, "nodeType": 2, "nodeValue": node.nodeValue };
                                obj = { "id": _id6, "idx": idx, type: "M2", "args": helperFunc, "actualName": nodeInfo.name, "methodName": helperFunc.args.slice(0, 1)[0], "node": _Node };
                                cmpData.bindIds.push(obj);
                            }
                            //ssrcode_end               
                        } else {
                            helperArgs = this.processArgs(this, { "helperInfo": helperFunc }, dynamicValuesArray, undefined, node, undefined, cache);
                        }
                    }
                    nodeValue = this.processHelper({ "name": helperFunc.name, "args": helperArgs }, node);
                    if (helperFunc.name === "unescape") {
                        //              let test = node.replaceWith.apply(node,nodeValue.childNodes);
                        var _obj15 = { initialNode: node, dynamicNodeValue: nodeValue };
                        node = { dynamicPositions: _obj15, "_callee": node._callee, helperValue: node.helperValue };
                        nodeValue = undefined;
                        processLast.push(node);
                    }
                } else {
                    helperFunc = {};
                    if (directiveValue) {
                        dynamicValue = directiveValue;
                    }
                    node.syntaxValue = dynamicValue;
                    var dynamicValues = [];
                    nodeValue = _LC.get(cmpData, dynamicValue, dynamicValues, cache, this);
                    dynamicValuesArray.push(dynamicValues);
                }
                //if(node.nodeType === 2 && ( (typeof nodeValue !== "string" && (_LC.isCustomElement(node.ownerElement,true) || typeof nodeValue === "boolean") ) || _LC.isControlHelper(node.ownerElement) )) {
                //	let bindedNode = node;
                //node = {nodeName : node.nodeName, ownerElement: ownerElement, nodeType : 2, nodeValue : node.nodeValue, _callee : this, syntaxValue : node.syntaxValue, helperValue : node.helperValue, _attributeDetails : node._attributeDetails};
                if (node.nodeType == 2) {
                    var tagName = node.ownerElement.tagName;
                    if (tagName == "INPUT" || tagName == "TEXTAREA" || tagName == "DIV" && node.ownerElement.hasAttribute("contenteditable")) {
                        var rA = node.ownerElement._rA = node.ownerElement._rA || [];
                        node.ownerElement._rA.push(node);
                    }
                    if (!ownerElement._origTemplate) {
                        if ((ownerElement.hasAttribute("lyte-for") || ownerElement.hasAttribute("lyte-if") || ownerElement.hasAttribute("lyte-switch") || ownerElement.hasAttribute("lyte-forin")) && ownerElement.tagName !== "TEMPLATE") {
                            if (_Lyte._ie) {
                                node.ownerElement = createElement("template");
                                node.ownerElement.setAttribute("is", nodeInfo._depthTemp);
                            } else {
                                node.ownerElement = nodeInfo._depthTemp.cloneNode(true);
                            }
                            ownerElement._origTemplate = node.ownerElement;
                        }
                    } else {
                        node.ownerElement = ownerElement._origTemplate;
                    }
                    //	node.ownerElement._attributeDetails[node.nodeName].bindedNode = node;
                    //}
                }
                var estuh = false;
                var actMultiProp = void 0;
                if (!_LC.unbound) {
                    var dynamicProp = void 0;
                    if (helperNode) {
                        dynamicProp = forType ? helperNode._items[forIndex]._dynamicProperty : helperNode._dynamicProperty;
                    }
                    var _obj16 = void 0,
                        helperId = void 0;
                    for (var d = 0; d < dynamicValuesArray.length; d++) {
                        var _dynamicValues = dynamicValuesArray[d];
                        //ssrcode_start
                        if (this._ssrBind) {
                            var _type5 = this.getssrType(type);
                            helperId = helperNode ? helperNode.getAttribute('bindId') : undefined;
                            _obj16 = {
                                id: id,
                                type: _type5,
                                syntax: dynamicValue
                            };
                            if (nodeInfo && nodeInfo.helperInfo) {
                                _obj16.helperValue = nodeInfo.helperInfo;
                            }
                        }
                        //ssrcode_end
                        var lazyProp = [];
                        var nodeFreezed = void 0;
                        for (var v = 0; v < _dynamicValues.length; v++) {
                            //to get binding in ssr components
                            var _nes = false;
                            if (nodeFreezed) {
                                continue;
                            };
                            //ssrcode_start
                            if (this._ssrBind && forType) {
                                var _index = _dynamicValues[v] == indexValue ? true : false,
                                    _ftype = this.getssrType(forType);
                                _obj16._helperId = helperId;
                                _obj16._helperNode = true;
                                _obj16._forType = _ftype;
                                _obj16._forIndex = forIndex;
                                if (_index) {
                                    _obj16._index = indexValue || "index";
                                } else {
                                    _obj16._item = itemValue || "item";
                                }
                            }
                            if (this._ssrBind && type === "attr") {
                                _obj16.node = { nodeName: node.nodeName, nodeType: 2, nodeValue: node.nodeValue };
                                _obj16._aD = node.ownerElement && node.ownerElement._attributeDetails ? node.ownerElement._attributeDetails[node.nodeName] : undefined;
                                if (node.ownerElement.tagName == "TEMPLATE") {
                                    _obj16.isTemplate = true;
                                    var _type6 = node.ownerElement.getAttribute('is');
                                    _obj16._type = this.getssrType(_type6);
                                    _obj16.idx = idx;
                                    if (_obj16._type == "7" || _obj16._type == "8") {
                                        _obj16._case = nodeValue;
                                    }
                                    if (_obj16._type == "4") {
                                        _obj16.len = nodeValue ? nodeValue.length : 0;
                                        // obj._case = nodeValue;
                                    }
                                    if (_obj16._type == "5") {
                                        _obj16.len = nodeValue && (typeof nodeValue === 'undefined' ? 'undefined' : _typeof(nodeValue)) == "object" ? Object.keys(nodeValue).length : 0;
                                        // obj._case = nodeValue;
                                    }
                                }
                                if (Object.keys(helperFunc).length) {
                                    _obj16.helperValue = helperFunc;
                                    _obj16.syntax = _dynamicValues[v];
                                }
                            }
                            //ssrcode_end
                            if (_dynamicValues[v].startsWith('$dataAttributes') || _dynamicValues[v].startsWith('$methodAttributes')) {
                                nodeFreezed = true;
                                continue;
                            }
                            var _boundValue = void 0;
                            var actProperty = this.getProperty(_dynamicValues[v]);
                            if (helperNode) {
                                var ind = _dynamicValues[v].search(/\W/);
                                if (ind !== -1) {
                                    _boundValue = _dynamicValues[v].substring(0, ind);
                                } else {
                                    _boundValue = _dynamicValues[v];
                                }
                                var doHp = true;
                                if (helperNode && helperNode._dirObj && forType && _boundValue) {
                                    //2for check af
                                    if (helperNode._dirObj.prop && helperNode._dirObj.prop.indexOf(_boundValue) != -1) {
                                        doHp = false;
                                        estuh = true;
                                    } else if (helperNode._dirObj.data && helperNode._dirObj.data.indexOf(_boundValue) != -1) {
                                        doHp = false;
                                        estuh = true;
                                    } else {
                                        estuh = false;
                                    }
                                }
                                if (doHp && _boundValue !== itemValue && _boundValue !== indexValue && (!options.node || !options.node._properties || !options.node._properties[_boundValue])) {
                                    //to bind for in ssr
                                    // obj._type = "nestedIf";
                                    //ssrcode_start
                                    if (this._ssrBind) {
                                        _obj16.nested = true;
                                        _nes = true;
                                        if (helperNode.tagName == "LYTE-YIELD") {
                                            _obj16._yield = true;
                                        }
                                        _obj16._syntax = _dynamicValues[v];
                                        // obj._helperId = helperNode.getAttribute( 'bindId' );
                                        _obj16._helperId = helperNode._registerYield ? helperNode._registerYield.getAttribute('bindId') : helperNode.getAttribute('bindId');
                                    }
                                    //ssrcode_end
                                    makeSet(actProperty, "_helperNodes");
                                    actProperty._helperNodes.add(helperNode);
                                    dynamicProp[_dynamicValues[v]] ? dynamicProp[_dynamicValues[v]].push(node) : (dynamicProp[_dynamicValues[v]] = []).push(node);
                                } else {
                                    node._cx = options;
                                    //            				if(!actProperty._dynamicNodes) {
                                    //            					actProperty._dynamicNodes = [];
                                    //            					defProp(actProperty, '_dynamicNodes', {
                                    //            						value: [],
                                    //            						enumerable: false, 
                                    //            						writable: true, 
                                    //            						configurable: true
                                    //            					});
                                    //            				}
                                    makeArray(actProperty, "_dynamicNodes");
                                    actProperty._dynamicNodes.push(node);
                                    if (_boundValue !== indexValue) {
                                        actMultiProp = actProperty;
                                    }
                                }
                            } else {
                                //            			if(!actProperty._dynamicNodes) {
                                //            				defProp(actProperty, '_dynamicNodes', {
                                //            					value : [], 
                                //            					enumerable: false, 
                                //            					writable: true,
                                //            					configurable: true
                                //            				});
                                //            			}
                                makeArray(actProperty, "_dynamicNodes");
                                actProperty._dynamicNodes.push(node);
                            }
                            if (ownerElement && (ownerElement.hasAttribute("lyte-for") || ownerElement.hasAttribute("lyte-if") || ownerElement.hasAttribute("lyte-switch") || ownerElement.hasAttribute("lyte-forin")) || ownerElement && ownerElement.tagName === "TEMPLATE" && /^(for|forIn)$/.test(ownerElement.getAttribute("is")) && !isHelper) {
                                var _type7 = ownerElement.getAttribute("is");
                                if (_type7 === "for" && node.nodeName === "items" || _type7 === "forIn" && node.nodeName === "object") {
                                    if (!actProperty._forHelpers) {
                                        makeSet(actProperty, "_forHelpers");
                                    }
                                    //to bind for in ssr
                                    //ssrcode_start
                                    if (this._ssrBind) {
                                        _obj16._type = this.getssrType(_type7);
                                        _obj16.attributeDetails = node.ownerElement._attributeDetails;
                                        if (_type7 == "for") {
                                            _obj16._item = ownerElement.getAttribute("item") || "item";
                                            _obj16._index = ownerElement.getAttribute("index") || "index";
                                        } else if (_type7 == "forIn") {
                                            _obj16._key = ownerElement.getAttribute("key") || key;
                                            _obj16._value = ownerElement.getAttribute("value") || value;
                                        }
                                    }
                                    //ssrcode_end
                                    node.ownerElement._actualBinding = actProperty;
                                    actProperty._forHelpers.add(node.ownerElement);
                                }
                            }
                            if (establishBindings) {
                                _LC.establishSelectedBinding(actProperty, cmpData, this);
                            } else {
                                if (estuh) {
                                    _LCSV.lazyProp.add(lazyProp, node, helperNode, forIndex, _boundValue, dynamicValuesArray, _dynamicValues[v]);
                                }
                            }
                            //to get ssr bindings 
                            //ssrcode_start
                            if (this._ssrBind) {
                                _obj16._dynamicProps = _obj16._dynamicProps || [];
                                var __obj = { name: _dynamicValues[v] };
                                if (_nes) {
                                    __obj.nested = true;
                                }
                                _obj16._dynamicProps.push(__obj);
                            }
                            //ssrcode_end                
                        }
                        if (_dynamicValues.length > 1 && !nodeFreezed) {
                            //ssrcode_start
                            if (this._ssrBind) {
                                _obj16._mP = { index: d };
                            }
                            //ssrcode_end
                            node._multipleProperty = node._multipleProperty || [];
                            node._multipleProperty.push({ "dynamicProp": actMultiProp ? undefined : dynamicProp, "actProp": this.getProperty(_dynamicValues[0]), "helperNode": helperNode, "dynamicValues": _dynamicValues, index: d });
                        }
                        _LCSV.lazyProp.iterate(this, lazyProp);
                        //ssrcode_start
                        if (this._ssrBind && _obj16) {
                            cmpData.bindIds.push(_obj16);
                        }
                        //ssrcode_end             
                    }
                }
                nodeValue = !(typeof nodeValue === 'undefined' ? 'undefined' : _typeof(nodeValue)) === "boolean" && !(typeof nodeValue === 'undefined' ? 'undefined' : _typeof(nodeValue)) === "number" ? nodeValue ? nodeValue : "" : nodeValue;
                if (isDirectiveNode) {
                    if (!directiveValue) {
                        _LC.directive.setNodeArgs(node, nodeValue, this);
                    }
                } else if (node.nodeType === 2) {
                    var parentNode = node._parentNode ? node._parentNode : node.ownerElement;
                    if (parentNode.tagName) {
                        var is = parentNode.getAttribute("is");
                    }
                    var isCustomElement = _LC.isCustomElementV3(parentNode, true);
                    if (isCustomElement && !isDirectiveNode) {
                        if (parentNode.set) {
                            parentNode.set(_LC.String.toCamelCase(node.nodeName), nodeValue);
                        } else {
                            parentNode._initProperties = parentNode._initProperties || {};
                            parentNode._initProperties[_LC.String.toCamelCase(node.nodeName)] = nodeValue;
                        }
                    }
                    var origNodeValue = nodeValue;
                    //!== "string"
                    if (isCustomElement && typeof nodeValue !== "string" && !isTemplate) {
                        parentNode._attributes = parentNode._attributes || {};
                        parentNode._attributes[node.nodeName] = nodeValue;
                        if (parentNode.nodeName === "TEMPLATE" && isHelper) {
                            if (parentNode.getAttribute("is") === "for" && node.nodeName === "items" || parentNode.getAttribute("is") === "forIn" && node.nodeName === "object" && !_LC.unbound) {
                                //node._actualBinding = {"_forHelpers" : new Set().add(parentNode)};
                                node.ownerElement._actualBinding = { "_forHelpers": new Set().add(parentNode), "_createdBinding": true };
                                if (nodeValue) {
                                    // makeSet(nodeValue, "_bindings");
                                    addBindings(nodeValue, node.ownerElement._actualBinding);
                                }
                            }
                        }
                        toBeRemoved.push(node.nodeName);
                    } else {
                        if (isDirectiveNode && window.isLyteWidget && node.tagName.indexOf("-") != -1) {
                            if (!node.$data) {
                                node.$data = {};
                            }
                            node.$data[_LC.String.toCamelCase(node.nodeName)] = nodeValue;
                        }
                        if (typeof nodeValue === "boolean") {
                            parentNode._attributes = node.ownerElement._attributes || {};
                            parentNode._attributes[node.nodeName] = nodeValue;
                            if (!nodeValue) {
                                //                      node.ownerElement.removeAttribute(node.nodeName);
                                toBeRemoved.push(node.nodeName);
                            } else {
                                parentNode.setAttribute(node.nodeName, "");
                            }
                        } else {
                            if (nodeValue && (typeof nodeValue === 'undefined' ? 'undefined' : _typeof(nodeValue)) === "object") {
                                var res;
                                if (typeof Record != "undefined" && nodeValue instanceof Record) {
                                    res = JSON.stringify(nodeValue.$.toJSON());
                                } else {
                                    try {
                                        res = JSON.stringify(nodeValue);
                                    } catch (exp) {
                                        Lyte.error("Data passed for property '" + node.nodeName + "' of '" + node.ownerElement.nodeName.toLocaleLowerCase() + "' cannot be serialized. The component '" + node.ownerElement.nodeName.toLocaleLowerCase() + "' might not be registered before its use.");
                                    }
                                }
                            } else if (nodeValue == null || nodeValue == undefined) {
                                res = "";
                            } else {
                                res = nodeValue;
                            }
                            nodeValue = res;
                            if (_LC.isControlHelper(node.ownerElement)) {
                                parentNode._attributes = node.ownerElement._attributes || {};
                                parentNode._attributes[node.nodeName] = nodeValue;
                                toBeRemoved.push(node.nodeName);
                            } else {
                                var locNodeVal = nodeValue === undefined ? "" : nodeValue;
                                //if(node.nodeName === "style") {
                                //   node.ownerElement.setAttribute("style",locNodeVal);
                                //} else {
                                //   node.nodeValue = locNodeVal;
                                //}
                                node.ownerElement.setAttribute(node.nodeName, locNodeVal);
                            }
                        }
                    }
                    if (parentNode.tagName === "LYTE-YIELD" /*parentNode.getAttribute("is") === "insertYield"*/) {
                            var pData = LyteComponent.getCmpData(parentNode.component.data);
                            pData[_LC.String.toCamelCase(node.nodeName)] = origNodeValue;
                        }
                    if (/^(INPUT|TEXTAREA|SELECT)$/.test(parentNode.nodeName)) {
                        if (node.nodeName === "value") {
                            parentNode.value = nodeValue === undefined ? "" : nodeValue;
                        } else if (node.nodeName === "checked") {
                            parentNode.checked = nodeValue;
                        }
                    }
                    if (!nodeValue && _LC.booleanAttrList.indexOf(node.nodeName) !== -1) {
                        toBeRemoved.push(node.nodeName);
                    }
                } else {
                    node.nodeValue = nodeValue === undefined ? '' : nodeValue;
                }
                return node;
            }
        }, {
            key: 'debounce',
            value: function debounce(func, threshold) {
                var timeout;
                return function debounced() {
                    var obj = this,
                        args = arguments;
                    function delayed() {
                        func.apply(obj, args);
                        timeout = null;
                    };
                    if (timeout) {
                        clearTimeout(timeout);
                    }
                    timeout = setTimeout(delayed, threshold || 100);
                    //console.log(timeout,threshold);
                };
            }
            /*disable async function*/

        }, {
            key: 'getProperty',
            value: function getProperty(key) {
                var arr = key.match(/([^[\].]+|\[\])/g);
                var property = this;
                if (!property._properties[arr[0]]) {
                    property._properties[arr[0]] = {};
                }
                property = property._properties[arr[0]];

                defProp(property, '_path', { enumerable: false, value: arr[0] });
                for (var _i41 = 1; _i41 < arr.length; _i41++) {
                    if (arr[_i41].startsWith("'") || arr[_i41].startsWith('"')) {
                        //added check
                        arr[_i41] = arr[_i41].substring(1, arr[_i41].length - 1);
                    }
                    if (!property[arr[_i41]]) {
                        property[arr[_i41]] = {};
                        defProp(property[arr[_i41]], '_path', { enumerable: false, value: property._path + "." + arr[_i41] });
                    }
                    property = property[arr[_i41]];
                }
                return property;
            }
            //updN

        }, {
            key: 'updateNode',
            value: function updateNode(node, updatePath, options) {
                var compInstance = this.component;
                var del = "delete";
                var multiplePropNode = [];
                var multipleProp = void 0;
                var isDirectiveNode = void 0;
                if (node.nodeType == 2) {
                    isDirectiveNode = _LC.directive.isDirectiveNode(node);
                }
                if (node._multipleProperty) {
                    for (var i = 0; i < node._multipleProperty.length; i++) {
                        if (node._multipleProperty[i] && node._multipleProperty[i].dynamicValues.lastIndexOf(updatePath) > 0) {
                            multiplePropNode[i] = false;
                            multipleProp = node._multipleProperty[i];
                            var nodes = void 0;
                            if (multipleProp.dynamicProp) {
                                multiplePropNode[i] = multipleProp;
                                nodes = multipleProp.dynamicProp[multipleProp.actProp._path];
                                if (nodes) {
                                    var index = nodes.indexOf(node);
                                    nodes.splice(index, 1);
                                }
                                var helperNode = multipleProp.helperNode;
                                if (nodes.length === 0) {
                                    if (helperNode.getAttribute("is") === "if") {
                                        multipleProp.actProp._helperNodes[del](helperNode);
                                        delete multipleProp.dynamicProp[multipleProp.actProp._path];
                                    } else {
                                        delete multipleProp.dynamicProp[multipleProp.actProp._path];
                                        if (helperNode._items) {
                                            var removeHelper = true;
                                            for (var _i42 = 0; _i42 < helperNode._items.length; _i42++) {
                                                if (helperNode._items[_i42]._dynamicProperty && helperNode._items[_i42]._dynamicProperty[multipleProp.actProp._path]) {
                                                    removeHelper = false;
                                                    break;
                                                }
                                            }
                                            if (removeHelper) {
                                                multipleProp.actProp._helperNodes[del](helperNode);
                                                //console.log('for helper is removed');
                                            }
                                        }
                                    }
                                }
                            }
                            if (!multiplePropNode[i]) {
                                multiplePropNode[i] = "dynamicNodes";
                                nodes = multipleProp.actProp._dynamicNodes;
                                if (nodes) {
                                    var _index2 = nodes.indexOf(node);
                                    nodes.splice(_index2, 1);
                                    if (!nodes.length) {
                                        delete multipleProp.actProp._dynamicNodes;
                                    }
                                }
                            }
                        }
                    }
                }
                if (!node.syntaxValue && !node.helperValue) {
                    return;
                }
                var contextSwitchInfo = void 0;
                var isYieldContext = void 0;
                if (node._cx || node.nodeType === 2 && node.ownerElement._cx) {
                    contextSwitchInfo = node._cx || node.ownerElement._cx;
                    var contextSwitchArray = [];
                    _LC.changeContext(contextSwitchInfo.node, contextSwitchArray, contextSwitchInfo);
                } else if (node.tagName === "LYTE-YIELD" && node._callee._cx) {
                    isYieldContext = true;
                    contextSwitchInfo = node._callee._cx;
                    var contextSwitchArray = [];
                    _LC.changeContext(contextSwitchInfo.node, contextSwitchArray, contextSwitchInfo, true);
                }
                var nodeValue = void 0;
                var dynamicValues = [];
                var isHelper = false;
                if (node.helperValue) {
                    isHelper = true;
                    nodeValue = node.helperValue;
                    var helperFunc = nodeValue;
                    var helperRetVal = this.processHelper({ name: helperFunc.name, args: this.processArgs(this, { "helperInfo": helperFunc }, dynamicValues, undefined, node) }, node);
                    nodeValue = helperRetVal;
                    if (helperFunc.name === "unescape") {
                        var oldDynamicPosition = node.dynamicPositions;
                        var oldStartingNode = oldDynamicPosition.startingNode;
                        var oldChldLen = oldDynamicPosition.length;
                        while (oldChldLen > 1) {
                            var next = oldStartingNode.nextSibling;
                            oldStartingNode.remove();
                            oldStartingNode = next;
                            oldChldLen--;
                        }
                        var childLen = nodeValue.childNodes.length;
                        if (!childLen) {
                            nodeValue.appendChild(document.createTextNode(""));
                            childLen = 1;
                        }
                        var startingNode = nodeValue.childNodes[0];
                        oldStartingNode.replaceWith.apply(oldStartingNode, nodeValue.childNodes);
                        var _obj17 = { startingNode: startingNode, length: childLen };
                        node.dynamicPositions = _obj17;
                        nodeValue = undefined;
                    }
                } else {
                    var _boundValue2 = node.syntaxValue;
                    var path = void 0;
                    if (_boundValue2.indexOf('.') !== -1 || _boundValue2.indexOf('[') !== -1) {
                        path = _boundValue2;
                        _boundValue2 = _boundValue2.substring(0, _boundValue2.indexOf('.'));
                    }
                    var cmpData = LyteComponent.getCmpData(compInstance.data);
                    var _value = path ? _LC.get(cmpData, path, dynamicValues, undefined, compInstance.$node) : cmpData[_boundValue2];
                    nodeValue = !(typeof _value === 'undefined' ? 'undefined' : _typeof(_value)) === "boolean" && !(typeof _value === 'undefined' ? 'undefined' : _typeof(_value)) === "number" ? _value ? _value : "" : _value;
                }
                if (!(dynamicValues[0] instanceof Array)) {
                    dynamicValues = [dynamicValues];
                }

                if (multiplePropNode) {
                    for (var i = 0; i < multiplePropNode.length; i++) {
                        if (multiplePropNode[i]) {
                            var _multipleProp = node._multipleProperty[i];
                            var dynamicValIndex = node._multipleProperty[i].index;
                            var boundName = dynamicValues[dynamicValIndex][0].substring(0, dynamicValues[dynamicValIndex][0].indexOf('.'));
                            var beforeProp = void 0;
                            if (node._propNode) {
                                beforeProp = this._properties[boundName];
                                this._properties[boundName] = null;
                            }
                            var prop = this.getProperty(dynamicValues[dynamicValIndex][0]);
                            var totalProp = this.getProperty(boundName);
                            var value = this.getData(boundName);
                            if (multiplePropNode[i] === "dynamicNodes") {
                                //	                    if(!prop._dynamicNodes) {
                                //	                        defProp(prop, '_dynamicNodes', {
                                //	                            value: [],
                                //	                            enumerable: false, 
                                //	                            writable: true,
                                //	                            configurable: true
                                //	                        });
                                //	                    }
                                makeArray(prop, "_dynamicNodes");
                                prop._dynamicNodes.push(node);
                            } else {
                                makeSet(prop, "_helperNodes");
                                prop._helperNodes.add(_multipleProp.helperNode);
                                var dynamicProp = _multipleProp.dynamicProp;
                                dynamicProp[prop._path] ? dynamicProp[prop._path].push(node) : (dynamicProp[prop._path] = []).push(node);
                            }
                            if (node.ownerElement && (node.ownerElement.hasAttribute("lyte-for") || node.ownerElement.hasAttribute("lyte-if") || node.ownerElement.hasAttribute("lyte-switch") || node.ownerElement.hasAttribute("lyte-forin")) || node.ownerElement && node.ownerElement.tagName === "TEMPLATE" && /^(for|forIn)$/.test(node.ownerElement.getAttribute("is")) && !isHelper) {
                                var type = node.ownerElement.getAttribute("is");
                                if (type === "for" && node.nodeName === "items" || type === "forIn" && node.nodeName === "object") {
                                    if (_multipleProp.actProp._forHelpers.has(node.ownerElement)) {
                                        _multipleProp.actProp._forHelpers.delete(node.ownerElement);
                                    }
                                    if (!prop._forHelpers) {
                                        makeSet(prop, "_forHelpers");
                                    }
                                    node.ownerElement._actualBinding = prop;
                                    prop._forHelpers.add(node.ownerElement);
                                }
                            }
                            if (value != undefined) {
                                _LC.establishBindings(totalProp, value);
                                if (node._propNode) {
                                    _LCSV.updateMulProp(node, _multipleProp, boundName, totalProp, prop);
                                }
                            }
                            if (beforeProp) {
                                this._properties[boundName] = beforeProp;
                            }
                            node._multipleProperty[i].actProp = prop;
                            node._multipleProperty[i].dynamicValues = dynamicValues[dynamicValIndex];
                        }
                    }
                }

                if (isDirectiveNode) {
                    _LC.directive.setNodeArgs(node, nodeValue, this);
                    if (node.ownerElement.hasAttribute("comp-in-parent")) {
                        Lyte.Component.set(node.ownerElement.$data, _LC.String.toCamelCase(node.nodeName), nodeValue);
                    }
                    if (node._saveNode) {
                        _LCSV.updateName(this, node, nodeValue);
                    } else if (node.ownerElement._initialClassValue) {
                        _LC.directive.class.updateValue(node.ownerElement);
                    }
                } else if (node.nodeType === 2) {
                    var parentNodes = [];
                    var pN = node._parentNode ? node._parentNode : node.ownerElement;
                    if (pN.tagName === "TEMPLATE" && pN.getAttribute("is") === "component" && node.nodeName !== "component-name") {
                        var isKeepAlive = pN.hasAttribute("lyte-keep-alive");
                        if (isKeepAlive) {
                            for (var key in pN._renderedComponent) {
                                parentNodes.push(pN._renderedComponent[key]);
                            }
                        } else {
                            var compName = pN._currentComponent;
                            if (compName && pN._renderedComponent[compName]) {
                                parentNodes.push(pN._renderedComponent[compName]);
                            }
                        }
                    }
                    parentNodes.push(pN);
                    for (var _i43 = 0; _i43 < parentNodes.length; _i43++) {
                        var parentNode = parentNodes[_i43];
                        if (parentNode.set) {
                            parentNode.set(_LC.String.toCamelCase(node.nodeName), nodeValue, undefined, true);
                        } else {
                            parentNode._initProperties = parentNode._initProperties || {};
                            var keyName = _LC.String.toCamelCase(node.nodeName);
                            if (window.isLyteWidget && parentNode.tagName != "TEMPLATE") {
                                DataBindingLayer.updateInitProperties(parentNode, keyName, nodeValue);
                            } else {
                                parentNode._initProperties[keyName] = nodeValue;
                            }
                        }
                        var pData = parentNode && parentNode.tagName === "LYTE-YIELD" ? LyteComponent.getCmpData(parentNode.component.data) : undefined;
                        if (parentNode.tagName === "LYTE-YIELD" && pData && node.nodeName && pData[node.nodeName] !== nodeValue /*parentNode.getAttribute("is") === "insertYield"*/) {
                                _LC.set(pData, _LC.String.toCamelCase(node.nodeName), nodeValue, undefined, undefined, parentNode);
                            }
                        parentNode._attributes = parentNode._attributes || {};
                        //!== "string"
                        if (_LC.isCustomElementV3(parentNode, true) && typeof nodeValue !== "string") {
                            if (node.ownerElement.nodeName === "TEMPLATE") {
                                if (node.helperValue) {
                                    if (node.ownerElement.getAttribute("is") === "for" && node.nodeName === "items" || node.ownerElement.getAttribute("is") === "forIn" && node.nodeName === "object") {
                                        var oldValue = node.ownerElement._attributes[node.nodeName];
                                        var newValue = nodeValue;
                                        _LC.removeSelectedBindingDeep(node.ownerElement._actualBinding, oldValue);
                                        if (newValue) {
                                            // makeSet(newValue, "_bindings");
                                            addBindings(newValue, node.ownerElement._actualBinding);
                                            _LC.establishBindings(node.ownerElement._actualBinding, newValue);
                                        }
                                        if (node.nodeName === "object") {
                                            _LC.removeSelectedBindingDeep(node.ownerElement._propBindingObject, oldValue);
                                        }
                                        //console.log("old Value ", oldValue, " new Value ", newValue);
                                    }
                                } else {
                                    if (node.ownerElement.getAttribute("is") === "for" && node.nodeName === "items" || node.ownerElement.getAttribute("is") === "forIn" && node.nodeName === "object") {
                                        var _oldValue = node.ownerElement._attributes[node.nodeName];
                                        if (node.nodeName === "object") {
                                            _LC.removeSelectedBindingDeep(node.ownerElement._propBindingObject, _oldValue);
                                        }
                                    }
                                }
                                parentNode["__" + node.nodeName] = true;
                                parentNode.removeAttribute(node.nodeName);
                            } else {
                                //Needs revisiting
                                //parentNode.removeAttribute(node.nodeName);
                            }
                        } else {
                            if (typeof nodeValue === "boolean") {
                                parentNode._attributes = parentNode._attributes || {};
                                parentNode._attributes[node.nodeName] = nodeValue;
                                if (!nodeValue) {
                                    parentNode.removeAttribute(node.nodeName);
                                } else {
                                    parentNode.setAttribute(node.nodeName, "");
                                }
                            } else {
                                if (nodeValue && (typeof nodeValue === 'undefined' ? 'undefined' : _typeof(nodeValue)) === "object") {
                                    var res;
                                    if (typeof Record != "undefined" && nodeValue instanceof Record) {
                                        res = JSON.stringify(nodeValue.$.toJSON());
                                    } else {
                                        try {
                                            res = JSON.stringify(nodeValue);
                                        } catch (exp) {
                                            Lyte.error("Data passed for property '" + node.nodeName + "' of '" + node.ownerElement.nodeName.toLocaleLowerCase() + "' cannot be serialized. The component '" + node.ownerElement.nodeName.toLocaleLowerCase() + "' might not be registered before its use.");
                                        }
                                    }
                                } else if (nodeValue == null || nodeValue == undefined) {
                                    res = "";
                                } else {
                                    res = nodeValue;
                                }
                                nodeValue = res;
                                var locNodeVal = nodeValue === undefined ? "" : nodeValue;
                                // if(node.nodeName === "style") {
                                //     node.ownerElement.setAttribute("style",locNodeVal);
                                // } else {
                                //     node.nodeValue = locNodeVal;
                                // }

                                // if(node instanceof Node) {
                                //Check safari issue once
                                var oE = node.ownerElement;
                                if (oE.hasAttribute(node.nodeName)) {
                                    if (oE.tagName != "INPUT" || node.nodeName != "value" || !oE.validity.badInput) {
                                        oE.setAttribute(node.nodeName, locNodeVal);
                                    }
                                } else {
                                    node.nodeValue = locNodeVal;
                                }
                            }
                        }
                        parentNode._attributes[node.nodeName] = nodeValue;
                        if (/^(INPUT|TEXTAREA|SELECT)$/.test(parentNode.nodeName)) {
                            if (node.nodeName === "value") {
                                var val = nodeValue === undefined ? "" : nodeValue;
                                if (parentNode.value !== val) {
                                    parentNode.value = val;
                                }
                            } else if (node.nodeName === "checked") {
                                parentNode.checked = nodeValue;
                            }
                        }
                        if (!nodeValue && _LC.booleanAttrList.indexOf(node.nodeName) !== -1) {
                            parentNode.removeAttribute(node.nodeName);
                        }
                        var isStopped = parentNode._isStopped;
                        var result = void 0;
                        switch (parentNode.getAttribute("is")) {
                            case "for":
                                if (!options) {
                                    options = { "type": "update" };
                                } else {
                                    options.type = "update";
                                }
                                this.updateForHelper(parentNode, options);
                                break;
                            case "if":
                                result = this.updateSwitchHelper("if", parentNode, undefined, true, true);
                                break;
                            case "forIn":
                                if (!options) {
                                    options = { "type": "update" };
                                } else {
                                    options.type = "update";
                                }
                                this.updateForInHelper(parentNode, options);
                                break;
                            case "switch":
                                this.updateSwitchHelper("switch", parentNode, undefined, true, true);
                                break;
                            case "component":
                                if (node.nodeName === "component-name") {
                                    this.updateDynamicComponent(parentNode, "update");
                                }
                                break;
                            default:
                        }
                        var handleBreakOptions = void 0;
                        if (isStopped && isStopped !== result) {
                            //console.log("new value is stopped");
                            if (!result) {
                                //console.log("new value is not stopped");
                                if (isStopped === "break") {
                                    handleBreakOptions = "SM";
                                } else {
                                    handleBreakOptions = "SS";
                                }
                            } else if (result === "break") {
                                handleBreakOptions = "MS";
                                //console.log("old value is continue and new value is break");
                            } else {
                                handleBreakOptions = "SM";
                                //console.log("old value is break and new value is continue");
                            }
                        } else if (result === "break") {
                            handleBreakOptions = "MS";
                            //console.log("old value not stopped and new value is break");
                            //                		this.handleBreak(parentNode._cx, "break");
                        } else if (result === "continue") {
                            handleBreakOptions = "SS";
                            //console.log("old value not stopped and new value is continue");
                            //                		this.handleBreak1(parentNode._cx , "continue");
                        }
                        if (handleBreakOptions) {
                            this.handleBreak(parentNode._cx, handleBreakOptions);
                        }
                    }
                } else {
                    node.nodeValue = nodeValue === undefined ? '' : nodeValue;
                }
                if (node.ownerElement && node.ownerElement._hooksPresent) {
                    var saveAttr = _LCSV.getAttr(node.ownerElement._specialAttributeDetails);
                    if (saveAttr) {
                        _LCSV.triggerAllListeners(this, saveAttr, node.ownerElement);
                    }
                }
                if (contextSwitchInfo) {
                    _LC.removeContext(contextSwitchInfo.node, contextSwitchArray, contextSwitchInfo, isYieldContext);
                }
            }
        }, {
            key: 'handleBreak',
            value: function handleBreak(contextSwitchInfo, options) {
                if (contextSwitchInfo) {
                    var forTemplate = contextSwitchInfo.node;
                    var breakIndex = contextSwitchInfo.itemIndex;
                    var itemValue = forTemplate.getAttribute("item");
                    var forContent = contextSwitchInfo.node._forContent;
                    var endIndex = options[0] === "M" ? forContent.length : breakIndex + 1;
                    for (var j = breakIndex; j < endIndex; j++) {
                        var currentForContent = forContent[j];
                        for (var _i44 = 0; _i44 < currentForContent.length; _i44++) {
                            currentForContent[_i44].remove();
                            if (currentForContent[_i44]._forContent || currentForContent[_i44]._caseContent) {
                                this.removeHelpers(currentForContent[_i44]);
                            }
                        }
                        forContent[j] = [];
                        _LC.removeSelectedBindingDeep(forTemplate._items[j].itemProperty, forTemplate._attributes.items[j]);
                        forTemplate._helpers[j] = [];
                        forTemplate._items[j] = { "_dynamicProperty": {}, "itemProperty": {}, "indexProperty": {} };
                        forTemplate._items[j] = { "_dynamicProperty": {}, "itemProperty": {}, "indexProperty": {}, "propProperty": {}, "propPropertyDyn": {}, "propNodes": {} };
                    }
                    var length = forTemplate._attributes.items.length;
                    if (options[1] === "M") {
                        this.updateForHelper(forTemplate, { firstIndex: breakIndex, secondIndex: length - breakIndex, "type": "replace" }, undefined, {});
                    } else {
                        this.updateForHelper(forTemplate, { firstIndex: breakIndex, secondIndex: 1, "type": "replace" }, undefined, {});
                    }
                }
            }
        }, {
            key: 'createCustomEvent',
            value: function createCustomEvent(eventName, parentNode, actObj) {
                var customEvent = new CustomEvent(eventName);
                parentNode._actions[eventName] = customEvent;
                parentNode._actions[eventName].processAction = actObj;
            }
            /*disable async function*/

        }, {
            key: 'isEmptyString',
            value: function isEmptyString(str) {
                return !(typeof str === "string") || str === "";
            }
        }, {
            key: 'processArgs',
            value: function processArgs(scope, dynN, dynamicValues, event, node, newCompile, cache, unboundFlag) {
                unboundFlag = dynN.helperInfo.name == 'unbound' ? true : unboundFlag;
                var args = dynN.newHelperInfo && newCompile ? dynN.newHelperInfo.args : dynN.helperInfo.args;
                var helpers = void 0,
                    j = void 0;
                dynamicValues = dynamicValues || [];
                var scpData = LyteComponent.getCmpData(scope.component.data);
                args = Array.isArray(args) ? Array.from(args) : args;
                var widget = scope.__lyteWidget;
                for (var _i45 = 0; _i45 < args.length; _i45++) {
                    if (args[_i45] && args[_i45].type) {
                        this.internalHelpers(scope, args, _i45, dynamicValues, event, node, newCompile, cache, unboundFlag);
                    } else {
                        if (!this.isEmptyString(args[_i45])) {
                            if (args[_i45].startsWith("'") && args[_i45].endsWith("'")) {
                                args[_i45] = args[_i45].substr(1, args[_i45].length - 2);
                            } else {
                                args[_i45] = args[_i45].trim();
                                var dynamicVals = [];
                                if (args[_i45] === "event" && event) {
                                    args[_i45] = widget && widgetMap.has(widget) ? widgetMap.get(widget).getClone(event) : event;
                                } else if (args[_i45] === "this" && node) {
                                    var thisNode = node.nodeType === 2 ? node.ownerElement : node;
                                    args[_i45] = widget && widgetMap.has(widget) ? widgetMap.get(widget).getClone(thisNode) : thisNode;
                                } else {
                                    args[_i45] = _LC.get(scope.component.data, args[_i45], dynamicVals, cache);
                                }
                                if (unboundFlag !== true) {
                                    dynamicValues.push(dynamicVals);
                                }
                            }
                        } else if (newCompile) {
                            if (args[_i45] instanceof Array) {
                                args[_i45] = _LC.getDD(scpData, args[_i45]);
                            }
                        }
                    }
                }
                return args;
            }
        }, {
            key: 'internalHelpers',
            value: function internalHelpers(scope, args, i, dynamicValues, event, node, newCompile, cache, unboundFlag) {
                //helperFunc = this.constructor.getHelper(args[i]);
                var helperFunc = args[i].value;
                var helperVal = this.processHelper({ "name": helperFunc.name, "args": this.processArgs(scope, { "helperInfo": helperFunc }, dynamicValues, event, node, newCompile, cache, unboundFlag) }, node);
                args[i] = helperVal;
            }
        }, {
            key: 'processHelper',
            value: function processHelper(helperFunc, node) {
                var args = [];
                var helperName = helperFunc.name;
                var compConstr = void 0;
                var helperFn = _LyteComponent.registeredHelpers[helperName];
                if (window.isLyteWidget && _LC.defaultHelpers.indexOf(helperName) == -1) {
                    compConstr = this.component.constructor;
                    if (compConstr._widget) {
                        helperFn = compConstr._helpers[helperName] || helperFn;
                        if (!helperFn) {
                            _Lyte.error("LC003", helperFunc.name);
                            return;
                        }
                    }
                }
                if (!helperFn) {
                    _Lyte.error("LC003", helperFunc.name);
                    return;
                }
                switch (helperFunc.name) {
                    case "method":
                        args.push(this, node);
                        break;
                    case "lbind":
                        args.push(this, node.ownerElement);
                        break;
                    case "lyteViewPort":
                        if (node && node.ownerElement) {
                            args.push(node.ownerElement);
                            if (!helperFunc.args.length) {
                                args.push(false);
                            }
                        } else {
                            return false;
                        }
                }
                return helperFn.apply(this, args.concat(helperFunc.args));
            }
        }, {
            key: 'getActionProperty',
            value: function getActionProperty(prop) {
                var hostProp = this._properties;
                var value = hostProp ? hostProp[prop].value : undefined;
                return value;
            }
        }, {
            key: 'hasInternalBindings',
            value: function hasInternalBindings(content) {
                return content.match(/[(]{1}[^)]+[)]{1}/);
            }
        }, {
            key: 'getArgValues',
            value: function getArgValues(argNames, properties) {
                var argValueArray = [];
                for (var _i46 = 0; _i46 < argNames.length; _i46++) {
                    argValueArray.push(properties[argNames[_i46]].value);
                }
                return argValueArray;
            }
        }, {
            key: 'createEventListeners',
            value: function createEventListeners(node, actionType, actObj) {
                var self = this;
                if (!node._callee && node !== this) {
                    node._callee = this;
                }
                if (globalDOMEvents.indexOf(actionType) == -1) {
                    var infoAttr = actionType.substr(2);
                    var infoAttrVal = node.getAttribute(infoAttr);
                    // var evntListener = function(event) {
                    // 	var toRemove;
                    //     if(!window.event) {
                    //         window.event = event;
                    //         toRemove = true;
                    //     }
                    //     _LC.throwAction.call(self,self,actionType.substr(2),actObj, undefined, undefined, node, event);
                    //     if(toRemove) {
                    //         window.event = undefined;
                    //     }
                    // };
                    if (_LyteComponent.registeredComponents[node.localName] && !node.component || node.tagName === "TEMPLATE" && node.getAttribute("is") === "component") {
                        node._toRegEvnts = node._toRegEvnts || {};
                        node._toRegEvnts[actionType.substr(2)] = { "listener": globalEventHandler, "attrVal": this.tagName.toLowerCase() + " => " + actObj.name };
                    } else {
                        node.setAttribute(infoAttr, this.tagName.toLowerCase() + " => " + actObj.name);
                        //Event is not in capture phase because, in capture phase, multiple event listeners in hierarchy are called from parent to child (since registration is done in that order)
                        node.addEventListener(actionType.substr(2), globalEventHandler);
                    }
                    if (node.hasAttribute(actionType)) {
                        node[actionType] = undefined;
                    }
                    node.removeAttribute(actionType);
                }
            }
        }, {
            key: 'registerParentYield',
            value: function registerParentYield(yieldName) {
                var parentYield = this._callee._yields[yieldName];
                var locYield = void 0;
                if (parentYield) {
                    if (_Lyte._ie) {
                        locYield = document.createElement("div");
                        locYield.innerHTML = parentYield.outerHTML;
                        locYield = locYield.childNodes[0];
                        this.constructor.splitTextNodes(locYield);
                    } else {
                        locYield = parentYield.cloneNode(true);
                    }
                    Object.keys(parentYield).forEach(function (item) {
                        //eslint-disable-line no-loop-func
                        locYield[item] = parentYield[item];
                    });
                    this._yields[yieldName] = locYield;
                }
            }
        }, {
            key: 'registerYields',
            value: function registerYields() {
                this._yields = {};
                var yields = this.querySelectorAll('template[is=registerYield],template[is=yield]');
                var lazyYields = [];
                for (var _i47 = 0; _i47 < yields.length; _i47++) {
                    var yld = yields[_i47];
                    while (yld.hasChildNodes()) {
                        yld.content.appendChild(yld.childNodes[0]);
                    }
                    if (yld.hasAttribute("from-parent") && this._callee) {
                        if (this._callee._yields) {
                            this.registerParentYield(yld.getAttribute("yield-name"));
                        } else {
                            lazyYields.push(yld);
                        }
                    } else {
                        this._yields[yld.getAttribute("yield-name")] = yld;
                    }
                    _LCHD.setTxtNode(this, yld);
                }
                if (lazyYields.length && this._callee) {
                    var self = this;
                    this.lazyYield = function () {
                        if (self._callee) {
                            for (var j = 0; j < lazyYields.length; j++) {
                                var lYield = lazyYields[j];
                                self.registerParentYield(lYield.getAttribute("yield-name"));
                            }
                            self._callee.removeEventListener("onReady", self.lazyYield);
                            delete self.lazyYield;
                        }
                    };
                    this._callee.addEventListener("onReady", this.lazyYield);
                }
            }
        }, {
            key: 'connectedCallback',
            value: function connectedCallback() {
                if (this._connectedCalled || this.__lyteIgnore || this.__v3lyteIgnore) {
                    return;
                }
                this._connectedCalled = true;
                this._connectedCallback();
            }
        }, {
            key: '_connectedCallback',
            value: function _connectedCallback() {
                if (this.hasAttribute("lyte-rendered") || !_LyteComponent.registeredComponents[this.localName] || this._ccCalled) {
                    return;
                }
                var fastRenderProp = this._fR;
                if (!fastRenderProp) {
                    this._callee = this._callee || this.getCallee(this.parentNode);
                }
                this.__h = {};
                this.__counter = 0;
                this.__dc = {};
                if (fastRenderProp) {
                    if (_LyteComponent.shouldIgnoreDisconnect()) {
                        return;
                    }
                    var methods = fastRenderProp.methods;
                    if (methods) {
                        this.setMethods(methods);
                    }
                    _LC.ccDelay.push(this);
                    this._ccCalled = true;
                } else {
                    this.actualConnectedCallback();
                }
                var isViewPort;
                var cmpData = LyteComponent.getCmpData(this.component.data);
                if (this._initProperties && this._initProperties.hasOwnProperty('lyteViewPort')) {
                    isViewPort = this._initProperties.lyteViewPort;
                } else {
                    isViewPort = cmpData.lyteViewPort;
                }
                if (isViewPort) {
                    if (!_LC.isViewPortPending) {
                        requestAnimationFrame(function () {
                            requestAnimationFrame(function () {
                                _LC.executePendingViewPort();
                            });
                        });
                        _LC.isViewPortPending = true;
                    }
                    _LC.pendingViewPortElements.push(this);
                }
            }
        }, {
            key: 'cmpBind',
            value: function cmpBind(fastRenderProp) {
                var compData = LyteComponent.getCmpData(this.component.data);
                if (!_LC.unbound && !fastRenderProp) {
                    Lyte.establishObserverBindings.call(this, this.component.constructor._observers);
                    Lyte.establishWatchScope.call(this, this.constructor._deepWatchProperties);
                    //this.establishObserverBindings();
                    // makeSet(compData, "_bindings");
                    addBindings(compData, this._properties);
                    _LC.establishBindings(this._properties, compData);
                }
            }
        }, {
            key: 'actualConnectedCallback',
            value: function actualConnectedCallback() {
                this._transitionHelperNodes = [];
                this._specialNodes = [];
                this._propProperty = {};
                this._propList = [];
                this._propNodes = {};
                this._hiddenTemplate = [];
                // var wdt = _LyteComponent.currentWidget ? _LyteComponent.currentWidget : this._callee ? this._callee.__lyteWidget : undefined;
                // if((!wdt && !_LyteComponent.registeredComponents[this.localName]) || (wdt && (!_LyteComponent.registeredWidgetComponents[wdt] || !_LyteComponent.registeredWidgetComponents[wdt][this.localName]))) {
                // 	return;
                // }
                var compData = LyteComponent.getCmpData(this.component.data);
                var fastRenderProp = this._fR;
                if (fastRenderProp) {
                    this._callee = this._callee || this.getCallee(this.parentNode);
                }
                var templateAttributes = this.component.constructor._templateAttributes;
                if (templateAttributes && templateAttributes.attr) {
                    for (var _key26 in templateAttributes.attr) {
                        //        		let attr = templateAttributes.attr[i];
                        var attr = templateAttributes.attr[_key26];
                        if (!this.hasAttribute(attr.name) && !compData.hasOwnProperty(attr.name) || attr.globalEvent) {
                            if (attr.helperInfo && attr.helperInfo.name === "action") {
                                this._evBoundEvents = this._evBoundEvents || {};
                                var actionName = attr.helperInfo.args[0];
                                var boundName = void 0;
                                if (actionName.startsWith('"') || actionName.startsWith("'")) {
                                    boundName = actionName.substring(1, actionName.length - 1);
                                } else {
                                    //_Lyte.warn("Deprecation warning. Action name should be in quotes");
                                    boundName = actionName;
                                }
                                var actualAttrName = attr.globalEvent ? attr.name : attr.name.indexOf("-") !== -1 ? attr.name : attr.name.substr(2);
                                this._evBoundEvents[actualAttrName] = { "name": boundName, "args": attr.helperInfo.args, "from": "component" };
                                var prevAttribute = this.getAttribute(attr.name);
                                var currentAttribute = this.component.constructor._template.getAttribute(attr.name);
                                //this.setAttribute("ev:"+attr.name, this.constructor._template.getAttribute(attr.name));
                                this.setAttribute(attr.name, currentAttribute + (prevAttribute ? " ; " + prevAttribute : ""));
                            }
                            if (!attr.globalEvent) {
                                attr.from = "component";
                                if (attr.staticValue) {
                                    this.setAttribute(templateAttributes.attr[_key26].name, attr.staticValue);
                                } else {
                                    this.setAttribute(templateAttributes.attr[_key26].name, "{{dummy}}");
                                    this.bindNode(this.attributes.getNamedItem(templateAttributes.attr[_key26].name), [], undefined, {}, templateAttributes.attr[_key26], undefined, undefined, true);
                                }
                            }
                        }
                    }
                }
                for (var _key27 in this._toRegEvnts) {
                    this.addEventListener(_key27, this._toRegEvnts[_key27].listener);
                    if (this.hasAttribute(_key27)) {
                        this.setAttribute(_key27, this.getAttribute(_key27) + " ; " + this._toRegEvnts[_key27].attrVal);
                    } else {
                        this.setAttribute(_key27, this._toRegEvnts[_key27].attrVal);
                    }
                }
                this._toRegEvnts = {};
                var initialUnbound = _LC.unbound;

                var ssrBind = this.getAttribute("ssrbindservernode");
                if (ssrBind && !this.component.data.lyteUnbound) {
                    this.bindServerData();
                    this.removeAttribute("ssrbindservernode");
                }
                var content = this.afterConnected(fastRenderProp, ssrBind);
                !ssrBind && this.cmpBind(fastRenderProp);

                _LC.unbound = initialUnbound;
                if (typeof content === "string") {
                    if (content) {
                        if (_LC.frSpecial) {
                            var temp = document.createElement("template");
                            temp.innerHTML = content;
                            this.innerHTML = "";
                            this.appendChild(temp.content);
                        } else {
                            this.innerHTML = content;
                        }
                    }
                    _LC.processAction(this);
                } else {
                    if (this.component.data.lyteViewPort) {
                        this._vpc = true;
                        if (_Lyte._ie) {
                            for (var i = 0; i < content.childNodes.length; i++) {
                                if (content.childNodes[i].tagName) {
                                    this._dummyViewPortF = content.childNodes[i];
                                    break;
                                }
                            }
                            for (var i = content.childNodes.length - 1; i >= 0; i--) {
                                if (content.childNodes[i].tagName) {
                                    this._dummyViewPortL = content.childNodes[i];
                                    break;
                                }
                            }
                        } else {
                            this._dummyViewPortF = content.children[0];
                            this._dummyViewPortL = content.children[content.children.length - 1];
                        }
                    }
                    if (_LC.directive.getTransitionArg(this, 'hide-tag')) {
                        _LCHD.connect(this, content);
                    } else {
                        this.appendChild(content);
                    }
                }
                var dataDef = this.component.__data;
                var attributes = this.attributes;
                this.__lyteIgnore = true;
                for (var _i48 = attributes.length - 1; _i48 > -1; _i48--) {
                    var camelCase = LyteComponent.String.toCamelCase(attributes[_i48].nodeName);
                    if (dataDef[camelCase] && dataDef[camelCase].hideAttr) {
                        this.removeAttribute(attributes[_i48].nodeName);
                    }
                }
                for (var dataName in this._hideAttr) {
                    var attrName = _LC.String.dasherize(dataName);
                    var dataVal = this._hideAttr[dataName];
                    if (dataVal == false) {
                        if (this.getAttribute(attrName) != this.component.data[dataName]) {
                            this.setAttribute(attrName, this.component.data[dataName]);
                        }
                    }
                }
                this.__lyteIgnore = false;

                if (this._callee && this._callee.serverCall) {
                    this.serverCall = true;
                }
                //to bind in ssr
                if (this.serverCall && !this.hasAttribute("server-rendered")) {
                    this.setAttribute("server-rendered", "");
                    var newData = LyteComponent.sendtoclient.call(this, this, true, this.component.__data);
                    this.setAttribute("component-data", JSON.stringify(newData));
                }
                if (!this.hasAttribute("server-rendered")) {
                    this.setAttribute("lyte-rendered", "");
                }
                if (!fastRenderProp && !Lyte._ignoreOnReady) {
                    this.dispatchEvent(new CustomEvent("onReady"));
                }
                var _config_flag = void 0;
                if (this.component._config) {
                    if (this.component._config.clientLifeCycleHooks != undefined) {
                        _config_flag = this.component._config.clientLifeCycleHooks == true || (_typeof(this.component._config.clientLifeCycleHooks) == 'object' ? this.component._config.clientLifeCycleHooks.includes('didConnect') : false);
                    }
                }
                if (!window.isLyteWidget) {
                    _LCSV.connect(this);
                }
                var _overrides = this.component._ssr ? this.component._ssr.overrides : undefined;
                if (!this.hasAttribute("server-rendered") || this.serverCall || _config_flag) {
                    if (_overrides && _overrides.didConnect && this.serverCall) {
                        _overrides.didConnect.apply(this);
                    } else {
                        this.callback("didConnect");
                    }
                    this.onCallBack("didConnect");
                }

                // Widget Data update from parent to child
                // if(_Lyte.isWidgetBuild && this.hasAttribute("comp-in-parent")) {
                //     let self = this;
                //     setTimeout(function() {
                //         DataBindingLayer.sendDataUpdateToFrame(self, self.component.data);
                //     },0)

                // }        

                if (this.serverCall == undefined) {
                    this.callback("didRender");
                }
                if (fastRenderProp) {
                    this.removeAttribute("_lyteprop");
                }
            }
        }, {
            key: 'onCallBack',
            value: function onCallBack(name) {
                var callbacks = this.component.constructor._callBacks[name];
                if (callbacks) {
                    for (var _i49 = 0; _i49 < callbacks.length; _i49++) {
                        try {
                            callbacks[_i49].value.call(this.component);
                        } catch (e) {
                            _Lyte.error(e);
                        }
                    }
                }
            }
        }, {
            key: 'callback',
            value: function callback(name) {
                var func = this.component[name];
                var args;
                if (func) {
                    if (arguments.length > 1) {
                        args = Array.from(arguments);
                        args.splice(0, 1);
                    }
                    try {
                        var context = this.component;
                        if (this.__lyteWidget && widgetMap.has(this.__lyteWidget)) {
                            context = widgetMap.get(this.__lyteWidget).getClone(context);
                        }
                        func.apply(context, args || []);
                    } catch (e) {
                        _Lyte.error(e);
                    }
                }
            }
        }, {
            key: 'establishObserverBindings',
            value: function establishObserverBindings() {
                var observers = this.component.constructor._observers;
                for (var _i50 = 0; _i50 < observers.length; _i50++) {
                    var props = observers[_i50].properties;
                    for (var j = 0; j < props.length; j++) {
                        var actProp = void 0;
                        var isArrayObserver = false;
                        if (props[j].indexOf('.[]') !== -1) {
                            isArrayObserver = true;
                            actProp = this.getProperty(props[j].substring(0, props[j].indexOf('.[]')));
                        } else {
                            actProp = this.getProperty(props[j]);
                        }
                        makeSet(actProp, "_observers");
                        actProp._observers.add({ callee: this, observer: observers[_i50], isArrayObserver: isArrayObserver });
                    }
                }
            }
        }, {
            key: 'removeBindings',
            value: function removeBindings(properties, actualData) {
                var del = "delete";
                for (var _i51 in properties) {
                    var actData = actualData[_i51];
                    if (actData && actData._bindings) {
                        actData._bindings[del](properties[_i51]);
                        //Error while trying to delete _bindings from actData when actData is of type Array
                        /*  if(!actData._bindings.size) {
                            delete actData._bindings;
                        } */
                    }
                    if (_typeof(properties[_i51]) === "object" && actData) {
                        this.removeBindings(properties[_i51], actData);
                    }
                }
            }
        }, {
            key: 'actualDisconnected',
            value: function actualDisconnected() {
                try {
                    var self = this;
                    if (!self.component) {
                        return;
                    }
                    self._cx = null;
                    self._callee = null;
                    self.component.$node = null;
                    self.component.__data = null;
                    if (self.component.data.__target__) {
                        self.component.data.__target__.__component__ = null;
                    } else {
                        self.component.data.__component__ = null;
                    }
                    self.component.data = null;
                    self.component = null;
                    self.__dc = self.__dc || {};
                    self.__h = self.__h || {};
                    for (key in self.__dc) {
                        var helper = self.__dc[key];
                        //helper.remove();
                        if (helper.hasAttribute("lyte-keep-alive")) {
                            var objKeys = Object.keys(helper._renderedComponent);
                            for (var j = 0; j < objKeys.length; j++) {
                                var _key28 = objKeys[j];
                                if (_key28 !== helper._currentComponent) {
                                    // Will remove from hDiv.
                                    var comp = helper._renderedComponent[_key28];
                                    comp.constructor.prototype._disconnectedCallback.call(comp);
                                    comp.remove();
                                }
                            }
                        }
                    }
                    for (key in self.__h) {
                        self.__h[key].remove();
                    }
                    self.__h = {};
                    self.__dc = {};
                    var yields = self._yields;
                    for (var key in yields) {
                        yields[key]._callee = null;
                    }
                    self = null;
                } catch (exp) {
                    console.error(exp);
                }
            }
        }, {
            key: 'disconnectedCallback',
            value: function disconnectedCallback() {
                this._disconnectedCallback();
            }
        }, {
            key: '_disconnectedCallback',
            value: function _disconnectedCallback() {
                if (this.__v3lyteIgnore) {
                    _LC.V3.pendingComp.remove(this);
                    return;
                }
                if (_LyteComponent.shouldIgnoreDisconnect() || !this.component || this.__lyteIgnore || this._ignoreDisconnect) {
                    return;
                }
                if (Array.from(_LC.hiddenComponentsDiv.content.childNodes).indexOf(this) != -1) {
                    _LC.hiddenComponentsDiv.content.removeChild(this);
                }
                if (this._hiddenTemplate && this._hiddenTemplate.length) {
                    _LCHD.callDisconnectedCallback(this);
                }
                /*disable async function*/
                var widget = this.constructor.__widgetName;
                /*disable async function*/
                var map;
                /*disable async function*/
                if (widget) {
                    map = widgetMap;
                    /*disable async function*/
                    widget = map.get(widget);
                    widget.additionalComps.delete(this.parentElement);
                }
                if (this._removedTemplate) {
                    this._removedTemplate.forEach(function (el) {
                        if (_LC.tDiv.content.contains(el)) {
                            _LC.tDiv.content.removeChild(el);
                        }
                    });
                    this._removedTemplate = [];
                }
                var pve = _LC.pendingViewPortElements;
                if (this.component.data.lyteViewPort) {
                    var index = pve.indexOf(this);
                    if (index != -1) {
                        pve.splice(index, 1);
                    }
                }
                if (_LyteComponent.viewPortSettings.handlePendingItems && this._vpc) {
                    _LC.executeVpe = true;
                }
                if (pve.length) {
                    for (var _i52 = 0; _i52 < pve.length; _i52++) {
                        var actTemp = _LC.getActViewPortTemplate(pve[_i52]);
                        if (actTemp && actTemp.tagName == "TEMPLATE" && actTemp.getAttribute("is") == "if" && actTemp._callee == this) {
                            pve.splice(_i52, 1);
                            _i52--;
                        }
                    }
                }
                if (this.__elmCnt) {
                    delete DataBindingLayer.parentMap[this.__elmCnt];
                }
                if (this.__elmCntW) {
                    delete DataBindingLayer.childMap[this.__elmCntW];
                }
                this._destroyed = true;
                if (this.__toRemoveLazy) {
                    for (var __key in this.__toRemoveLazy) {
                        var __arr = this.__toRemoveLazy[__key];
                        __arr.forEach(function (id) {
                            Lyte.$.toRemoveFromRequiredServices(id);
                        });
                    }
                    delete this.__toRemoveLazy;
                }
                this.component._bindings = null;
                this._parentHelper = null;
                var scpObj = this.__scpObj;
                var cmpData = LyteComponent.getCmpData(this.component.data);
                if (scpObj) {
                    for (var key in scpObj) {
                        var propData = cmpData[key],
                            id = scpObj[key],
                            idArr = id.split("_");
                        if (propData) {
                            Lyte.removeNestScp(cmpData[key], idArr[0], idArr[1], undefined, this);
                        }
                    }
                }
                if (!this._fR) {
                    _LC.removeSelectedBindingDeep(this._properties, cmpData, true);
                }
                var h = this.__h;
                for (key in h) {
                    if (h[key]._actualBinding || h[key]._hiddenTemplate && h[key]._hiddenTemplate.length) {
                        this.removeHelpers(h[key]);
                    }
                }
                h = {};
                //      _LC.removeBindings(this._properties, this.component);
                for (var _key29 in this._properties) {
                    this._properties[_key29] = {};
                }
                _LCSV.removeAll("comp", this, this);
                _LCSV.removeData(this);
                this._specialNodes = null;
                this.callback('didDestroy');
                this.onCallBack('didDestroy');
                this._didDestroyCalled = true;
                if (this.__lyteWidget) {
                    var wIns = widgetMap.get(this.__lyteWidget);
                    if (wIns) {
                        wIns.removeComponent(this);
                    }
                    // wIns.components.delete(this);
                }
                if (!_LC.dcc) {
                    _LC.dcc = [];
                    requestAnimationFrame(function () {
                        requestAnimationFrame(function () {
                            try {
                                if (_LC.executeVpe) {
                                    _LyteComponent.viewPortSettings.executePendingViewPortElements();
                                    _LC.executeVpe = false;
                                }
                                for (var i = 0, item; item = _LC.dcc[i]; i++) {
                                    item.actualDisconnected();
                                }
                            } catch (e) {
                                console.error(e);
                            }
                            _LC.dcc = undefined;
                        });
                    });
                }
                _LC.dcc.push(this);
                // var self = this;
                // setTimeout(function() {
                //     self.actualDisconnected();
                // },0);
                if (this.lazyYield) {
                    this.removeEventListener("onReady", this.registerParentYield);
                }
                this.constr.activeInstances--;
                this.component.constructor.activeInstances--;
                // var rmIndex = this.constructor.component.compInstances.indexOf(this);
                // this.constructor.component.compInstances.splice(rmIndex,1);  
            }
        }], [{
            key: 'dasherizeObservedAttributes',

            //AttributeChangedCallback will be called for the attributes mentioned in the this._observedAttributes array. 
            value: function dasherizeObservedAttributes() {
                var newArr = [];
                for (var _i53 = 0; _i53 < this._observedAttributes.length; _i53++) {
                    newArr[_i53] = _LC.String.dasherize(this._observedAttributes[_i53]);
                }
                _LC.__dataNames.forEach(function (name) {
                    newArr.push(_LC.String.dasherize(name));
                });
                _LC.customPropHandlers.forEach(function (item, index) {
                    newArr.push(_LC.String.dasherize(item));
                });
                this._observedAttributesDasherized = newArr;
            }
        }, {
            key: 'updateValue',
            value: function updateValue(property, path, value) {
                var pathVals = path.split('.');
                var context = property;
                for (var _i54 = 0; _i54 < pathVals.length - 1; _i54++) {
                    context = context[pathVals[_i54]];
                }
                context[pathVals[i]] = value;
            }

            //    static createDocFragment(template){
            //        let childNodes = template.cloneNode(true,"lyte").childNodes;
            ////           let childNodes = template.childNodes;
            //        let frag = document.createDocumentFragment();
            //        let len = childNodes.length;
            //        for(let i=0; i<len; i++){
            //            frag.appendChild(childNodes[0]);
            //        }
            //        return frag;
            //    }

        }, {
            key: 'createDocFragment1',
            value: function createDocFragment1(template) {
                if (template.content) {
                    return template.content;
                }
                var childNodes = template.childNodes;
                var frag = createDocFragment();
                var len = childNodes.length;
                for (var _i55 = 0; _i55 < len; _i55++) {
                    frag.appendChild(childNodes[0]);
                }
                return frag;
            }
        }, {
            key: '_registerComponentFn',
            value: /*#__PURE__*/regeneratorRuntime.mark(function _registerComponentFn(a, b, widget) {
                var _this9 = this;

                var currWidgetComps, componentsDiv, styleDiv, origTemplateValue, clonedDummyTemp, newCompile, ta, _temp, styleTags, div, hasUnbound, s;

                return regeneratorRuntime.wrap(function _registerComponentFn$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                if (_LC._reRegisteredComponents.indexOf(a) != -1) {
                                    b.component._template = JSON.parse(b.component._template);
                                    if (Lyte.getConfig("lazyComponentRegister")) {
                                        _LC._reRegisteredComponents.splice(_LC._reRegisteredComponents.indexOf(a), 1);
                                    }
                                }
                                if (widget) {
                                    window.widgetComps = window.widgetComps || {};
                                    currWidgetComps = window.widgetComps[widget] = window.widgetComps[widget] || [];

                                    currWidgetComps.push(a);
                                }
                                this.__widgetName = widget;
                                componentsDiv = _LC.lyteComponentsDiv;
                                styleDiv = _Lyte.$.assetsDiv;
                                origTemplateValue = this.component._template;
                                div = createElement("div");
                                _context.next = 9;
                                return function () {
                                    if (_this9.component._template && typeof _this9.component._template === "string") {
                                        _this9.component._template.replace(/\\'/g, "'");
                                        div.innerHTML = _this9.component._template;
                                        if (widget) {
                                            styleTags = document.createElement("template");
                                        }
                                        while (div.firstChild) {
                                            if (div.firstChild.nodeName === "STYLE") {
                                                if (styleDiv.querySelector("style[from-component='" + a + "']")) {
                                                    styleDiv.querySelector("style[from-component='" + a + "']").remove();
                                                }
                                                div.firstChild.setAttribute("from-component", a);
                                                styleTags && styleTags.content.appendChild(div.firstChild.cloneNode(true));
                                                styleDiv.appendChild(div.firstChild);
                                            } else {
                                                if (div.firstChild.tagName == "TEMPLATE") {
                                                    _temp = div.firstChild;
                                                }
                                                componentsDiv.appendChild(div.firstChild);
                                            }
                                        }
                                        /*        } else if(document.querySelector("#" + a)) { */
                                    } else if (document.querySelector("template[tag-name='" + a + "']")) {
                                        _temp = document.querySelector("template[tag-name='" + a + "']");
                                        componentsDiv.appendChild(_temp);
                                    }
                                    _this9.component._template = _temp;
                                    if (widget) {
                                        _this9.component._template.setAttribute("widget", widget);
                                        _this9.component._template._widgetStyles = styleTags;
                                    }
                                    _this9.component._template.class = _this9;
                                    _this9.component._template.widget = widget;
                                    _this9._helperTemplate = document.createElement("template");
                                    _this9._helperTemplate.setAttribute("_lyteht", a);
                                    _LC.h1Div.content.appendChild(_this9._helperTemplate);
                                    if (!_this9.component._template) {
                                        return;
                                    }
                                    if (_LC.needDummyComponentsDiv) {
                                        if (_Lyte._ie) {
                                            var temp = _Lyte.Compile.getTemplateFromString(origTemplateValue);
                                            _LC.dummyLyteComponentsDiv.appendChild(temp);
                                        } else {
                                            clonedDummyTemp = _this9.component._template.cloneNode(true);
                                        }
                                    }
                                    if (_this9.component._template && !_this9.component._template.content) {
                                        // console.log("Dummy")
                                        //            var frag = document.createDocumentFragment();
                                        //            let childNodes = this._template.cloneNode(true,"lyte").childNodes;
                                        //            //let childNodes = this._template.childNodes;
                                        //            let len = childNodes.length;
                                        //            for(let i=0; i<len; i++){
                                        //                frag.appendChild(childNodes[0]);
                                        //            }
                                        //            this._template.content = frag;
                                    }
                                    hasUnbound = _this9.component._observedAttributes.indexOf("lyteUnbound") !== -1;
                                    s = _Lyte._ie ? _this9.component._template : _this9.component._template.content; //)?this._template.content:document.createDocumentFragment(this._template);
                                    //This is used to split text nodes which contain multiple dynamic values 
                                    //Eg." Name is {{name}} and age is {{age}} "
                                    if (hasUnbound) {
                                        if (_Lyte._ie) {
                                            newCompile = document.createElement("div");
                                            newCompile.innerHTML = _this9._template.outerHTML;
                                            newCompile = newCompile.childNodes[0];
                                        } else {
                                            newCompile = _this9.component._template.cloneNode(true);
                                        }
                                    }
                                    _this9.splitTextNodes(s);
                                    if (hasUnbound) {
                                        _this9.splitTextNodes(newCompile);
                                    }
                                    //This is used to find the dynamicNodes and helper nodes for the given component. 
                                    if (!_this9.component._dynamicNodes) {
                                        if (_Lyte.Compile.getDynamicNodes) {
                                            var returnVal = _Lyte.Compile.getDynamicNodes(a, undefined, _Lyte._ie ? s : undefined);
                                            if (returnVal.errors) {
                                                console.error("Error in the component", returnVal.componentName, returnVal.errors);
                                                return false;
                                            } else {
                                                _this9.component._dynamicNodes = returnVal.dynamicNodes;
                                            }
                                        } else {
                                            _Lyte.error("LC002", a);
                                        }
                                    }
                                };

                            case 9:
                                if (this.component._dynamicNodes) {
                                    _context.next = 14;
                                    break;
                                }

                                _context.next = 12;
                                return "";

                            case 12:
                                _context.next = 20;
                                break;

                            case 14:
                                return _context.delegateYield(doCompile(s, this.component._dynamicNodes, a, this, newCompile ? _Lyte._ie ? newCompile : newCompile.content : undefined), 't0', 15);

                            case 15:
                                _context.next = 17;
                                return function () {
                                    if (_Lyte._ed) {
                                        _this9._tC = _this9.component._tC = _this9.component._template.outerHTML;
                                    } else if (_Lyte._ie) {
                                        _this9._tC = _this9.component._tC = s.outerHTML;
                                    }
                                    _this9.component._templateAttributes = _this9.component._templateAttributes || { type: "attr", "attr": {}, position: [] };
                                    ta = [_this9.component._templateAttributes];
                                };

                            case 17:
                                return _context.delegateYield(doCompile(this.component._template, ta, a, this), 't1', 18);

                            case 18:
                                _context.next = 20;
                                return function () {
                                    _this9.component._templateAttributes = ta[0];
                                    if (_this9.component._templateAttributes && _this9.component._templateAttributes.attr) {
                                        var attributesT = _this9.component._template.attributes;
                                        try {
                                            for (var _i56 = 0; _i56 < attributesT.length; _i56++) {
                                                var attrName = attributesT[_i56].name;
                                                if (!_this9.component._templateAttributes.attr[attrName] && attrName !== "tag-name" && attrName !== "use-strict") {
                                                    _this9.component._templateAttributes.attr[attrName] = { "name": attrName, "staticValue": attributesT[_i56].value };
                                                    _this9.component._template.removeAttribute(attrName);
                                                    clonedDummyTemp && clonedDummyTemp.removeAttribute(attrName);
                                                    _i56--;
                                                }
                                            }
                                        } catch (e) {
                                            _Lyte.error("Error with templateAttributes. ");
                                        }
                                    }
                                    clonedDummyTemp && _LC.dummyLyteComponentsDiv.appendChild(clonedDummyTemp);
                                    _this9.component._sta = newCompile ? _LC.processStatic(newCompile) : undefined;
                                };

                            case 20:
                                _context.next = 22;
                                return function () {
                                    _this9.component.__isRegistered = true;
                                };

                            case 22:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _registerComponentFn, this);
            })
        }, {
            key: '_registerComponent',
            value: function _registerComponent(a, b, widget) {
                var gen = this._registerComponentFn(a, b, widget);
                var gnxt = gen.next(),
                    gval;
                while (gnxt.done == false) {
                    gval = gnxt.value;
                    if (typeof gval == "function") {
                        gval();
                    }
                    gnxt = gen.next();
                }
            }
            //This is used to split text nodes which contain multiple dynamicNodes. 

        }, {
            key: 'splitTextNodes',
            value: function splitTextNodes(node) {
                if (node && node.childNodes && node.childNodes.length) {
                    for (var _i57 = node.childNodes.length - 1; _i57 >= 0; _i57--) {
                        this.splitTextNodes(node.childNodes[_i57]);
                    }
                }
                if (node.tagName === "TEMPLATE" && !_Lyte._ie) {
                    this.splitTextNodes(node.content);
                }
                if (node.nodeType === node.TEXT_NODE) {
                    var _nodeValue4 = node.nodeValue;
                    if (_nodeValue4) {
                        var mustacheValues = _nodeValue4.match(/{{[^}]*?(?:(?:('|")[^\1]*?\1)[^}]*?)*}}/g); //'
                        if (!mustacheValues) {
                            return;
                        }
                        var newNodeArray = [];
                        for (var _i58 = 0; _i58 < mustacheValues.length; _i58++) {
                            var mustacheStartIndex = _nodeValue4.indexOf(mustacheValues[_i58]);
                            var mustacheEndIndex = mustacheStartIndex + mustacheValues[_i58].length;
                            if (mustacheStartIndex) {
                                newNodeArray.push(document.createTextNode(_nodeValue4.substring(0, mustacheStartIndex)));
                            }
                            newNodeArray.push(document.createTextNode(_nodeValue4.substring(mustacheStartIndex, mustacheEndIndex)));
                            _nodeValue4 = _nodeValue4.substring(mustacheEndIndex);
                        }
                        if (!(!_nodeValue4.trim() && node.nextSibling && node.nextSibling.nodeType === 3 && !node.nextSibling.nodeValue.trim())) {
                            newNodeArray.push(document.createTextNode(_nodeValue4));
                        }
                        //Fix for IE Edge issue with higher versions where node.replaceWith is not working when the parent is a doc fragment.
                        if (_Lyte._rwpf && node.parentNode.nodeName === "#document-fragment") {
                            for (var _i59 = 0; _i59 < newNodeArray.length; _i59++) {
                                _insertBefore(node.parentNode, newNodeArray[_i59], node);
                            }
                            node.remove();
                        } else {
                            node.replaceWith.apply(node, newNodeArray);
                        }
                    }
                }
            }
        }, {
            key: 'observedAttributes',
            get: function get() {
                return this._observedAttributesDasherized;
            }
        }]);

        return customElementPrototype;
    }(elementPrototype);

    customElementPrototype._V4InsApi = ["getData", "getDirectiveObj", "getShadowObj", "getFastObj", "cmpBind", "component", "actualConstructor", "_connectedCallback", "actualConnectedCallback", "getMethods", "hasAction", "setActions", "setMethods", "getCallee", "afterConnected", "bindServerData", "bindServerNode", "getServerTemplates", "bindServerFor", "bindServerIf", "getRandomId", "getssrType", "renderComponent", "renderFast", "formatValue", "renderNodes", "executeBlockHelpers", "updateBlockHelpers", "_attributeChangedCallback", "removeHelpersSpecificIndex", "removeHelpers", "updateYield", "updateDynamicComponent", "updateForHelper", "updateForInHelper", "rmCaseBindings", "getCaseTemplate", "getCaseIndexScope", "getSwitchScope", "updateSwitchHelper", "callObservers", "bindNode", "debounce", "getProperty", "updateNode", "handleBreak", "createCustomEvent", "isEmptyString", "processArgs", "internalHelpers", "internalArray", "processHelper", "getActionProperty", "hasInternalBindings", "getArgValues", "createEventListeners", "registerParentYield", "getYieldName", "registerYields", "onCallBack", "callback", "establishObserverBindings", "removeBindings", "actualDisconnected", "_disconnectedCallback", "throwAction", "get", "set"];
    customElementPrototype._V3InsApi = ["getData", "cmpBind", "component", "actualConstructor", "_connectedCallback", "actualConnectedCallback", "getMethods", "hasAction", "setActions", "setMethods", "getCallee", "afterConnected", "renderComponent", "renderFast", "formatValue", "renderNodes", "executeBlockHelpers", "updateBlockHelpers", "_attributeChangedCallback", "removeHelpersSpecificIndex", "removeHelpers", "updateYield", "updateDynamicComponent", "updateForHelper", "updateForInHelper", "updateSwitchHelper", "callObservers", "bindNode", "debounce", "getProperty", "updateNode", "handleBreak", "createCustomEvent", "isEmptyString", "processArgs", "internalHelpers", "processHelper", "getActionProperty", "hasInternalBindings", "getArgValues", "createEventListeners", "registerParentYield", "registerYields", "onCallBack", "callback", "establishObserverBindings", "removeBindings", "actualDisconnected", "_disconnectedCallback", "throwAction", "get", "set", "initializeMethod"];
    customElementPrototype._V4StaticApi = ["_observers", "_callBacks", "_properties", "activeInstances", "_depthTemp", "_bindsIds", "_ssr", "_config", "_mixins", "_serviceToBeUsed", "_actions", "_template", "_dynamicNodes", "_templateAttributes", "_observedAttributes", "_observedMethodAttributes", "_data", "_methods", "_pendingComponents", "splitTextNodes", "_registerComponent", "createDocFragment1", "updateValue", "seperateStyle", "getFastRenderSupported", "setTemplateAttributes"];
    customElementPrototype.version = { v3: { component: undefined } };
    var _stringReplacer = String.prototype._replace ? String.prototype._replace : String.prototype.replace;
    var LyteComponent = (_LyteComponent2 = {
        "_windowEvNeeded": false,
        "defaultHelpers": ["unbound", "action", "lbind", "method", "stringifyHTML", "unescape", "escape", "debugger", "log", "ifEquals", "if", "negate", "ifNotEquals", "concat", "encAttr", "expHandlers", "lyteViewPort"],
        "baseCompClass": function Component() {
            _classCallCheck(this, Component);

            if (!this.$) {
                this.$ = {};
            }
            Object.assign(this.$, this.$functions);
            this.$._ins = this;
            this.$.validate = function () {
                var compInstance = this._ins;
                var data = compInstance.data;
                for (var key in data) {
                    LyteComponent.handleValidation(data, key, data[key], compInstance);
                }
            };
            if (this._setWidget) {
                this._setWidget();
            }
        },
        "fRP": {},
        "fRC": 0,
        // "frcUnused" : [],
        "customPropRegex": "",
        // "pushFrc" : function(fastRenderIndex) {
        //     this.frcUnused.push(fastRenderIndex);
        //     delete _LC.fRP[fastRenderIndex];
        // },
        // "getFrc" : function() {
        //     let frcIndex;
        //     if(this.frcUnused.length) {
        //         frcIndex = this.frcUnused.shift()
        //     } else {
        //         frcIndex = this.fRC++;
        //     }
        //     return frcIndex;
        // },
        "customPropHandlers": [],
        "_registeredComponents": {},
        "_reRegisteredComponents": [],
        "toBeRegistered": [],
        "getCmpData": function getCmpData(data) {
            return data && data.__target__ ? data.__target__ : data;
        }
    }, _defineProperty(_LyteComponent2, 'getCmpData', function getCmpData(data) {
        return data && data.__target__ ? data.__target__ : data;
    }), _defineProperty(_LyteComponent2, "updateCustomCrmComponent", function updateCustomCrmComponent(def, customCrmComponent) {
        for (var _key30 in def) {
            if (def[_key30] && def[_key30].type === "observer") {
                def[_key30].fnName = _key30;
                customCrmComponent.component._observers.push(def[_key30]);
            } else if (def[_key30] && def[_key30].type === "callBack") {
                var props = def[_key30].properties;
                for (var k = 0; k < props.length; k++) {
                    if (!customCrmComponent.component._callBacks[props[k]]) {
                        customCrmComponent.component._callBacks[props[k]] = [];
                    }
                    def[_key30].fnName = _key30;
                    customCrmComponent.component._callBacks[props[k]].push(def[_key30]);
                }
                if (def[_key30].observes) {
                    def[_key30].observes.fnName = _key30;
                    customCrmComponent.component._observers.push(def[_key30].observes);
                }
            } else {
                customCrmComponent.component.prototype[_key30] = def[_key30];
            }
        }
        return def;
    }), _defineProperty(_LyteComponent2, "dataFromMixin", function dataFromMixin(mixinsToBeUsed, actionsFromMixin, methodsFromMixin, newDefinition) {
        var mixinslen = mixinsToBeUsed.length;
        for (var _i60 = 0; _i60 < mixinslen; _i60++) {
            for (var _item3 in mixinsToBeUsed[_i60]) {
                if (_item3 === "actions") {
                    Object.assign(actionsFromMixin, mixinsToBeUsed[_i60][_item3]);
                } else if (_item3 === "methods") {
                    Object.assign(methodsFromMixin, mixinsToBeUsed[_i60][_item3]);
                } else {
                    newDefinition[_item3] = mixinsToBeUsed[_i60][_item3];
                }
            }
        }
        return { "actionsFromMixin": actionsFromMixin, "methodsFromMixin": methodsFromMixin, "newDefinition": newDefinition };
    }), _defineProperty(_LyteComponent2, "throwEvent", function throwEvent(eventName) {
        var self = this.$node ? this.$node : this;
        var evt = self._actions ? self._actions[eventName] : undefined;
        var customArgs = [];
        if (arguments.length > 1) {
            for (var _i61 = 1; _i61 < arguments.length; _i61++) {
                customArgs.push(arguments[_i61]);
            }
        }
        //wait for release
        //eventName = _LC.String.toCamelCase(eventName);
        _LC.throwAction.call(self, self._callee, eventName, undefined, true, customArgs, self);
        if (this.$node) {
            self.dispatchEvent(evt ? evt : new CustomEvent(eventName, { "detail": customArgs }));
        }
    }), _defineProperty(_LyteComponent2, "throwAction", function throwAction(scope, eventName, actObj, isCustom, customArgs, node, event, hasHandled, fromEv) {
        var actionsObj = void 0;
        var stopBubble = false;
        if (this._route && isCustom) {
            scope = _Lyte.Router.getRouteInstance(this._route);
            actionsObj = scope.actions || (scope.actions = {});
        } else if (this.routeName) {
            //process for the parent route and get the current component and proceed;
            var parentRoute = this.parent;
            if (parentRoute) {
                if (parentRoute.component) {
                    scope = parentRoute.component;
                    if (scope.component) {
                        actionsObj = scope.component.constructor._actions;
                    } else {
                        scope = _Lyte.Router.getRouteInstance(scope._route);
                        actionsObj = scope.actions || (scope.actions = {});
                    }
                } else {
                    scope = parentRoute;
                    actionsObj = scope.actions || (scope.actions = {});
                }
            }
        } else if (scope) {
            if (scope.component && !scope._didDestroyCalled) {
                actionsObj = scope.component.constructor._actions;
            } else {
                return;
            }
        }
        if (!scope) {
            //Only warning is thrown because, we can have a eventListener for the dom directly. 
            if (!hasHandled) {
                _Lyte.warn("Nothing handled the action " + eventName + ".");
            }
            return;
        }
        if (_Lyte.isWidgetBuild) {
            if (!this.__widget) {
                return;
            }
        } else if (this.__widget) {
            return;
        }
        actObj = actObj ? actObj : this._actions && this._actions[eventName] ? this._actions[eventName].processAction : void 0;
        //wait for release
        /* 
        var dasherizedEventName = _LC.String.dasherize(eventName);
        actObj = (actObj) ? actObj : this._actions && this._actions[dasherizedEventName]? this._actions[dasherizedEventName].processAction : void 0;     
        */
        var args = customArgs ? customArgs : [];
        if (actObj) {
            var contextSwitchArray = [];
            if (node) {
                _LC.adCx(node, contextSwitchArray);
            }
            var concatArgs = void 0;
            if (actObj.skipArgProcessing) {
                // concatArgs = _Lyte.deepCopyObject(actObj.args);
                // concatArgs.shift();
                // var eventIndex = concatArgs.indexOf("__lyteEvent__");
                // var nodeIndex = concatArgs.indexOf("__lyteNode__");
                // if(eventIndex !== -1) {
                //     concatArgs[eventIndex] = event;
                // } 
                // if(nodeIndex !== -1) {
                //     concatArgs[nodeIndex] = target;
                // }
                concatArgs = actObj.args;
            } else {
                concatArgs = this.processArgs(scope, { "helperInfo": actObj }, undefined, event, node);
            }
            args.splice.apply(args, [0, 0].concat(concatArgs));
            if (node) {
                _LC.rmCx(node, contextSwitchArray);
            }
            if (actionsObj[actObj.name]) {
                if (!isCustom) {
                    //args.unshift(window.event);
                    var _parent = node.parentNode;
                    var context = this.component;
                    if (this.__lyteWidget && widgetMap.has(this.__lyteWidget)) {
                        context = widgetMap.get(this.__lyteWidget).getClone(this.component);
                    }
                    var val = actionsObj[actObj.name].apply(context, args);
                    if (!(event.currentTarget instanceof DocumentFragment) && event.currentTarget != document.body && !fromEv) {
                        val = false;
                    }
                    hasHandled = true;
                    stopBubble = _LCHD.shouldStop(node, event);
                    if (val !== false && !event.cancelBubble && !stopBubble) {
                        if (actObj.from && node.getAttribute(event.type) && node._boundEvents && node._boundEvents[event.type]) {
                            var actions = node._callee.component.constructor._actions;
                            var _actObj3 = node._boundEvents[event.type];
                            var cloneActObj = _Lyte.deepCopyObject(_actObj3);
                            // cloneActObj.args.shift();
                            _LC.skipArgProcessing(cloneActObj, event, node);
                            _LC.throwAction.call(node._callee, node._callee, event.type, cloneActObj, undefined, undefined, node, event, hasHandled);
                        } else {
                            if (_LC.hasLyteEvents(node, eventName)) {
                                var eventStopped = _LC.handleLyteEvents(node, event);
                                val = eventStopped ? false : true;
                            }
                            if (val === false) {
                                return;
                            }
                            if (_LC.isCustomElement(node)) {
                                scope = _parent;
                            }
                            if (_parent && !(event.currentTarget !== document.body)) {
                                var _eventStopped = void 0;
                                while (_parent && _parent.getAttribute && (!_parent.getAttribute(eventName) || _parent.hasAttribute("disabled")) && _parent.tagName != "BODY") {
                                    if (_parent._hiddenBoundEvents && _parent._hiddenBoundEvents[eventName]) {
                                        break;
                                    }
                                    if (_LC.hasLyteEvents(_parent, eventName)) {
                                        _eventStopped = _LC.handleLyteEvents(_parent, event);
                                        if (_eventStopped) {
                                            break;
                                        }
                                    }
                                    _parent = _parent.parentNode;
                                }
                                if (_eventStopped || !_parent || _parent.tagName === "BODY") {
                                    return;
                                }
                                if (!_parent._callee) {
                                    _parent._callee = _parent.getCallee ? _parent.getCallee(_parent) : _LC.getCallee(_parent);
                                }
                                if (_parent && event.type === eventName && !event.cancelBubble) {
                                    if (_parent._evBoundEvents && _parent._evBoundEvents[eventName]) {
                                        var _actObj4 = _parent._evBoundEvents[eventName];
                                        var _cloneActObj3 = _Lyte.deepCopyObject(_actObj4);
                                        //    cloneActObj.args.shift();
                                        _LC.skipArgProcessing(_cloneActObj3, event, _parent);
                                        _LC.throwAction.call(_parent, _parent, eventName, _cloneActObj3, undefined, undefined, _parent, event, hasHandled);
                                    } else if (_parent && _parent._boundEvents && _parent._boundEvents[eventName]) {
                                        var _actObj5 = _parent._boundEvents[eventName];
                                        var _cloneActObj4 = _Lyte.deepCopyObject(_actObj5);
                                        _LC.skipArgProcessing(_cloneActObj4, event, _parent);
                                        _LC.throwAction.call(_parent._callee, _parent._callee, eventName, _cloneActObj4, undefined, undefined, _parent, event, hasHandled);
                                    }
                                    _LCHD.triggerGlobalEvent(_parent, eventName, event, hasHandled, true);
                                }
                            }
                        }
                    }
                } else {
                    var _context2 = this._callee.component;
                    if (this.__lyteWidget && widgetMap.has(this.__lyteWidget)) {
                        _context2 = widgetMap.get(this.__lyteWidget).getClone(this._callee.component);
                    }
                    actionsObj[actObj.name].apply(this._callee.component, args);
                    hasHandled = true;
                }
            } else {
                _Lyte.error("LC004", actObj.name);
            }
        } else if (isCustom && actionsObj) {
            var eventsObj = actionsObj[eventName] || actionsObj[_LC.String.toCamelCase(eventName)] || actionsObj[_LC.String.dasherize(eventName)];
            if (eventsObj) {
                var scopeS = _LC.isCustomElement(scope) ? scope.component : scope;
                var _context3 = scopeS;
                if (this.__lyteWidget && widgetMap.has(this.__lyteWidget)) {
                    _context3 = widgetMap.get(this.__lyteWidget).getClone(scopeS);
                }
                var _val2 = eventsObj.apply(_context3, args);
                //let val = eventsObj.apply(_LC.isCustomElement(scope)? scope.component : scope, args);
                hasHandled = true;
                if (_val2 !== false) {
                    _LC.throwAction.call(scope, scope._callee, eventName, actObj, isCustom, customArgs, undefined, undefined, hasHandled);
                }
            } else {
                _LC.throwAction.call(scope, scope._callee, eventName, actObj, isCustom, customArgs, undefined, undefined, hasHandled);
            }
        }
    }), _defineProperty(_LyteComponent2, "isControlHelper", function isControlHelper(ownerElement) {
        return ownerElement.tagName === "TEMPLATE" && ownerElement.getAttribute("is") && ownerElement.getAttribute("is") !== "component" || ownerElement.hasAttribute("lyte-for") || ownerElement.hasAttribute("lyte-if") || ownerElement.hasAttribute("lyte-switch") || ownerElement.hasAttribute("lyte-forin");
    }), _defineProperty(_LyteComponent2, "isCustomElement", function isCustomElement(node, isTemplate) {
        return node.hasAttribute && ((node.tagName === "TEMPLATE" || node.attributes["lyte-for"] || node.attributes["lyte-if"] || node.attributes["lyte-switch"] || node.attributes["lyte-forin"]) && isTemplate || node.nodeName && node.nodeName.indexOf('-') !== -1 && (node.localName.startsWith("lyte-") || node.localName.startsWith("crux-") || _LyteComponent.registeredComponents[node.localName] || node.tagName === "LYTE-YIELD" || node.hasAttribute("lyte-v4") || node.hasAttribute("lyte-widget") || node.hasAttribute("lyte-registry") || (node._attributes ? node._attributes["lyte-registry"] : undefined)));
    }), _defineProperty(_LyteComponent2, "isCustomElementV3", function isCustomElementV3(node, isTemplate) {
        return node.hasAttribute && ((node.tagName === "TEMPLATE" || node.attributes["lyte-for"] || node.attributes["lyte-if"] || node.attributes["lyte-switch"] || node.attributes["lyte-forin"]) && isTemplate || node.nodeName && node.nodeName.indexOf('-') !== -1 && (_LyteComponent.registeredComponents[node.localName] || node.tagName === "LYTE-YIELD"));
    }), _defineProperty(_LyteComponent2, "componentSet", function componentSet(key, value, options, forceExecute, fromParent, fromAttr) {
        if (!forceExecute && this.get(key) === value) {
            _LC.clearError(this.data, key);
            return;
        } else if ((window.isLyteWidget || window.__lyteEnablePromise) && value instanceof Promise && !value.__lyte) {
            _LC.listenPromise(this.data, key, value);
            if (!options) {
                options = {};
            }
            options.skipTypeCast = true;
            options.skipValidation = true;
            // return;
        }
        //temporary fix
        _LC.set(this.data, key, value, options, undefined, fromParent, fromAttr);
    }), _defineProperty(_LyteComponent2, "componentGet", function componentGet(key) {
        return key ? _LC.get(this.data, key) : this.data;
    }), _defineProperty(_LyteComponent2, "nodeGet", function nodeGet(key) {
        return key ? this.component.get(key) : this.component.data;
    }), _defineProperty(_LyteComponent2, "nodeSet", function nodeSet(key, value, options, fromParent, fromAttr) {
        if (window.isLyteWidget && this.hasAttribute("comp-in-parent")) {
            if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) == "object") {
                this.setAttribute(_LC.String.dasherize(key), JSON.stringify(value));
            } else {
                this.setAttribute(_LC.String.dasherize(key), value);
            }
        }
        if (!this.component && window.isLyteWidget) {
            DataBindingLayer.valueSet(this.$data, key, value);
        } else {
            this.component.set(key, value, options, undefined, fromParent, fromAttr);
        }
    }), _defineProperty(_LyteComponent2, "registerComponentWrapper", function registerComponentWrapper() {
        try {
            var rt = _LC.registerComponent.apply(_LC, arguments);
            _Lyte._postRegister();
            return rt;
        } catch (e) {
            _Lyte._postRegister();
        }
    }), _defineProperty(_LyteComponent2, "registerComponent", function registerComponent(componentName, definition, options, widget, compClass) {
        var Component;
        if (compClass) {
            Component = compClass;
            definition.data = Component.prototype.data;
            definition.actions = Component.actions ? Component.actions() : {};
            definition.methods = Component.methods ? Component.methods() : {};
            definition._helpers = Component.helpers ? Component.helpers() : {};
            var observers = Component.observers ? Component.observers() : {};
            for (var key in observers) {
                definition[key] = observers[key];
            }
        }
        if (_LC._reRegisteredComponents.indexOf(componentName) == -1 && _LyteComponent.registeredComponents[componentName]) {
            if (!widget || widget && _LyteComponent.registeredWidgetComponents && _LyteComponent.registeredWidgetComponents[widget] && _LyteComponent.registeredWidgetComponents[widget][componentName]) {
                _Lyte.warn("Component " + componentName + " already registered");
                return;
            }
        }
        var customCrmComponent = void 0;
        var alreadyRegistered = void 0;
        if (!widget && _LC._registeredComponents[componentName] || widget && _LyteComponent.registeredWidgetComponents && _LyteComponent.registeredWidgetComponents[widget] && _LyteComponent.registeredWidgetComponents[widget][componentName]) {
            customCrmComponent = _LC._registeredComponents[componentName];
            alreadyRegistered = true;
        } else {
            customCrmComponent = function (_customElementPrototy2) {
                _inherits(customCrmComponent, _customElementPrototy2);

                function customCrmComponent() {
                    _classCallCheck(this, customCrmComponent);

                    return _possibleConstructorReturn(this, (customCrmComponent.__proto__ || Object.getPrototypeOf(customCrmComponent)).apply(this, arguments));
                }

                return customCrmComponent;
            }(customElementPrototype);
            customCrmComponent._properties = {};
            customCrmComponent.activeInstances = 0;
            // customCrmComponent.compInstances = [];
            // customCrmComponent._depthTemp = document.createElement("template");
            customCrmComponent.prototype.throwAction = this.throwAction;
            customCrmComponent.compName = componentName;
            _LC.directive.registeredProp[componentName] = [];
        }
        // customCrmComponent.prototype.setData = function(arg0, arg1 ,options) {
        //     return this.component.setData(arg0, arg1, options);
        // }
        // customCrmComponent.prototype.getData = function(arg0) {
        //     return this.component.getData(arg0);
        // }
        _LCHD.define.remove(customCrmComponent);
        _LCHD.define.getContent(customCrmComponent);
        Object.defineProperty(customCrmComponent.prototype, "setData", {
            configurable: true,
            writable: true,
            value: function value(arg0, arg1, options) {
                return this.component.setData(arg0, arg1, options);
            }
        });

        Object.defineProperty(customCrmComponent.prototype, "toggleData", {
            configurable: true,
            writable: true,
            value: function value(arg0) {
                return this.component.toggleData(arg0);
            }
        });

        Object.defineProperty(customCrmComponent.prototype, "getData", {
            configurable: true,
            writable: true,
            value: function value(arg0) {
                return this.component.getData(arg0);
            }
        });

        Object.defineProperty(customCrmComponent.prototype, "setMethods", {
            configurable: true,
            writable: true,
            value: function value(arg0, arg1) {
                return this.component.setMethods(arg0, arg1);
            }
        });

        customCrmComponent.prototype.get = this.nodeGet;
        customCrmComponent.prototype.set = this.nodeSet;
        customCrmComponent._bindsIds = [];
        options = options ? options : {};
        var aliasName = options.alias;
        var mixinsToBeUsed = [];
        var wdgtScp = widget ? widgetScopeMap.get(widget) : undefined;
        var scp = wdgtScp ? wdgtScp.Lyte : Lyte;
        // let serviceToBeUsed = Object.assign({},wdgtScp ? wdgtScp.Lyte.toBeInjectedServices : Lyte.toBeInjectedServices);
        // let serviceToBeUsed = {};
        var laterToBeUsed = {};

        var toBeUsed = {};
        // serviceToBeUsed = Object.assign({},Lyte.toBeInjectedServices);
        for (var key in options) {
            if (key == "services") {
                toBeUsed[key] = {};
                options.services.forEach(function (service) {
                    if (typeof service == "string") {
                        toBeUsed[key][service] = service;
                    } else if (service && (typeof service === 'undefined' ? 'undefined' : _typeof(service)) === "object") {
                        var srKey = service.as,
                            srVal = service.service;
                        if (!Lyte._keywords.is(srKey, "component")) {
                            if (!service.scope || service.scope == "static") {
                                toBeUsed[key][srKey] = srVal;
                            } else if (service.scope == "instance") {
                                var srKey = service.as,
                                    srVal = service.service;
                                laterToBeUsed[key] = laterToBeUsed[key] || {};
                                laterToBeUsed[key][srKey] = srVal;
                            }
                        } else {
                            Lyte.warn("Service cannot be used in any keywords of Lyte.");
                        }
                    }
                });
            }
            if (key == "mixins") {
                toBeUsed[key] = [];
                options.mixins.forEach(function (element) {
                    if (_Lyte.Mixin.exists(element)) {
                        toBeUsed[key].push(_Lyte.registeredMixins[element]);
                    } else {
                        _Lyte.$.requiredMixins(element, componentName, "component");
                    }
                });
            }

            if (key == "ssr") {
                customCrmComponent._ssr = options[key];
                if (options[key].config) {
                    customCrmComponent._config = options[key].config;
                }
            }
        }
        if (!Component) {
            /*disable async function*/
            var baseCompClass = LyteComponent.baseCompClass;
            /*disable async function*/
            Component = function (_baseCompClass) {
                _inherits(Component, _baseCompClass);

                function Component() {
                    _classCallCheck(this, Component);

                    return _possibleConstructorReturn(this, (Component.__proto__ || Object.getPrototypeOf(Component)).apply(this, arguments));
                }

                return Component;
            }(baseCompClass);
        }
        var $functions = Component.prototype.$functions = {};
        $functions.validate = function () {
            var compInstance = this._ins;
            var data = compInstance.data;
            for (var key in data) {
                _LC.handleValidation(data, key, data[key], compInstance);
            }
        };
        $functions.getError = function (path) {
            return _LC.getErrorStructure(this._ins, path);
        };
        $functions.addEventListener = function (eventName, func, options, wName) {
            // let widgetName = wName || this._ins.__wName;
            if (eventName.indexOf("-") != -1) {
                console.error("Event Name can't be hypenated");
            }
            var widgetName = this._ins.__wName;
            var widgetInstance = window.LyteWidgetClass._widgetInstances[widgetName];
            var listenerId = widgetName + "-" + widgetInstance.eventCounter++ + "-" + eventName;
            if (!options || !options.origin) {
                options = { "origin": [widgetName] };
            } else if (typeof options.origin != "string") {
                options.origin.forEach(function (item, index) {
                    if (item == "_self") {
                        options.origin[index] = widgetName;
                    }
                });
            }
            options.componentName = this._ins.$node.localName;
            window.LyteWidgetClass.addEventListener(eventName, func, options, widgetName || this._ins.__wName, listenerId);
            return listenerId;
        };

        $functions.removeEventListener = function (listenerId) {
            var widgetName = this._ins.__wName;
            window.LyteWidgetClass.removeEventListener(listenerId, widgetName);
        };
        $functions.triggerEvent = function (eventName, data, options, wName) {
            // let widgetName = wName || this._ins.__wName;
            var widgetName = this._ins.__wName;
            if (!options || !options.target) {
                options = { "target": [widgetName] };
            } else if (typeof options.target != "string") {
                options.target.forEach(function (item, index) {
                    if (item == "_self") {
                        options.target[index] = widgetName;
                    }
                });
            }
            window.LyteWidgetClass.triggerEvent(eventName, data, options, widgetName || this._ins.__wName);
        };
        /*disable async function*/
        Component.prototype._setWidget = function () {
            if (widget) {
                Object.defineProperty(this, "__wName", {
                    "enumerable": false,
                    "configurable": false,
                    "writable": false,
                    "value": widget
                });
            }
        };
        Component._v3 = true;
        // Component.compInstances = [];
        Component._widget = widget;
        customCrmComponent.component = Component;
        Component._helpers = definition._helpers || {};
        delete definition.helpers;
        var compPrototype = Component.prototype;
        compPrototype.$lg = Lyte.__gl;
        compPrototype.set = this.componentSet;
        compPrototype.get = this.componentGet;
        if (window.requireValidateInComponent) {
            compPrototype.validate = function () {
                var data = this.data;
                for (var key in data) {
                    _LC.handleValidation(data, key, data[key], this);
                }
            };
        }
        compPrototype.throwEvent = this.throwEvent;
        compPrototype.executeMethod = _LC.executeMethod;
        compPrototype.getData = _LC.componentGetData;
        compPrototype.setData = _LC.componentSetData;
        compPrototype.toggleData = _LC.componentToggleData;
        compPrototype.getMethods = _LC.componentGetMethods;
        compPrototype.setMethods = _LC.componentSetMethods;
        compPrototype.hasAction = _LC.componentHasAction;
        compPrototype.setActions = _LC.componentsetActions;
        customCrmComponent._mixins = options.mixins;
        customCrmComponent._serviceToBeUsed = laterToBeUsed ? laterToBeUsed.services : undefined;
        var actionsFromMixin = {};
        var ltInjServ = Lyte.toBeInjectedServices;
        if (ltInjServ) {
            for (var injServ in ltInjServ) {
                Lyte.$.injectServices.component(injServ, ltInjServ[injServ], undefined, Lyte.__gS[injServ], customCrmComponent);
            }
        }
        for (var tKey in toBeUsed) {
            if (tKey == "mixins") {
                var aFromMixin = {},
                    methodsFromMixin = {},
                    newDefinition = {};
                _LC.dataFromMixin(toBeUsed.mixins, actionsFromMixin, methodsFromMixin, newDefinition);
                definition = Object.assign(newDefinition, definition);
                actionsFromMixin = Object.assign(actionsFromMixin, aFromMixin);
            } else if (tKey == "services") {
                var serviceToBeUsed = toBeUsed[tKey];
                for (var serv in serviceToBeUsed) {
                    if (Lyte.registeredServices.hasOwnProperty(serviceToBeUsed[serv])) {
                        definition[serv] = Lyte.$.instantiateService(serviceToBeUsed[serv]);
                    } else {
                        Lyte.$.requiredServices(serv, serviceToBeUsed[serv], function (serviceData, serviceKey, cname, sname) {
                            var customCrmComponent = _LC._registeredComponents[componentName];
                            customCrmComponent.component.prototype[serviceKey] = Lyte.$.instantiateService(sname);
                        });
                    }
                }
            }
        }
        customCrmComponent._actions = Object.assign({}, actionsFromMixin, definition.actions);
        // customCrmComponent._template = definition._template;
        customCrmComponent._dynamicNodes = definition._dynamicNodes;
        customCrmComponent._templateAttributes = definition._templateAttributes;
        customCrmComponent._callBacks = {};
        customCrmComponent._observers = [];
        Component._callBacks = {};
        Component._observers = [];
        Component._properties = {};
        Component.activeInstances = 0;
        Component._depthTemp = document.createElement("template");
        Component._mixins = options.mixins;
        Component._actions = customCrmComponent._actions;
        Component._template = definition._template;
        Component._dynamicNodes = definition._dynamicNodes;
        Component._templateAttributes = definition._templateAttributes;
        if (definition._preRenderTemplate) {
            var html = definition._preRenderTemplate;
            var div = document.createElement("div");
            div.innerHTML = html;
            Component._preRenderTemplate = div.firstChild;
            definition._preRenderTemplate = null;
        }
        delete definition._template;
        delete definition._dynamicNodes;
        delete definition._templateAttributes;
        //            let properties = definition.data ? definition.data : {};
        var properties = definition.data ? definition.data : undefined;
        var methods = Object.assign({}, methodsFromMixin, definition.methods);
        //            customCrmComponent._observedAttributes = Object.keys(properties);
        customCrmComponent._observedAttributes = definition._observedAttributes || [];
        customCrmComponent.dasherizeObservedAttributes();
        customCrmComponent._observedMethodAttributes = definition._observedMethodAttributes || {};
        Component._observedAttributes = definition._observedAttributes || [];
        Component._observedMethodAttributes = definition._observedMethodAttributes || {};
        customCrmComponent._deepWatchProperties = definition._deepWatchProperties || {};
        delete definition._observedAttributes;
        delete definition._observedMethodAttributes;
        delete definition.data;
        delete definition.methods;
        definition = _LC.updateCustomCrmComponent(definition, customCrmComponent);
        customCrmComponent._data = properties;
        customCrmComponent._methods = methods;
        Component._data = properties;
        Component._methods = methods;
        if (!Lyte.getConfig("lazyComponentRegister")) {
            customCrmComponent._registerComponent(componentName, customCrmComponent, widget);
        } else {
            if (idleScheduler.tasks.get(componentName)) {
                idleScheduler.deleteTask(componentName);
            }
            idleScheduler.enqueueTask(customCrmComponent._registerComponentFn(componentName, customCrmComponent, widget), [], componentName);
            // idleScheduler.enqueueTask(function(componentName, customCrmComponent, widget){
            //     customCrmComponent._registerComponent(componentName,customCrmComponent,widget);
            // }, [componentName, customCrmComponent, widget], componentName);
        }
        _LyteComponent.registeredComponents[componentName] = true;
        if (aliasName) {
            _LyteComponent.registeredComponents[aliasName] = true;
        }
        if (_Lyte.isWidgetBuild) {
            window._wrapperComponents.push(componentName.toUpperCase());
            if (aliasName) {
                window._wrapperComponents.push(aliasName.toUpperCase());
            }
        }
        var aliasClass = void 0;
        if (!_LC._registeredComponents[componentName]) {
            if (document.readyState === "complete" || document.readyState === "interactive" || window.preLoadLyteComponents) {
                // document is already ready to go
                customElements.define(componentName, customCrmComponent, undefined, _Lyte.isWidgetBuild ? { "widget": true } : { v3: true });
                if (aliasName) {
                    aliasClass = function (_customCrmComponent) {
                        _inherits(aliasClass, _customCrmComponent);

                        function aliasClass() {
                            _classCallCheck(this, aliasClass);

                            return _possibleConstructorReturn(this, (aliasClass.__proto__ || Object.getPrototypeOf(aliasClass)).apply(this, arguments));
                        }

                        return aliasClass;
                    }(customCrmComponent);
                    customElements.define(aliasName, aliasClass, undefined, _Lyte.isWidgetBuild ? { "widget": true } : { v3: true });
                }
            } else {
                _LC.toBeRegistered.push({ name: componentName, def: customCrmComponent, _lyteOptions: _Lyte.isWidgetBuild ? { "widget": true } : { v3: true } });
                if (aliasName) {
                    aliasClass = function (_customCrmComponent2) {
                        _inherits(aliasClass, _customCrmComponent2);

                        function aliasClass() {
                            _classCallCheck(this, aliasClass);

                            return _possibleConstructorReturn(this, (aliasClass.__proto__ || Object.getPrototypeOf(aliasClass)).apply(this, arguments));
                        }

                        return aliasClass;
                    }(customCrmComponent);
                    _LC.toBeRegistered.push({ name: aliasName, def: aliasClass, _lyteOptions: _Lyte.isWidgetBuild ? { "widget": true } : { v3: true } });
                }
            }
            _LC._registeredComponents[componentName] = customCrmComponent;
            if (aliasName) {
                _LC._registeredComponents[aliasName] = aliasClass;
            }
        }
        if (!Lyte.getConfig("lazyComponentRegister")) {
            _LC.postRegistration(componentName, customCrmComponent);
        }
        if (widget) {
            var wObj = _LyteComponent.registeredWidgetComponents = _LyteComponent.registeredWidgetComponents || {};
            var wObj1 = wObj[widget] = wObj[widget] || {};
            wObj1[componentName] = customCrmComponent;
        }
        var pendComps = _LC.V3.pendingComp.find(componentName);
        if (pendComps && pendComps.length) {
            _LC.V3.pendingComp.execute(pendingComps);
        }
        if (alreadyRegistered) {
            var pendingComps = customCrmComponent._pendingComponents || [];
            pendingComps.forEach(function (item) {
                delete item.__lyteIgnore;
                item.actualConstructor();
                var arr = Array.from(item.attributes);
                arr.forEach(function (attr) {
                    if (item.constructor.observedAttributes.indexOf(attr.name) != -1) {
                        item.attributeChangedCallback(attr.name, null, attr.value);
                    }
                });
                item.connectedCallback();
            });
            customCrmComponent._pendingComponents = [];
        }
        return customCrmComponent;
    }), _defineProperty(_LyteComponent2, "postRegistration", function postRegistration(componentName, customCrmComponent) {
        var depthTemp = customCrmComponent.component._depthTemp;
        if (!_LC._ie && depthTemp && depthTemp.content.childNodes.length) {
            depthTemp.setAttribute("data-id", "depthTemp_" + componentName);
            _LC.lyteComponentsDiv.appendChild(depthTemp);
        } else {
            delete customCrmComponent.component._depthTemp;
        }
    }), _defineProperty(_LyteComponent2, "registerHelper", function registerHelper(name, helper) {
        _LyteComponent.registeredHelpers[name] = helper;
    }), _defineProperty(_LyteComponent2, "registerMixin", function registerMixin(name, mixin) {
        _Lyte.Mixin.register.call(_Lyte, name, mixin);
    }), _defineProperty(_LyteComponent2, "typeCast", function typeCast(value, dataType, obj) {
        if (value === null) {
            return value;
        }
        try {
            switch (dataType) {
                case "string":
                    return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === "object" ? JSON.stringify(value) : value.toString();
                    break;
                case "number":
                    {
                        if (value == "") {
                            return undefined;
                        }
                        var val = +value;
                        if (isNaN(val)) {
                            throw "TypeCast exception";
                        }
                        return val;
                    }
                    break;
                case "array":
                case "object":
                    return JSON.parse(value);
                    break;
                case "boolean":
                    return !value && value !== "" || value === "false" ? false : true;
                    break;
                default:
                    return value;
            }
        } catch (e) {
            if (obj) {
                obj.isError = true;
            }
            return value;
        }
    }), _defineProperty(_LyteComponent2, "sendtoclient", function sendtoclient(prop, server, node) {
        var data = server ? prop.component.data : prop;
        var newData = {};
        var data_prop = node;
        for (var i in data) {
            if (server) {
                var def = prop.component.__data[i];
                if (i == "bindIds") {
                    newData[i] = { value: data[i] };
                }
                if (def && /^(object|array)$/.test(def.type) && prop._attributeDetails && prop._attributeDetails.hasOwnProperty(LyteComponent.String.dasherize(i))) {
                    newData[i] = { "fP": true };
                } else if (data[i] instanceof Date) {
                    newData[i] = { "value": data[i], "type": "Date" };
                } else if (data_prop[i]) {
                    newData[i] = { "value": data[i], "type": data_prop[i].type };
                } else {
                    var type = _typeof(data[i]);
                    if (data[i] == undefined) {
                        type = undefined;
                    }
                    newData[i] = { "value": data[i], "type": type };
                }
            } else {
                if (data[i].type == "Date") {
                    newData[i] = new Date(data[i].value);
                } else if (!data[i].fP) {
                    newData[i] = data[i].value;
                }
            }
        }
        return newData;
    }), _defineProperty(_LyteComponent2, "getDataType", function getDataType(value) {
        var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
        if (type === "object") {
            if (Array.isArray(value)) {
                return "array";
            }
        }
        return type;
    }), _defineProperty(_LyteComponent2, "handleValidation", function handleValidation(object, property, value, component, init) {
        var error = _Lyte.validate(object, property, value, component, init);
        var cmpData = LyteComponent.getCmpData(component.data);
        if (error) {
            _LC.set(cmpData.errors, property, error);
            if (component.$node.callback) {
                component.$node.callback("onError", property, error);
            }
        } else {
            _LC.clearError(object, property);
        }
        return error;
    }), _defineProperty(_LyteComponent2, "clearError", function clearError(data, property) {
        if (data.errors && data.errors[property]) {
            _Lyte.objectUtils(data.errors, "delete", property);
        }
    }), _defineProperty(_LyteComponent2, "createLyteId", function createLyteId(comp) {
        comp.__counter++;
        return "__lyteId" + comp.__counter;
    }), _defineProperty(_LyteComponent2, "apdNode", function apdNode(node, comp) {
        _LC.tDiv.content.appendChild(node);
        var id = this.createLyteId(comp);
        comp.__h[id] = node;
        node.__lyteId = id;
    }), _defineProperty(_LyteComponent2, "update", function update(object, property, value, options, fromStore, oldValue, setterScope, actualProperty, fromParent, storeRecord, fromAttr) {
        var fromComponent = object.__component__;
        var updateAttr = true;

        var dataType = void 0,
            dataDef = void 0,
            estObjBind = false;
        if (!oldValue) {
            oldValue = object[property];
            if (fromComponent && fromComponent.tagName !== "LYTE-YIELD") {
                dataDef = fromComponent.component.__data[property];
                if (!options || (typeof options === 'undefined' ? 'undefined' : _typeof(options)) == "object" && options.skipValidation != true) {
                    if (dataDef && (dataType = dataDef.type)) {
                        updateAttr = !dataDef.hideAttr;
                        if (dataType !== _LC.getDataType(value) && (value !== undefined || dataType === "boolean")) {
                            value = _LC.typeCast(value, dataType);
                        }
                    }
                }
                if (value === oldValue && (!options || !options.force)) {
                    _LC.clearError(object, property);
                    return;
                }
                if (!options || (typeof options === 'undefined' ? 'undefined' : _typeof(options)) == "object" && options.skipValidation != true) {
                    var error = _LC.handleValidation(object, property, value, fromComponent.component);
                    if (error) {
                        return;
                    }
                }
            }

            //object[property] = value;
            if (!object.hasOwnProperty(property) && !Array.isArray(object)) {
                _LC.oF(object, "add", property, value, true);
            } else {
                // DataBindingLayer Set
                if (window.isLyteWidget && (!options || options.postmessage != false)) {
                    DataBindingLayer.valueSet(object, property, value);
                } else if (Lyte.isWidgetBuild && (!options || options.postmessage != false) && object.__component__ && object.__component__.hasAttribute("comp-in-parent") && !fromAttr) {
                    DataBindingLayer.sendDataUpdateToFrame(object.__component__, _defineProperty({}, property, value));
                }
                object[property] = value;
            }
        }
        if (window.isLyteWidget && options && options.postmessage === false) {
            updateAttr = false;
        }
        var toBeExecuted = fromComponent ? true : false;
        var dasherizedAttr = _LC.String.dasherize(property);
        var callDeepObs = false;
        if (object._scp) {
            if (!Lyte.cmpData(oldValue, value)) {
                callDeepObs = true;
            }
            if (oldValue && (Array.isArray(oldValue) || (typeof oldValue === 'undefined' ? 'undefined' : _typeof(oldValue)) == "object")) {
                var keys = Array.from(object._scp.keys());
                keys.forEach(function (id) {
                    var nestObj = Lyte.nestScp[id];
                    var isCyclic = nestObj.cyclic;
                    Lyte.removeNestScp(oldValue, id);
                    if (isCyclic) {
                        Lyte.bindObj(nestObj._data, undefined, id, [], new Map(), undefined, undefined, true);
                    }
                });
            }
        }
        if (Lyte.isRecord(object) && object.$.__scpObj || object.hasOwnProperty("__component__") && object.__component__.__scpObj) {
            var _scpObj, kmpKey;
            if (Lyte.isRecord(object)) {
                _scpObj = object.$.__scpObj;
                kmpKey = object;
            } else {
                _scpObj = object.__component__.__scpObj;
                kmpKey = object.__component__;
            }
            if (_scpObj.hasOwnProperty(property)) {
                var _sId = _scpObj[property].split("_");
                Lyte.removeNestScp(oldValue, _sId[0], _sId[1], undefined, kmpKey, undefined, Lyte.isRecord(value) || Array.isArray(value) && value.model && value.add ? value : undefined);
                delete _scpObj[property];
            }
        }
        var customDtype;
        if (dataDef && Lyte.Transform[dataDef.type]) {
            var customDataType = Lyte.Transform[dataDef.type];
            if (/^(object|array)$/.test(customDataType.extends) && (customDataType.hasOwnProperty("properties") || customDataType.hasOwnProperty("items"))) {
                customDtype = true;
            }
        }
        if (fromStore && Lyte.isRecord(object) || object && object.hasOwnProperty("_scp") && object._scp.size || dataDef && /^(object|array)$/.test(dataDef.type) && dataDef.watch == true || customDtype) {
            Lyte.establishObjectBinding(object, property, fromStore, true, storeRecord, dataDef && dataDef.watch ? dataDef.watch : undefined);
        }
        if (fromComponent && actualProperty && (typeof value === "string" && fromComponent.getAttribute(dasherizedAttr) !== value || fromComponent.hasAttribute(dasherizedAttr))) {
            if ((!_LC.customPropRegex.exec(property) || fromComponent.hasAttribute(dasherizedAttr)) && updateAttr) {
                if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === "object") {
                    var jsonString = void 0;
                    try {
                        jsonString = JSON.stringify(value);
                        var attrNode1 = fromComponent.attributes.getNamedItem(dasherizedAttr);
                        attrNode1.__lyteIgnore = true;
                        fromComponent.setAttribute(dasherizedAttr, jsonString);
                        attrNode1.__lyteIgnore = false;
                    } catch (e) {}
                } else {
                    var attributeString = _LC.typeCast(value, "string");
                    if (fromComponent.getAttribute(dasherizedAttr) !== attributeString) {
                        var detAttr = fromComponent.attributes.getNamedItem(dasherizedAttr);
                        if (detAttr) {
                            detAttr.__lyteIgnore = true;
                        }
                        attributeString = attributeString || "";
                        fromComponent.setAttribute(dasherizedAttr, attributeString);
                        if (detAttr) {
                            detAttr.__lyteIgnore = false;
                        }
                    }
                }
            }
        }
        if (value && typeof value !== "string" && typeof value !== "boolean" && typeof value !== "number") {
            //newValue is of type object 

            if (oldValue && (typeof oldValue === 'undefined' ? 'undefined' : _typeof(oldValue)) === "object" && oldValue._bindings) {
                //Both oldValue and newValue are objects. 
                if (!value._bindings) {
                    defProp(value, "_bindings", {
                        enumerable: false,
                        writable: true,
                        value: new Set(),
                        configurable: true
                    });
                }
                var fcmpData = fromComponent ? LyteComponent.getCmpData(fromComponent.component.data) : undefined;
                //for changing only child component
                if (fromComponent && fcmpData === object && property.indexOf('.') === -1 && !window.isLyteWidget) {
                    var bindings = fromComponent.getProperty(property);
                    this.removeSelectedBindingDeep(bindings, oldValue);
                    addBindings(value, bindings);
                    this.establishBindings(bindings, value);
                    //For removing binding in the object due to forIn Helper ( actual object binding and not the _dynamicNodes binding).
                    if (bindings._forHelpers) {
                        var bindfor = bindings._forHelpers.toArrayLyte();
                        for (var i = 0; i < bindfor.length; i++) {
                            var _item4 = bindfor[i];
                            if (_item4._propBindingObject) {
                                this.removeSelectedBindingDeep(_item4._propBindingObject, oldValue);
                                //                                  value._bindings.add(item._propBindingObject);
                                //                                  this.establishBindings(item._propBindingObject, value);
                            }
                        }
                    }
                    this.affectChanges(bindings, undefined, oldValue, setterScope, object[property], undefined, options);
                } else {
                    //To change only the bindings present in the object and not all the bindings present in the oldValue.
                    if (object._bindings) {
                        var oldbind = object._bindings.toArrayLyte();
                        for (var _i62 = 0; _i62 < oldbind.length; _i62++) {
                            var _item5 = oldbind[_i62][property];
                            if (_item5) {
                                this.removeSelectedBindingDeep(_item5, oldValue);
                                addBindings(value, _item5);
                                this.establishBindings(_item5, value);
                                //For removing binding in the object due to forIn Helper ( actual object binding and not the _dynamicNodes binding).
                                if (_item5._forHelpers) {
                                    var forbind = _item5._forHelpers.toArrayLyte();
                                    for (var j = 0; j < forbind.length; j++) {
                                        var itemBinding = forbind[j];
                                        if (itemBinding._propBindingObject) {
                                            this.removeSelectedBindingDeep(itemBinding._propBindingObject, oldValue);
                                        }
                                    }
                                }
                                this.affectChanges(_item5, undefined, oldValue, setterScope, object[property], undefined, options);
                            }
                        }
                    }
                }
            } else {
                //newValue is object and oldValue is string. Hence establish bindings from oldValue's object and place it in the newValue. 
                if (object._bindings) {
                    // makeSet(value, "_bindings");
                    var objbind = object._bindings.toArrayLyte();
                    for (var _i63 = 0; _i63 < objbind.length; _i63++) {
                        var _item6 = objbind[_i63];
                        if (_item6[property]) {
                            addBindings(value, _item6[property]);
                            this.establishBindings(_item6[property], value);
                            this.affectChanges(_item6[property], undefined, oldValue, setterScope, object[property], undefined, options);
                        }
                    }
                }
            }
            dataDef = dataDef || (fromComponent && fromComponent.tagName !== "LYTE-YIELD" ? fromComponent.component.__data[property] : undefined);
            if (fromStore && Lyte.isRecord(object) || object && object.hasOwnProperty("_scp") && object._scp.size || dataDef && /^(object|array)$/.test(dataDef.type) && (dataDef.watch || dataDef.hasOwnProperty("items") || dataDef.hasOwnProperty("properties"))) {
                estObjBind = true;
            }
        } else {
            //newValue is string

            if (oldValue && (typeof oldValue === 'undefined' ? 'undefined' : _typeof(oldValue)) === "object" && oldValue._bindings && object._bindings) {
                //newValue is string and oldValue is object 
                var _objbind = object._bindings.toArrayLyte();
                for (var _i64 = 0; _i64 < _objbind.length; _i64++) {
                    var _item7 = _objbind[_i64];
                    if (_item7[property]) {
                        //oldValue._bindings.delete(item[property]);
                        //if(oldValue._bindings.size === 0) {
                        //  delete oldValue._bindings;
                        //  break;
                        //}
                        this.removeSelectedBindingDeep(_item7[property], oldValue);
                        if (_item7[property]._forHelpers) {
                            var _forbind = _item7[property]._forHelpers.toArrayLyte();
                            for (var _j3 = 0; _j3 < _forbind.length; _j3++) {
                                var _itemBinding = _forbind[_j3];
                                if (_itemBinding._propBindingObject) {
                                    this.removeSelectedBindingDeep(_itemBinding._propBindingObject, oldValue);
                                }
                            }
                        }
                    }
                }
            }

            //when newValue and oldValue , both are string, no need to change bindings. 
            if (object._bindings) {
                var _objbind2 = object._bindings.toArrayLyte();
                for (var _i66 = 0; _i66 < _objbind2.length; _i66++) {
                    var _item8 = _objbind2[_i66];
                    if (_item8[property]) {
                        this.affectChanges(_item8[property], undefined, oldValue, setterScope, object[property], undefined, options);
                    }
                }
            }
        }
        if (callDeepObs && object._scp) {
            this.callDeepObservers(object, { type: "deepChange", oldValue: oldValue, newValue: value }, property);
        }
        var dasherizedProperty = _LC.String.dasherize(property);
        if (fromComponent && fromComponent.__widgetP) {
            DataBindingLayer.sendLbindUpdate(fromComponent, dasherizedProperty, value);
        }
        if (toBeExecuted && !fromParent && fromComponent._attributeDetails && fromComponent._callee) {
            //let syntaxValue = fromComponent.getAttributeNode(property).syntaxValue;
            var _dasherizedProperty = _LC.String.dasherize(property);
            var attrDetail = fromComponent._attributeDetails[_dasherizedProperty];
            var syntaxValue = void 0;
            if (attrDetail && attrDetail.isLbind) {
                syntaxValue = attrDetail.dynamicValue;
            }
            if (syntaxValue) {
                var contextSwitchArray = void 0;
                if (fromComponent._cx) {
                    contextSwitchArray = [];
                    _LC.changeContext(fromComponent._cx.node, contextSwitchArray, fromComponent._cx);
                }
                var fclData = LyteComponent.getCmpData(fromComponent._callee.component.data);
                var _obj18 = _LC.getNew(fclData, syntaxValue);
                if (!_obj18.context) {
                    return;
                }
                var exec = false;
                if (_obj18.context === fclData) {
                    if (fromComponent._callee._properties[_obj18.lastKey] && fromComponent._callee._properties[_obj18.lastKey].__fromComponent) {
                        exec = true;
                    }
                } else {
                    exec = true;
                }
                //self.setData(this._lbind,this.value);
                if (exec) {
                    var lastKeyIndex = +_obj18.lastKey;
                    if (Array.isArray(_obj18.context) && typeof lastKeyIndex == "number") {
                        var callReplaceAt = lastKeyIndex < _obj18.context.length;
                        if (_obj18.context[lastKeyIndex] !== value || !callReplaceAt) {
                            _LC.aF(_obj18.context, callReplaceAt ? "replaceAt" : "insertAt", lastKeyIndex, value);
                        }
                    } else {
                        _LC.set(_obj18.context, _obj18.lastKey, value, options);
                    }
                }
                if (contextSwitchArray) {
                    _LC.removeContext(fromComponent._cx.node, contextSwitchArray, fromComponent._cx);
                }
            }
        }
    }), _defineProperty(_LyteComponent2, "getContentForIE", function getContentForIE(content, constr, newlyCreated, info) {
        if (typeof content === "string") {
            newlyCreated = true;
            var div = createElement("div");
            div.innerHTML = content;
            content = div.childNodes[0];
            constr.splitTextNodes(content);
        }
        if (content.getAttribute && content.getAttribute("depth")) {
            if (Lyte._ms && info) {
                info._content = div;
            }
            var itr = parseInt(content.getAttribute("depth"));
            content = _Lyte._ie ? content : newlyCreated ? content.content : content.content.cloneNode(true);
            for (var i = 0; i < itr; i++) {
                content = content.childNodes[0];
            }
        }
        return content;
    }), _defineProperty(_LyteComponent2, "replaceWithPf", function replaceWithPf(node1, node2) {
        if (_Lyte._rwpf) {
            _insertBefore(node1.parentNode, node2, node1);
            node1.remove();
        } else {
            node1.replaceWith(node2);
        }
    }), _defineProperty(_LyteComponent2, "getCallee", function getCallee(callee, self) {
        while (callee && !_LC.isCustomElementV3(callee) && callee.tagName !== "LYTE-YIELD") {
            if (callee.tagName === "BODY") {
                callee = null;
                break;
            }
            callee = callee.parentNode;
        }
        if (callee && callee.tagName === "LYTE-YIELD") {
            return callee._registerYield ? callee._registerYield._callee : undefined;
        }
        return self === callee ? undefined : callee;
    }), _defineProperty(_LyteComponent2, "set", function set(object, property, value, options, fromStore, fromParent, fromAttr) {
        var lastIndex = -1;
        var s_rec,
            check = {},
            recDottedProp;
        if (Lyte.isRecord(object) && fromStore) {
            s_rec = object;
        }
        if (!((typeof property === 'undefined' ? 'undefined' : _typeof(property)) === "object") || !property) {
            property = property + "";
            lastIndex = property.lastIndexOf('.');
        }
        var actualProperty = property;
        if (lastIndex !== -1) {
            var outerPropertyPath = property.substring(0, lastIndex);
            property = property.substring(lastIndex + 1);
            object = _LC.get(object, outerPropertyPath);
            recDottedProp = true;
        }
        if (object && object.__ltPrx__) {
            object = object.__target__;
            // object[property] = value;
            // return;
        }
        var val1 = object[property] && object[property].__target__ ? object[property].__target__ : object[property];
        var val2 = value && value.__target__ ? value.__target__ : value;
        if (typeof property === "string" && val1 === val2 && (!options || !options.force)) {
            if (object.__component__) {
                _LC.clearError(object, property);
            } else if (_Lyte.isRecord(object) && !object.$.isCloned) {
                store.$.clrRecErr(object.$, property);
                object.$.emit ? object.$.emit("set", [object, property]) : undefined;
                object.$.model && object.$.model.emit ? object.$.model.emit("set", [object.$.model._name, object, property]) : undefined;
                store.emit ? store.emit("set", [object.$.model._name, object, property]) : undefined;
            }
            return;
        }
        var oldValues = [];
        if (object._setterScope) {
            var setterScope = object._setterScope;
        }
        var checkSim = false,
            watch = [];
        if (object._scp && object._scp.size) {
            var keys = Array.from(object._scp.keys());
            keys.forEach(function (id) {
                var _obj = object._scp.get(id);
                obj = _obj.paths;
                var recObj = Lyte.nestScp[id],
                    model,
                    field,
                    rec,
                    attr,
                    wobj = {};
                var pathArr = Object.keys(obj),
                    aPath;
                if (pathArr.length > 1) {
                    aPath = "*";
                } else if (pathArr.length == 1) {
                    aPath = pathArr[0];
                }
                wobj.path = aPath;
                wobj.id = id;
                if (pathArr.length > 1) {
                    wobj.paths = pathArr;
                }
                wobj.attr = attr;
                wobj.data = recObj.data;
                wobj.PropsInfo = recObj.PropsInfo || undefined;
                if (recObj.model) {
                    var mMap = recObj.model;
                    wobj.Error = recObj.Error;
                    var mKeys = Array.from(recObj.model.keys());
                    for (var i = 0; i < mKeys.length; i++) {
                        var mName = mKeys[i];
                        var pkMap = mMap.get(mName);
                        if (pkMap) {
                            var pkArr = Array.from(pkMap.keys());
                            var pkLen = pkArr.length;
                            for (var j = 0; j < pkLen; j++) {
                                var mPk = pkArr[j];
                                var attrMap = pkMap.get(mPk);
                                var attrArr = Array.from(attrMap.keys());
                                var attrLen = attrArr.length;
                                for (k = 0; k < attrLen; k++) {
                                    var mAttr = attrArr[k];
                                    var mObj = Object.assign({}, wobj);
                                    var mRec = store.peekRecord(mName, mPk);
                                    if (mRec) {
                                        model = mRec.$.model;
                                        field = model.fieldList[mAttr];
                                        if (field && (field.properties || field.items || field.watch == true || Lyte.Transform[field.type])) {
                                            mObj.data = Lyte.deepCopyObject(mRec[mAttr]);
                                            mObj.rec = mRec;
                                            mObj.isRec = true;
                                            mObj.attr = mAttr;
                                            mObj.dtype = model.fieldList[mAttr];
                                            mObj._cmpErr = mRec.$.error;
                                            mObj.key = mAttr;
                                        }
                                        watch.push(mObj);
                                    }
                                }
                            }
                        }
                    }
                } else {
                    watch.push(wobj);
                }
                // var isAttr = rec.$._attributes.hasOwnProperty(attr);
                // if(!isAttr){
                //     rec.$._attributes[attr] = Lyte.deepCopyObject(rec[attr]);
                // }
                // else{
                //     checkSim = true;
                // }
                // rec.$.isModified = true;          
            });
            watch.forEach(function (val) {
                if (!options || (typeof options === 'undefined' ? 'undefined' : _typeof(options)) == "object" && options.skipValidation != true) {
                    var id = val.id,
                        path = val.path.split("."),
                        dtype = val.dtype,
                        errs;
                    if (val.isRec) {
                        if (fromStore) {
                            path = actualProperty.split(".");
                            path.splice(-1);
                            path.shift();
                        }
                        path = path.length == 1 && path[0] == property ? [] : path;
                        check.Prop = dtype;
                        Lyte.checkNestedProp(id, path, dtype, val, object, property, value, check, fromStore);
                    }
                    if (val.PropsInfo) {
                        val.PropsInfo.forEach(function (props) {
                            props.path = val.path;
                            props.attr = val.attr;
                            dtype = props.dtype;
                            check.Prop = dtype;
                            Lyte.checkNestedProp(id, path, dtype, props, object, property, value, check, fromStore);
                        });
                    }
                }
            });
            if (check.value && check.value.code) {
                _Lyte.error("ERR35", check.Prop.type);
                return;
            }
        }
        actualProperty = actualProperty === property ? actualProperty : undefined;
        var shareObj = {};
        if ((typeof property === 'undefined' ? 'undefined' : _typeof(property)) === "object") {
            if (_Lyte.isRecord(object) && !fromStore && !object.$.isCloned) {
                // for(let key in property){
                //     if(Array.isArray(object[key])){
                //         oldValues.push({key:key,oldValue:object[key].slice(0)});    
                //     }
                //     else{
                //         oldValues.push({key:key,oldValue:object[key]});
                //     }
                // }
                for (var _key31 in property) {
                    var locValue = property[_key31];
                    var dataType = object.$.model.fieldList[_key31];
                    dataType = dataType ? dataType.type : undefined;
                    if (dataType && (locValue !== undefined || dataType === "boolean") && dataType !== _LC.getDataType(locValue)) {
                        property[_key31] = _LC.typeCast(locValue, dataType);
                    }
                }
                var record = store.$.setData(object.$, property, undefined, options, undefined, undefined, shareObj);
                if (record.$.isError) {
                    return record;
                }
                // for(let i=0; i<oldValues.length; i++){
                //     _LC.update(object,oldValues[i].key,object[oldValues[i].key],fromStore,(oldValues[i].oldValue === undefined)?null:oldValues[i].oldValue ,setterScope, actualProperty, fromParent);
                // }
            } else {
                //object[property] =  value;
                for (var _key32 in property) {
                    //_LC.update(object,key,property[key],fromStore,undefined,setterScope, actualProperty, fromParent);
                    //value is option here
                    _LC.set(object, _key32, property[_key32], value, fromStore, fromParent);
                }
            }
        } else {
            if (_Lyte.isRecord(object) && (!fromStore || fromStore && recDottedProp) && !object.$.isCloned) {
                var old = object[property];
                var _dataType = object.$.model.fieldList[property];
                _dataType = _dataType ? _dataType.type : undefined;
                if (_dataType && (value !== undefined || _dataType === "boolean") && _dataType !== _LC.getDataType(value)) {
                    value = _LC.typeCast(value, _dataType);
                }
                var _record = store.$.setData(object.$, property, value, options, undefined, undefined, shareObj);
                if (_record.$.isError) {
                    return _record;
                }
                //Commented because update will happend when "set" is called from setData of store. 
                //_LC.update(object,property,value,fromStore,(old === undefined) ? null : old,setterScope , actualProperty);    
            } else {
                _LC.update(object, property, value, options, fromStore, undefined, setterScope, actualProperty, fromParent, s_rec, fromAttr);
            }
        }
        if (watch && watch.length) {
            watch.forEach(function (obj) {
                if (obj.isRec) {
                    store.$.deepValueChange(obj.rec, obj.attr, obj.rec[obj.attr], obj);
                }
            });
        }
    }), _defineProperty(_LyteComponent2, "adCx", function adCx(node, contextSwitchArray) {
        var isYield = node.tagName === "LYTE-YIELD";
        if (node._cx && (!isYield || node._cx.node.tagName !== "LYTE-YIELD")) {
            _LC.changeContext(node._cx.node, contextSwitchArray, node._cx, isYield);
        } else if (isYield && node._callee._cx) {
            _LC.changeContext(node._callee._cx.node, contextSwitchArray, node._callee._cx, true);
        }
    }), _defineProperty(_LyteComponent2, "rmCx", function rmCx(node, contextSwitchArray, oneLevel) {
        var isYield = node.tagName === "LYTE-YIELD";
        if (node._cx && (!isYield || node._cx.node.tagName !== "LYTE-YIELD")) {
            _LC.removeContext(node._cx.node, contextSwitchArray, node._cx, isYield, oneLevel);
        } else if (isYield && node._callee._cx) {
            _LC.removeContext(node._callee._cx.node, contextSwitchArray, node._callee._cx, true, oneLevel);
        }
    }), _defineProperty(_LyteComponent2, "changeContext", function changeContext(node, contextSwitchArray, contextSwitchInfo, proceedFurther) {
        if (!contextSwitchInfo) {
            return;
        }
        var isYield = node.tagName === "LYTE-YIELD";
        if (node._cx && (!isYield || node._cx.node.tagName !== "LYTE-YIELD")) {
            _LC.changeContext(node._cx.node, contextSwitchArray, node._cx, node.tagName === "LYTE-YIELD" || proceedFurther);
        } else if ((node.tagName === "LYTE-YIELD" || proceedFurther) && node._callee && node._callee._cx) {
            _LC.changeContext(node._callee._cx.node, contextSwitchArray, node._callee._cx);
        }
        if (isYield) {
            var insertYield = node._registerYield;
            var callee = insertYield._callee;
            if (callee && callee._cx) {
                _LC.changeContext(callee._cx.node, contextSwitchArray, callee._cx);
            }
        }
        var indexValue = void 0,
            itemValue = void 0;
        if (contextSwitchInfo.type) {
            if (contextSwitchInfo.type === "for") {
                indexValue = node.getAttribute("index");
                itemValue = node.getAttribute("item");
                if (node._items.length === 0) {
                    return;
                }
            } else {
                indexValue = node.getAttribute("key");
                itemValue = node.getAttribute("value");
                if (Object.keys(node._items).length === 0) {
                    return;
                }
            }
            var _callee = node._callee;
            var cmpData = LyteComponent.getCmpData(_callee.component.data);
            var initialItemValue = cmpData[itemValue];
            var initialIndexValue = cmpData[indexValue];
            var initialItemProp = _callee._properties[itemValue];
            var initialIndexProp = _callee._properties[indexValue];
            var initialPropDetails = {};
            if (node._childProp && node._childProp.length) {
                node._childProp.forEach(function (propName) {
                    if (contextSwitchInfo.node._propNodes[propName]) {
                        initialPropDetails[propName] = {
                            data: _callee.component.data[propName],
                            prop: _callee._properties[propName]
                        };
                        var itInd = contextSwitchInfo.itemIndex;
                        _callee.component.data[propName] = contextSwitchInfo.node._propNodes[propName][itInd];
                        _callee._properties[propName] = node._items[itInd].propProperty[propName];
                        contextSwitchInfo.__prop = true;
                    }
                });
            } else if (node._currentProp && node._currentProp.length) {
                node._currentProp.forEach(function (propName) {
                    if (contextSwitchInfo.node._propNodes[propName]) {
                        initialPropDetails[propName] = {
                            data: _callee.component.data[propName],
                            prop: _callee._properties[propName]
                        };
                        var itInd = contextSwitchInfo.itemIndex;
                        _callee.component.data[propName] = contextSwitchInfo.node._propNodes[propName][itInd];
                        _callee._properties[propName] = node._items[itInd].propProperty[propName];
                        contextSwitchInfo.__prop = true;
                    }
                });
            }
            var items = contextSwitchInfo.type === "for" ? node._currentItems : node._currentObject;
            // let items = contextSwitchInfo.type === "for" ? node._attributes.items : node._attributes.object;
            cmpData[itemValue] = items[contextSwitchInfo.itemIndex];
            cmpData[indexValue] = contextSwitchInfo.itemIndex;
            _callee._properties[itemValue] = node._items[contextSwitchInfo.itemIndex].itemProperty;
            _callee._properties[indexValue] = node._items[contextSwitchInfo.itemIndex].indexProperty;
            var dummyObject = { "initialItemValue": initialItemValue, "initialIndexValue": initialIndexValue, "initialItemProp": initialItemProp, "initialIndexProp": initialIndexProp, "initialPropDetails": initialPropDetails };
            contextSwitchArray.push(dummyObject);
        } else {
            //handling for yield
            var _dummyObject = {};
            var _callee2 = node._registerYield._callee;
            var _cmpData2 = LyteComponent.getCmpData(_callee2.component.data);
            Object.keys(contextSwitchInfo.node._properties).forEach(function (key) {
                _dummyObject[key] = {};
                _dummyObject[key].value = _cmpData2[key];
                _dummyObject[key].property = _callee2._properties[key];
                _callee2._properties[key] = contextSwitchInfo.node._properties[key];
                var ctxtData = LyteComponent.getCmpData(contextSwitchInfo.node.component.data);
                _cmpData2[key] = ctxtData[key];
            });
            contextSwitchArray.push(_dummyObject);
        }
    }), _defineProperty(_LyteComponent2, "removeContext", function removeContext(node, contextSwitchArray, contextSwitchInfo, proceedFurther, oneLevel) {
        if (!contextSwitchInfo) {
            return;
        }
        var isYield = node.tagName === "LYTE-YIELD";
        if (!oneLevel) {
            if (node._cx && (!isYield || node._cx.node.tagName !== "LYTE-YIELD")) {
                _LC.removeContext(node._cx.node, contextSwitchArray, node._cx, node.tagName === "LYTE-YIELD" || proceedFurther);
            } else if ((node.tagName === "LYTE-YIELD" || proceedFurther) && node._callee && node._callee._cx) {
                _LC.removeContext(node._callee._cx.node, contextSwitchArray, node._callee._cx);
            }
        }
        if (isYield) {
            var insertYield = node._registerYield;
            var callee = insertYield._callee;
            if (callee && callee._cx) {
                _LC.removeContext(callee._cx.node, contextSwitchArray, callee._cx);
            }
        }
        var indexValue = void 0,
            itemValue = void 0;
        if (contextSwitchInfo.type) {
            if (contextSwitchInfo.type === "for") {
                indexValue = node.getAttribute("index");
                itemValue = node.getAttribute("item");
                if (node._items.length === 0) {
                    return;
                }
            } else {
                indexValue = node.getAttribute("key");
                itemValue = node.getAttribute("value");
                if (Object.keys(node._items).length === 0) {
                    return;
                }
            }
            var _callee3 = node._callee;
            var items = node._attributes.items;
            var removedObject = void 0;
            var cmpData = LyteComponent.getCmpData(_callee3.component.data);
            if (contextSwitchInfo.__prop) {
                removedObject = contextSwitchArray.pop();
            } else {
                removedObject = contextSwitchArray.shift();
            }
            cmpData[itemValue] = removedObject.initialItemValue;
            var initialPropDetails = removedObject.initialPropDetails;
            if (initialPropDetails) {
                for (var propName in initialPropDetails) {
                    var propDetails = initialPropDetails[propName];
                    cmpData[propName] = propDetails.data;
                    _callee3._properties[propName] = propDetails.prop;
                }
            }
            cmpData[itemValue] = removedObject.initialItemValue;
            cmpData[indexValue] = removedObject.initialIndexValue;
            _callee3._properties[itemValue] = removedObject.initialItemProp;
            _callee3._properties[indexValue] = removedObject.initialIndexProp;
        } else {
            var _callee4 = node._registerYield._callee;
            var _removedObject = contextSwitchArray.shift();
            var _cmpData3 = LyteComponent.getCmpData(_callee4.component.data);
            Object.keys(contextSwitchInfo.node._properties).forEach(function (key) {
                _cmpData3[key] = _removedObject[key].value;
                _callee4._properties[key] = _removedObject[key].property;
            });
        }
    }), _defineProperty(_LyteComponent2, "sortCommands", function sortCommands(array1, arrayB) {
        var retVal = {};
        if (array1 && array1.__target__) {
            array1 = array1.__target__;
        }
        var arrayA = array1.slice();
        retVal.origianlArray = array1;
        var commands = [];
        for (var _i67 = 0; _i67 < arrayB.length; _i67++) {
            // var targetIndex = arrayA.findIndex((element) => element === arrayB[i]);
            var arrBi = arrayB[_i67];
            if (arrayB[_i67] && arrayB[_i67].__target__) {
                arrBi = arrayB[_i67].__target__;
            }
            var targetIndex = arrayA.indexOf(arrBi);

            if (targetIndex === -1) {
                commands.push({
                    type: 'Add',
                    element: arrBi,
                    toIndex: _i67
                });
                arrayA.splice(_i67, 0, arrBi);
            } else {
                if (targetIndex !== _i67) {
                    commands.push({
                        type: 'Move',
                        element: arrBi,
                        fromIndex: targetIndex,
                        toIndex: _i67
                    });
                    arrayA.splice(targetIndex, 1);
                    arrayA.splice(_i67, 0, arrBi);
                }
            }
        }

        for (var _i68 = arrayA.length - 1; _i68 >= arrayB.length; _i68--) {
            commands.push({
                type: 'Remove',
                element: arrayA[_i68]
            });
            arrayA.splice(_i68, 1);
        }
        retVal.commands = commands;
        retVal.changedArray = arrayB;
        return retVal;
    }), _defineProperty(_LyteComponent2, "oF", function oF() {
        var object = arguments[0];
        if (object && object.__target__) {
            object = object.__target__;
        }
        var functionName = arguments[1];
        var property = arguments[2];
        var newValue = arguments[3];
        if (newValue && newValue.__target__) {
            newValue = newValue.__target__;
        }
        var fromComponent = arguments[4];
        var fromStore = arguments[5];
        if (functionName === "add" && !fromComponent && !object._propNodes) {
            _LC.set(object, property, newValue, undefined, fromStore);
            return;
        }
        var options = {};
        options.type = functionName;
        options.property = property;
        if (!/^(add|delete)$/.test(functionName)) {
            _Lyte.error("LC005", functionName);
            return;
        }
        var bindings = object._bindings;
        if (functionName === "delete") {
            _LC.set(object, property, undefined, undefined, fromStore);
        } else {
            object[property] = newValue;
        }
        if (bindings) {
            var bind = bindings.toArrayLyte();
            for (var _i69 = 0; _i69 < bind.length; _i69++) {
                var binding = bind[_i69];
                var forHelpers = binding._forHelpers;
                if (forHelpers) {
                    var helperBind = forHelpers.toArrayLyte();
                    for (var j = 0; j < helperBind.length; j++) {
                        var forHelper = helperBind[j];
                        if (forHelper.getAttribute("is") != "forIn") {
                            continue;
                        }
                        var itemValue = forHelper.getAttribute("key");
                        //Need to check
                        //                            _LC.removeSelectedBindingDeep({[itemValue] :                        forHelper._items[property].itemProperty}, {[itemValue] : object[property]});
                        var contextSwitchArray = [];
                        if (functionName === "add") {
                            _LC.adCx(forHelper, contextSwitchArray);
                        }
                        forHelper._callee.updateForInHelper(forHelper, options);
                        if (functionName === "add") {
                            _LC.rmCx(forHelper, contextSwitchArray);
                        }
                        _LCSV.affectChangesComp(forHelper);
                    }
                }
            }
        }
        if (functionName === "delete") {
            delete object[property];
        }
    }), _defineProperty(_LyteComponent2, "aF", function aF() {
        var array = arguments[0];
        if (array && array.__target__) {
            array = array.__target__;
        }
        var initialArrLength = array.length;
        var callLengthObserver = true;
        var functionName = arguments[1];
        var value = arguments[3],
            check = {};
        if (value && value.__target__) {
            value = value.__target__;
        }
        if (/^(replaceAt|removeAt|shift)$/.test(functionName) && !array.length) {
            _Lyte.warn(functionName + " operation cannot be performed on empty array");
            return;
        }
        var commands = void 0;
        if (functionName == "sort") {
            var originalArray = arguments[0];
            var sortFunction = arguments[2];
            var addedArguments = arguments[3] || [];
            var dummyArray = originalArray.slice();
            addedArguments.forEach(function (item) {
                dummyArray.push(item);
            });
            if (typeof arguments[2] == "function") {
                dummyArray.sort(sortFunction);
            } else {
                var sorting = function sorting(item1, item2) {
                    var item1 = key ? Lyte.isRecord(item1) ? item1.$.get(key) : item1[key] : item1;
                    var item2 = key ? Lyte.isRecord(item2) ? item2.$.get(key) : item2[key] : item2;
                    if (item1 > item2) {
                        return order ? 1 : -1;
                    } else if (item1 < item2) {
                        return order ? -1 : 1;
                    } else {
                        return 0;
                    }
                };

                var obj = arguments[2];
                var key = obj.sortBy;
                var order = obj.sortOrder;

                dummyArray.sort(sorting);
            }
            commands = this.sortCommands(originalArray, dummyArray).commands;
        }
        var commArgs = arguments[2],
            oldVal = void 0,
            obsObj = void 0,
            watch = [];
        if (array._scp && /^(replaceAt|splice|removeAt|remove|insertAt)$/.test(functionName)) {
            array._scp.forEach(function (_obj, id) {
                var rec,
                    attr,
                    wobj = {};
                var recObj = Lyte.nestScp[id];
                var obj = _obj.paths;
                var pathArr = Object.keys(obj),
                    aPath;
                if (pathArr.length > 1) {
                    aPath = "*";
                } else if (pathArr.length == 1) {
                    aPath = pathArr[0];
                }
                wobj.path = aPath;
                wobj.id = id;
                if (pathArr.length > 1) {
                    wobj.paths = pathArr;
                }
                wobj.attr = attr;
                wobj.data = recObj.data;
                wobj.reInit = Lyte.isRecord(recObj.data) || Array.isArray(recObj.data) && recObj.data.model && recObj.data.add;
                wobj.PropsInfo = recObj.PropsInfo || undefined;
                wobj.index = commArgs;
                if (recObj.model) {
                    var mMap = recObj.model;
                    wobj.Error = recObj.Error;
                    var mKeys = Array.from(recObj.model.keys());
                    for (var i = 0; i < mKeys.length; i++) {
                        var mName = mKeys[i];
                        var pkMap = mMap.get(mName);
                        if (pkMap) {
                            var pkArr = Array.from(pkMap.keys());
                            var pkLen = pkArr.length;
                            for (var j = 0; j < pkLen; j++) {
                                var mPk = pkArr[j];
                                var attrMap = pkMap.get(mPk);
                                var attrArr = Array.from(attrMap.keys());
                                var attrLen = attrArr.length;
                                for (k = 0; k < attrLen; k++) {
                                    var mAttr = attrArr[k];
                                    var mObj = Object.assign({}, wobj);
                                    var mRec = store.peekRecord(mName, mPk);
                                    if (mRec) {
                                        model = mRec.$.model;
                                        field = model.fieldList[mAttr];
                                        if (field && (field.properties || field.items || field.watch == true || Lyte.Transform[field.type])) {
                                            mObj.data = Lyte.deepCopyObject(mRec[mAttr]);
                                            mObj.rec = mRec;
                                            mObj.isRec = true;
                                            mObj.attr = mAttr;
                                            mObj.dtype = model.fieldList[mAttr];
                                            mObj._cmpErr = mRec.$.error;
                                            mObj.key = mAttr;
                                        }
                                        // mObj.reInit = true;
                                        watch.push(mObj);
                                    }
                                }
                            }
                        }
                    }
                } else {
                    wobj.reInit = Lyte.isRecord(recObj.data) || Array.isArray(recObj.data) && recObj.data.model && recObj.data.add;
                    watch.push(wobj);
                }
            });
            watch.forEach(function (val) {
                var id = val.id,
                    path = val.path == "" ? [] : val.path.split("."),
                    dtype = val.dtype || undefined;
                if (val.isRec) {
                    // path.shift();
                    // path = path.length == 1 && path[0] == property ? []:path;
                    check.Prop = dtype;
                    Lyte.checkNestedProp(id, path, dtype, val, array, val.index, value, check);
                }
                if (val.PropsInfo) {
                    val.PropsInfo.forEach(function (props) {
                        props.path = val.path;
                        dtype = props.dtype;
                        props.index = val.index;
                        check.Prop = dtype;
                        Lyte.checkNestedProp(id, path, dtype, props, array, val.index, value, check);
                    });
                }
            });
            if (check.value && check.value.code) {
                _Lyte.error("ERR35", check.Prop.type);
                return;
            }
        }
        switch (functionName) {
            case "replaceAt":
                {
                    var index = parseInt(arguments[2]);
                    if (index > array.length) {
                        _Lyte.warn("index provided for replaceAt is greater than array length");
                        return [];
                    }
                    //let args = Array.prototype.slice.call(arguments, 3);
                    var args = arguments[3];
                    if (!Array.isArray(args)) {
                        args = [args];
                    }
                    var deletedItems = array.splice.apply(array, [index, 1].concat(args));
                    var options = { "firstIndex": index, "secondIndex": args.length, "type": "replace" };
                    //All references updated by now
                    if (options.secondIndex == 1) {
                        callLengthObserver = false;
                    }
                    //remove binding from previous object
                    if (array._bindings) {
                        var objbind = array._bindings.toArrayLyte();
                        for (var _i70 = 0; _i70 < objbind.length; _i70++) {
                            var _item9 = objbind[_i70];
                            if (_item9._forHelpers) {
                                var helperbind = _item9._forHelpers.toArrayLyte();
                                for (var _j4 = 0; _j4 < helperbind.length; _j4++) {
                                    var helper = helperbind[_j4];
                                    if (helper.getAttribute("is") != "for") {
                                        continue;
                                    }
                                    /*if(helper.hasAttribute("unbound")) {
                                    continue;
                                    }*/
                                    var finalIndex = index + deletedItems.length;
                                    var itemValue = helper.getAttribute("item");
                                    for (var _i71 = index, _j5 = 0; _i71 < finalIndex; _i71++, _j5++) {
                                        _LC.removeSelectedBindingDeep(_defineProperty({}, itemValue, helper._items[_i71].itemProperty), _defineProperty({}, itemValue, deletedItems[_j5]));
                                    }
                                    var contextSwitchArray = [];
                                    _LC.adCx(helper, contextSwitchArray);
                                    helper._callee.updateForHelper(helper, options);
                                    _LC.rmCx(helper, contextSwitchArray);
                                    _LCSV.affectChangesComp(helper);
                                }
                            }
                            for (var _key33 in _item9) {
                                var parsedKey = parseInt(_key33);
                                var _cond = options.secondIndex == 1 ? parsedKey == options.firstIndex : parsedKey >= options.firstIndex;
                                if (!isNaN(parsedKey) && _cond) {
                                    var diff = parsedKey - options.firstIndex;
                                    var _oldObject = void 0;
                                    if (diff < 1) {
                                        _oldObject = deletedItems[diff];
                                    } else {
                                        _oldObject = array[options.firstIndex - 1 + options.secondIndex + diff];
                                    }
                                    this.removeSelectedBindingDeep(_item9[_key33], _oldObject);
                                    if (_item9[_key33]._forHelpers) {
                                        var bindfor = _item9[_key33]._forHelpers.toArrayLyte();
                                        for (var j = 0; j < bindfor.length; j++) {
                                            var item1 = bindfor[j];
                                            if (item1._propBindingObject) {
                                                this.removeSelectedBindingDeep(item1._propBindingObject, _oldObject);
                                                //                                          value._bindings.add(item._propBindingObject);
                                                //                                          this.establishBindings(item._propBindingObject, value);
                                            }
                                        }
                                    }
                                    if (array[parsedKey] && _typeof(array[parsedKey]) === "object") {
                                        makeSet(array[parsedKey], "_bindings");
                                        this.establishBindings({ "dummy": _item9[_key33] }, { "dummy": array[parsedKey] });
                                    }
                                    this.affectChanges(_item9[_key33], undefined, _oldObject, undefined, array[parsedKey]);
                                    if (options.secondIndex == 1) {
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    obsObj = { type: "array", insertedItems: args, removedItems: deletedItems, index: index };
                    _LC.bindWatchObj(watch, array, args, deletedItems, index);
                    _LC.callArrayObservers(array, obsObj, callLengthObserver, initialArrLength);
                    return deletedItems[0];
                }
                break;
            case "splice":
                {
                    var _index3 = parseInt(arguments[2]);
                    if (_index3 > array.length) {
                        _Lyte.warn("index provided is greater than array length");
                        return [];
                    }
                    var toBeDeleted = arguments.length > 3 ? arguments[3] : array.length - _index3;
                    var _args2 = arguments.length > 4 ? arguments[4] : [];
                    if (!Array.isArray(_args2)) {
                        _args2 = [_args2];
                    }
                    var _deletedItems = array.splice.apply(array, [_index3, toBeDeleted].concat(_args2));
                    var _options = { "firstIndex": _index3, "secondIndex": _args2.length, "thirdIndex": toBeDeleted, "type": "splice" };
                    //All references updated by now
                    if (_options.secondIndex == _options.thirdIndex) {
                        callLengthObserver = false;
                    }
                    //remove binding from previous object
                    if (array._bindings) {
                        var _objbind3 = array._bindings.toArrayLyte();
                        for (var _i72 = 0; _i72 < _objbind3.length; _i72++) {
                            var _item10 = _objbind3[_i72];
                            if (_item10._forHelpers) {
                                var _helperbind = _item10._forHelpers.toArrayLyte();
                                for (var _j6 = 0; _j6 < _helperbind.length; _j6++) {
                                    var _helper = _helperbind[_j6];
                                    /*if(helper.hasAttribute("unbound")) {
                                    continue;
                                    }*/
                                    if (_helper.getAttribute("is") != "for") {
                                        continue;
                                    }
                                    var _finalIndex = _index3 + _deletedItems.length;
                                    var _itemValue = _helper.getAttribute("item");
                                    for (var _i73 = _index3, _j7 = 0; _i73 < _finalIndex; _i73++, _j7++) {
                                        _LC.removeSelectedBindingDeep(_defineProperty({}, _itemValue, _helper._items[_i73].itemProperty), _defineProperty({}, _itemValue, _deletedItems[_j7]));
                                    }
                                    var _contextSwitchArray = [];
                                    _LC.adCx(_helper, _contextSwitchArray);
                                    _helper._callee.updateForHelper(_helper, _options);
                                    _LC.rmCx(_helper, _contextSwitchArray);
                                    _LCSV.affectChangesComp(_helper);
                                }
                            }
                            for (var _key34 in _item10) {
                                var _parsedKey = parseInt(_key34);
                                var cond = _options.secondIndex == _options.thirdIndex ? _key34 >= _options.firstIndex && _key34 < _options.firstIndex + _options.secondIndex : _parsedKey >= _options.firstIndex;
                                if (!isNaN(_parsedKey) && cond) {
                                    var _diff = _parsedKey - _options.firstIndex;
                                    var _oldObject2 = void 0;
                                    if (_diff < _options.thirdIndex) {
                                        _oldObject2 = _deletedItems[_diff];
                                    } else {
                                        _oldObject2 = array[_options.firstIndex - _options.thirdIndex + _options.secondIndex + _diff];
                                    }
                                    this.removeSelectedBindingDeep(_item10[_key34], _oldObject2);
                                    if (_item10[_key34]._forHelpers) {
                                        var _bindfor = _item10[_key34]._forHelpers.toArrayLyte();
                                        for (var j = 0; j < _bindfor.length; j++) {
                                            var _item11 = _bindfor[j];
                                            if (_item11._propBindingObject) {
                                                this.removeSelectedBindingDeep(_item11._propBindingObject, _oldObject2);
                                                //                                          value._bindings.add(item._propBindingObject);
                                                //                                          this.establishBindings(item._propBindingObject, value);
                                            }
                                        }
                                    }
                                    if (array[_parsedKey] && _typeof(array[_parsedKey]) === "object") {
                                        makeSet(array[_parsedKey], "_bindings");
                                        this.establishBindings({ "dummy": _item10[_key34] }, { "dummy": array[_parsedKey] });
                                    }
                                    this.affectChanges(_item10[_key34], undefined, _oldObject2, undefined, array[_parsedKey]);
                                }
                            }
                        }
                    }
                    obsObj = { type: 'array', index: _index3, insertedItems: _args2, removedItems: _deletedItems };
                    _LC.bindWatchObj(watch, array, _args2, _deletedItems, _index3);
                    _LC.callArrayObservers(array, obsObj, callLengthObserver, initialArrLength);
                    return _deletedItems;
                }
                break;
            case "push":
                {
                    var toPush = arguments[2];
                    if (!Array.isArray(toPush)) {
                        toPush = [toPush];
                    }
                    _LC.aF(array, 'insertAt', array.length, toPush);
                }
                break;
            case "pop":
                return _LC.aF(array, 'remove', array.length - 1)[0];
                break;
            case "shift":
            case "shiftObject":
                return _LC.aF(array, 'remove', 0)[0];
                break;
            case "removeAt":
            case "remove":
                {
                    var _index4 = parseInt(arguments[2]);
                    if (_index4 > array.length) {
                        _Lyte.warn("index provided for removeAt is greater than array length");
                        return [];
                    }
                    var length = arguments[3] ? parseInt(arguments[3]) : 1;
                    var _options2 = { "firstIndex": _index4, "secondIndex": length, "type": "remove" };
                    var _deletedItems2 = array.splice(_index4, length);
                    if (array._bindings) {
                        var _objbind4 = array._bindings.toArrayLyte();
                        for (var _i74 = 0; _i74 < _objbind4.length; _i74++) {
                            var _item12 = _objbind4[_i74];
                            if (_item12._forHelpers) {
                                var _helperbind2 = _item12._forHelpers.toArrayLyte();
                                for (var _j8 = 0; _j8 < _helperbind2.length; _j8++) {
                                    var _helper2 = _helperbind2[_j8];
                                    /*if(helper.hasAttribute("unbound")) {
                                    continue;
                                    }*/
                                    if (_helper2.getAttribute("is") != "for") {
                                        continue;
                                    }
                                    var _finalIndex2 = _index4 + _deletedItems2.length;
                                    var _itemValue2 = _helper2.getAttribute("item");
                                    for (var _i75 = _index4, _j9 = 0; _i75 < _finalIndex2; _i75++, _j9++) {
                                        _LC.removeSelectedBindingDeep(_defineProperty({}, _itemValue2, _helper2._items[_i75].itemProperty), _defineProperty({}, _itemValue2, _deletedItems2[_j9]));
                                    }
                                    var _contextSwitchArray2 = [];
                                    _LC.adCx(_helper2, _contextSwitchArray2);
                                    _helper2._callee.updateForHelper(_helper2, _options2);
                                    _LC.rmCx(_helper2, _contextSwitchArray2);
                                    _LCSV.affectChangesComp(_helper2);
                                }
                            }
                            for (var _key35 in _item12) {
                                var _parsedKey2 = parseInt(_key35);
                                if (!isNaN(_parsedKey2) && _parsedKey2 >= _options2.firstIndex) {
                                    var _diff2 = _parsedKey2 - _options2.firstIndex;
                                    var _oldObject3 = void 0;
                                    if (_diff2 < _options2.secondIndex) {
                                        _oldObject3 = _deletedItems2[_diff2];
                                    } else {
                                        _oldObject3 = array[_options2.firstIndex - _options2.secondIndex + _diff2];
                                    }
                                    this.removeSelectedBindingDeep(_item12[_key35], _oldObject3);
                                    if (_item12[_key35]._forHelpers) {
                                        var _bindfor2 = _item12[_key35]._forHelpers.toArrayLyte();
                                        for (var j = 0; j < _bindfor2.length; j++) {
                                            var _item13 = _bindfor2[j];
                                            if (_item13._propBindingObject) {
                                                this.removeSelectedBindingDeep(_item13._propBindingObject, _oldObject3);
                                                //                                          value._bindings.add(item._propBindingObject);
                                                //                                          this.establishBindings(item._propBindingObject, value);
                                            }
                                        }
                                    }
                                    if (array[_parsedKey2] && _typeof(array[_parsedKey2]) === "object") {
                                        makeSet(array[_parsedKey2], "_bindings");
                                        this.establishBindings({ "dummy": _item12[_key35] }, { "dummy": array[_parsedKey2] });
                                    }
                                    this.affectChanges(_item12[_key35], undefined, _oldObject3, undefined, array[_parsedKey2]);
                                }
                            }
                        }
                    }
                    obsObj = { type: "array", removedItems: _deletedItems2, index: _index4 };
                    _LC.bindWatchObj(watch, array, undefined, _deletedItems2, _index4);
                    _LC.callArrayObservers(array, obsObj, callLengthObserver, initialArrLength);
                    return _deletedItems2;
                }
                break;
            case "removeObject":
                commArgs = [commArgs];
            case "removeObjects":
                if (!Array.isArray(commArgs)) {
                    commArgs = [commArgs];
                }
                if (commArgs == array) {
                    commArgs = Array.from(commArgs); // both array are same instance so cloning
                }
                for (var i = 0; i < commArgs.length; i++) {
                    var indVal = commArgs[i];
                    if (indVal && indVal.__target__) {
                        indVal = indVal.__target__;
                    }
                    var inde = array.indexOf(indVal);
                    if (inde !== -1) {
                        _LC.aF(array, 'removeAt', inde);
                    }
                }
                //_Lyte.arrayUtils(array, 'removeObject', actObj);
                //_Lyte.arrayUtils(array, 'removeObjects', []);
                break;
            case "unshift":
            case "unshiftObject":
            case "unshiftObjects":
                //_LC.aF.apply(_LC, [array, 'insertAt', 0].concat(Array.prototype.slice.call(arguments, 2)));
                {
                    var _toPush = arguments[2];
                    if (!Array.isArray(_toPush)) {
                        _toPush = [_toPush];
                    }
                    _LC.aF(array, 'insertAt', 0, _toPush);
                }
                break;
            case "insertAt":
                {
                    var _index5 = parseInt(arguments[2]);
                    //let args = Array.prototype.slice.call(arguments, 3);
                    var _args3 = arguments[3];
                    var len = _args3.length;
                    if (!Array.isArray(_args3)) {
                        _args3 = [_args3];
                    }
                    for (var _i76 = _index5; _i76 > array.length; _i76--) {
                        _args3.unshift(undefined);
                        _index5--;
                    }
                    var _options3 = { "firstIndex": _index5, "secondIndex": _args3.length, "type": "insert" };
                    array.splice.apply(array, [_index5, 0].concat(_args3));
                    if (array._bindings) {
                        var arrbind = array._bindings.toArrayLyte();
                        for (var _i77 = 0; _i77 < arrbind.length; _i77++) {
                            var _item14 = arrbind[_i77];
                            if (_item14._forHelpers) {
                                var forbind = _item14._forHelpers.toArrayLyte();
                                for (var _j10 = 0; _j10 < forbind.length; _j10++) {
                                    /*if(forbind[j].hasAttribute("unbound")) {
                                    	continue;
                                    }*/
                                    var _helper3 = forbind[_j10];
                                    if (_helper3.getAttribute("is") != "for") {
                                        continue;
                                    }
                                    var _contextSwitchArray3 = [];
                                    _LC.adCx(_helper3, _contextSwitchArray3);
                                    _helper3._callee.updateForHelper(_helper3, _options3);
                                    _LC.rmCx(_helper3, _contextSwitchArray3);
                                    _LCSV.affectChangesComp(_helper3);
                                }
                            }
                            for (var _key36 in _item14) {
                                var _parsedKey3 = parseInt(_key36);
                                if (!isNaN(_parsedKey3) && _parsedKey3 >= _options3.firstIndex) {
                                    this.removeSelectedBindingDeep(_item14[_key36], array[_parsedKey3 + _options3.secondIndex]);
                                    if (_item14[_key36]._forHelpers) {
                                        var _bindfor3 = _item14[_key36]._forHelpers.toArrayLyte();
                                        for (var j = 0; j < _bindfor3.length; j++) {
                                            var _item15 = _bindfor3[j];
                                            if (_item15._propBindingObject) {
                                                this.removeSelectedBindingDeep(_item15._propBindingObject, oldObject);
                                                //                                          value._bindings.add(item._propBindingObject);
                                                //                                          this.establishBindings(item._propBindingObject, value);
                                            }
                                        }
                                    }
                                    if (array[_parsedKey3] && _typeof(array[_parsedKey3]) === "object") {
                                        makeSet(array[_parsedKey3], "_bindings");
                                        this.establishBindings({ "dummy": _item14[_key36] }, { "dummy": array[_parsedKey3] });
                                    }
                                    this.affectChanges(_item14[_key36], undefined, array[_parsedKey3 + _options3.secondIndex], undefined, array[_parsedKey3]);
                                }
                            }
                        }
                    }
                    var position = parseInt(arguments[2]);
                    obsObj = { type: "array", insertedItems: !Array.isArray(arguments[3]) ? [arguments[3]] : arguments[0].slice(position, position + len), index: position };
                    _LC.bindWatchObj(watch, array, _args3, undefined, position);
                    _LC.callArrayObservers(array, obsObj, callLengthObserver, initialArrLength);
                }
                break;
            case "concat":
                //_LC.aF.apply(_LC, [array, 'insertAt',array.length].concat(arguments[2]));
                _LC.aF(array, 'insertAt', array.length, arguments[2]);
                break;
            case "sort":
                {
                    var optionsArray = [];
                    commands.forEach(function (command) {
                        switch (command.type) {
                            case "Remove":
                                {
                                    var removedItems = array.splice(command.toIndex, 1);
                                    optionsArray.push({ "firstIndex": command.toIndex, "secondIndex": 1, "type": "remove", "removedItem": removedItems[0] });
                                }
                                break;
                            case "Move":
                                {
                                    var _removedItems = array.splice(command.fromIndex, 1);
                                    array.splice(command.toIndex, 0, command.element);
                                    optionsArray.push({ "firstIndex": command.fromIndex, "secondIndex": 1, "type": "remove", "removedItem": _removedItems[0] });
                                    // optionsArray.push({"firstIndex" : command.toIndex, "secondIndex" : 1, "thirdIndex" : 0, "type" : "splice"});
                                    optionsArray.push({ "firstIndex": command.toIndex, "secondIndex": 1, "type": "insert" });
                                }
                                break;
                            case "Add":
                                {
                                    array.splice(command.toIndex, 0, command.element);
                                    // optionsArray.push({"firstIndex" : command.toIndex, "secondIndex" : 1, "thirdIndex" : 0, "type" : "splice"});
                                    optionsArray.push({ "firstIndex": command.toIndex, "secondIndex": 1, "type": "insert" });
                                }
                                break;
                        }
                    });
                    if (array._bindings) {
                        var _arrbind = array._bindings.toArrayLyte();
                        for (var _i78 = 0; _i78 < _arrbind.length; _i78++) {
                            var _item16 = _arrbind[_i78];
                            if (_item16._forHelpers) {
                                var _forbind2 = _item16._forHelpers.toArrayLyte();
                                for (var _j11 = 0; _j11 < _forbind2.length; _j11++) {
                                    /*if(forbind[j].hasAttribute("unbound")) {
                                    	continue;
                                    }*/
                                    var _helper4 = _forbind2[_j11];
                                    if (_helper4.getAttribute("is") != "for") {
                                        continue;
                                    }
                                    var _contextSwitchArray4 = [];
                                    _LC.adCx(_helper4, _contextSwitchArray4);
                                    for (var _j12 = 0; _j12 < optionsArray.length; _j12++) {
                                        var optionItem = optionsArray[_j12];
                                        // Removal of bindings
                                        var _itemValue3 = _helper4.getAttribute("item");
                                        if (optionItem.type == "remove") {
                                            this.removeSelectedBindingDeep(_defineProperty({}, _itemValue3, _helper4._items[optionItem.firstIndex].itemProperty), _defineProperty({}, _itemValue3, optionItem.removedItem));
                                        }
                                        _helper4._callee.updateForHelper(_helper4, optionItem);
                                    }
                                    _LC.rmCx(_helper4, _contextSwitchArray4);
                                    _LCSV.affectChangesComp(_helper4);
                                }
                            }
                            //                         for(let key in item) {
                            //                             let parsedKey = parseInt(key);
                            //                             if(!isNaN(parsedKey) && parsedKey >= options.firstIndex) {
                            //                                 this.removeSelectedBindingDeep(item[key], array[parsedKey+options.secondIndex]);
                            //                                 if(item[key]._forHelpers) {
                            //                                     let bindfor = item[key]._forHelpers.toArrayLyte();
                            //                                     for(var j=0;j<bindfor.length;j++){
                            //                                         let item1 = bindfor[j];
                            //                                         if(item1._propBindingObject) {
                            //                                             this.removeSelectedBindingDeep(item1._propBindingObject, oldObject);
                            // //                                          value._bindings.add(item._propBindingObject);
                            // //                                          this.establishBindings(item._propBindingObject, value);
                            //                                         }
                            //                                     }
                            //                                 }
                            //                                 if(array[parsedKey] && typeof array[parsedKey] === "object") {
                            //                                 	makeSet(array[parsedKey], "_bindings");
                            //                                 this.establishBindings({"dummy" : item[key]},{"dummy" : array[parsedKey]});    
                            //                                 }
                            //                                 this.affectChanges(item[key],undefined,array[parsedKey + options.secondIndex],undefined,array[parsedKey]);
                            //                             }
                            //                         }
                        }
                    }
                    if (Array.isArray(arguments[3]) && arguments[3].length) {
                        obsObj = { type: "array", insertedItems: arguments[3] };
                        var indices = [];
                        arguments[3].forEach(function (item) {
                            indices.push(array.indexOf(item));
                        });
                        obsObj.indices = indices;
                        _LC.callArrayObservers(array, obsObj, callLengthObserver, initialArrLength);
                    }
                }
                break;
            default:
                _Lyte.error("LC006", functionName);
                return;
        }
    }), _defineProperty(_LyteComponent2, "callDeepObservers", function callDeepObservers(data, args, property, callLengthObserver) {
        var self = this;
        var keys = Array.from(data._scp.keys());
        keys.forEach(function (id) {
            var _scp = data._scp.get(id),
                scp = _scp.paths,
                pathArr = Object.keys(scp),
                aPath;
            if (pathArr.length == 1) {
                aPath = pathArr[0];
            } else if (pathArr.length > 1) {
                aPath = pathArr;
            }
            var recObj = Lyte.nestScp[id],
                attr,
                rec,
                isRec = false;
            if (recObj.model) {
                var mMap = recObj.model;
                var mKeys = Array.from(recObj.model.keys());
                for (var i = 0; i < mKeys.length; i++) {
                    var mName = mKeys[i];
                    var pkMap = mMap.get(mName);
                    if (pkMap) {
                        var pkArr = Array.from(pkMap.keys());
                        var pkLen = pkArr.length;
                        for (var j = 0; j < pkLen; j++) {
                            var mPk = pkArr[j];
                            var attrMap = pkMap.get(mPk);
                            var attrArr = Array.from(attrMap.keys());
                            var attrLen = attrArr.length;
                            for (k = 0; k < attrLen; k++) {
                                var mAttr = attrArr[k];
                                var mRec = store.peekRecord(mName, mPk);
                                self.deepObsBind(mRec, true, mAttr, args, pathArr, aPath, data, property, callLengthObserver);
                            }
                        }
                    }
                }
            } else {
                rec = recObj.data;
                self.deepObsBind(rec, isRec, attr, args, pathArr, aPath, data, property, callLengthObserver);
            }
        });
    }), _defineProperty(_LyteComponent2, "deepObsBind", function deepObsBind(rec, isRec, attr, args, pathArr, aPath, data, property, callLengthObserver) {
        var type = args.type;
        var watchPath, propPath;
        if (rec._bindings) {
            var newArgs = Object.assign({}, args);
            var objbind = rec._bindings.toArrayLyte();
            for (var _i65 = 0; _i65 < objbind.length; _i65++) {
                propPath = aPath;
                var binding = objbind[_i65],
                    obj = undefined;
                watchPath = objbind[_i65]._path;
                if (isRec) {
                    if (binding.hasOwnProperty(attr) && binding[attr].hasOwnProperty("*")) {
                        obj = binding[attr]["*"];
                        watchPath = binding[attr]._path;
                    }
                } else if (binding.hasOwnProperty("*")) {
                    obj = binding["*"];
                }
                if (obj) {
                    var obsbind = obj._observers ? obj._observers.toArrayLyte() : [],
                        path;
                    if (property) {
                        if (pathArr.length > 1) {
                            var len = pathArr.length,
                                nPathArr = [];
                            for (var i = 0; i < len; i++) {
                                nPathArr.push(pathArr[i] ? pathArr[i] + "." + property : property);
                            }
                            propPath = nPathArr;
                        } else if (pathArr.length == 1) {
                            propPath = aPath ? aPath.concat("." + property) : property;
                        }
                    }
                    for (var j = 0; j < obsbind.length; j++) {
                        var observer = obsbind[j];
                        newArgs.path = propPath;
                        newArgs.type = "deepChange";
                        newArgs.data = rec;
                        var argPath = obj._path.split('.');
                        argPath.pop();
                        newArgs.item = argPath.join('.');
                        var exactPath = newArgs.index != undefined ? (propPath != "" ? propPath + "." : propPath) + newArgs.index : propPath;
                        if (observer.callee && observer.callee.component) {
                            //  observer.observer.value.call(observer.callee.component, newArgs);
                            var calldeep = true;
                            var _data = observer.callee.component.__data[newArgs.item];
                            var _watch = _data ? _data.watch : undefined;
                            if (_data && typeof _watch != "boolean") {
                                var watchArr = obsbind[j].observer.Jpath[watchPath];
                                calldeep = Lyte.checkWatchPath(exactPath, watchArr);
                            }
                            if (calldeep) {
                                observer.observer.value.call(observer.callee.component, newArgs);
                            }
                        } else {
                            var scope = data._setterScope ? data._setterScope : window;
                            if (Array.isArray(scope)) {
                                var sLen = scope.length;
                                for (var k = 0; k < sLen; k++) {
                                    var itm = scope[k];
                                    var calldeep = true;
                                    if (newArgs.data && newArgs.hasOwnProperty("item")) {
                                        var watchArr = newArgs.data.$.model._fldGrps.watch[newArgs.item].watch;
                                        if (Array.isArray(watchArr)) {
                                            watchArr = obsbind[j].observer.Jpath[watchPath];
                                            calldeep = Lyte.checkWatchPath(exactPath, watchArr);
                                        }
                                    }
                                    if (calldeep) {
                                        observer.observer.value.call(itm, newArgs);
                                    }
                                }
                            } else {
                                var calldeep = true;
                                if (newArgs.data && newArgs.hasOwnProperty("item")) {
                                    var watchArr = newArgs.data.$.model._fldGrps.watch[newArgs.item].watch;
                                    if (Array.isArray(watchArr)) {
                                        watchArr = obsbind[j].observer.Jpath[watchPath];
                                        calldeep = Lyte.checkWatchPath(exactPath, watchArr);
                                    }
                                }
                                if (calldeep) {
                                    observer.observer.value.call(scope, newArgs);
                                }
                            }
                        }
                    }
                }
                if (!callLengthObserver && type == "array" && binding.length) {
                    this.affectChanges(binding.length, undefined, initialArrLength, undefined, array.length, callLengthObserver);
                }
            }
        }
    }), _defineProperty(_LyteComponent2, "callArrayObservers", function callArrayObservers(array, args, callLengthObserver, initialArrLength) {
        if (array._scp && array._scp.size) {
            this.callDeepObservers(array, Object.assign({}, args), undefined, true);
        }
        if (array._bindings) {
            var objbind = array._bindings.toArrayLyte();
            for (var _i79 = 0; _i79 < objbind.length; _i79++) {
                var binding = objbind[_i79];
                var path = objbind[_i79]._path;
                if (binding._observers) {
                    var obsbind = binding._observers.toArrayLyte();
                    for (var j = 0; j < obsbind.length; j++) {
                        var observer = obsbind[j];
                        if (observer.isArrayObserver) {
                            if (args) {
                                args.item = path;
                            }
                            if (observer.callee && observer.callee.component) {
                                observer.observer.value.call(observer.callee.component, args);
                            } else {
                                var scope = array._setterScope ? array._setterScope : window;
                                if (Array.isArray(scope)) {
                                    var sLen = scope.length;
                                    for (var k = 0; k < sLen; k++) {
                                        var itm = scope[k];
                                        observer.observer.value.call(itm, args);
                                    }
                                } else {
                                    observer.observer.value.call(scope, args);
                                }
                            }
                        }
                    }
                }
                if (binding.length) {
                    this.affectChanges(binding.length, undefined, initialArrLength, undefined, array.length, callLengthObserver);
                }
            }
        }
    }), _defineProperty(_LyteComponent2, "bindWatchObj", function bindWatchObj(watch, data, insItems, remItems, pos) {
        if (watch && watch.length) {
            watch.forEach(function (wObj) {
                if (wObj.isRec) {
                    store.$.deepValueChange(wObj.rec, wObj.attr, data, wObj);
                }
                if (remItems) {
                    remItems.forEach(function (itm) {
                        Lyte.removeNestScp(itm, wObj.id, undefined, undefined, undefined, undefined, wObj.reInit ? wObj.data : undefined);
                    });
                }
                if (insItems) {
                    insItems.forEach(function (itm, idx) {
                        if (itm && (Array.isArray(itm) || (typeof itm === 'undefined' ? 'undefined' : _typeof(itm)) == "object")) {
                            var pth = wObj.path.split(',');
                            pth.push(pos + idx);
                            Lyte.bindObj(itm, undefined, wObj.id, pth && pth.length ? pth : [], undefined, undefined, undefined, true);
                        }
                    });
                }
                if (pos !== undefined) {
                    var nestObj = Lyte.nestScp[wObj.id];
                    if (nestObj && nestObj.cyclic) {
                        Lyte.removeNestScp(nestObj._data, wObj.id);
                        Lyte.bindObj(nestObj._data, undefined, wObj.id, [], undefined, undefined, undefined, true);
                    } else {
                        var insLen = insItems ? insItems.length : 0,
                            newInd = pos + insLen;
                        var arr = data.slice(newInd);
                        arr.forEach(function (itm) {
                            Lyte.removeNestScp(itm, wObj.id);
                        });
                        arr.forEach(function (itm, idx) {
                            if (itm && (Array.isArray(itm) || (typeof itm === 'undefined' ? 'undefined' : _typeof(itm)) == "object")) {
                                var pth = wObj.path.split(',');
                                pth.push(newInd + idx);
                                Lyte.bindObj(itm, undefined, wObj.id, pth && pth.length ? pth : [], undefined, undefined, undefined, true);
                            }
                        });
                    }
                }
            });
        }
    }), _defineProperty(_LyteComponent2, "establishUpdateBindings", function establishUpdateBindings(bindings, property, actualData) {
        var objbind = bindings.toArrayLyte();
        for (var _i80 = 0; _i80 < objbind.length; _i80++) {
            var _item17 = objbind[_i80];
            if (_item17[property]) {
                // makeSet(actualData, "_bindings");
                addBindings(actualData, _item17[property]);
                this.establishBindings(_item17[property], actualData);
            }
        }
    }), _defineProperty(_LyteComponent2, "establishSelectedBinding", function establishSelectedBinding(property, actualData, node) {
        if (!property) {
            return;
        }
        var propName = property._path;
        var props = propName.split('.');
        var currentProp = node.getProperty(props[0]);
        var currentValue = actualData[props[0]];
        for (var _i81 = 0; _i81 < props.length; _i81++) {
            if (!currentValue || (typeof currentValue === 'undefined' ? 'undefined' : _typeof(currentValue)) !== "object") {
                break;
            }
            // makeSet(currentValue, "_bindings");
            addBindings(currentValue, currentProp);
            currentProp = currentProp[props[_i81 + 1]];
            currentValue = currentValue[props[_i81 + 1]];
        }
    }), _defineProperty(_LyteComponent2, "establishBindings", function establishBindings(properties, actualData) {
        if (properties._helperNodes) {
            var path = properties._path;
            var _arr3 = properties._helperNodes.toArrayLyte();
            for (var _s3 = 0; _s3 < _arr3.length; _s3++) {
                var nodes = _arr3[_s3]._dynamicProperty ? _arr3[_s3]._dynamicProperty[path] : undefined;
                if (nodes) {
                    for (var j = 0; j < nodes.length; j++) {
                        var node = nodes[j];
                        var helper = node.ownerElement;
                        if (helper && helper.tagName === "TEMPLATE" && helper.getAttribute("is") === "for") {
                            if (helper._items) {
                                var _item18 = helper.getAttribute("item");
                                for (var _i82 = 0; _i82 < helper._items.length; _i82++) {
                                    var data = actualData[_i82];
                                    var _item19 = helper.getAttribute("item");
                                    if (data) {
                                        if (_typeof(helper._items[_i82]) === "object") {
                                            this.establishBindings(helper._items[_i82].itemProperty, _defineProperty({}, _item19, data));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        for (var _i83 in properties) {
            var actData = actualData[_i83];
            if (!actData || typeof actData === "string" || typeof actData === "number" || typeof actData === "boolean") {
                // if(!actualData._bindings) {
                // 	makeSet(actualData, "_bindings");
                // }
                addBindings(actualData, properties);
            } else {
                // if(!actData._bindings) {
                // 	makeSet(actData, "_bindings");
                // }
                addBindings(actData, properties[_i83]);
                if (_typeof(properties[_i83]) === "object") {
                    this.establishBindings(properties[_i83], actData);
                }
            }
        }
    }), _defineProperty(_LyteComponent2, "removeSelectedBindingDeep", function removeSelectedBindingDeep(binding, actualData, fromDisConnect) {
        var del = "delete";
        if (!actualData && !fromDisConnect) {
            return;
        }
        if (actualData && actualData._bindings) {
            deleteBindingCheckSize(actualData, "_bindings", binding);
        }
        for (var _i84 in binding) {
            var actData = void 0;
            if (actualData) {
                actData = actualData[_i84];
            }
            if (actData && actData._bindings) {
                deleteBindingCheckSize(actData, "_bindings", binding[_i84]);
            }
            if (_typeof(binding[_i84]) === "object") {
                this.removeSelectedBindingDeep(binding[_i84], actData, fromDisConnect);
            }
        }
        if (fromDisConnect) {
            var dynNodes = binding._dynamicNodes;
            var helperNodes = binding._helperNodes;
            if (dynNodes && dynNodes.length) {
                binding._dynamicNodes.splice(0, dynNodes.length);
            }
            if (helperNodes && helperNodes.size) {
                helperNodes.clear();
            }
        }
        if (binding && binding._forHelpers) {
            var objbind = binding._forHelpers.toArrayLyte();
            for (var _i85 = 0; _i85 < objbind.length; _i85++) {
                var fH = objbind[_i85];
                if (fH.getAttribute("is") === "for") {
                    var _item20 = fH.getAttribute("item");
                    var items = fH._attributes.items;
                    var itemCases = fH._items;
                    for (var _i86 = 0; _i86 < itemCases.length; _i86++) {
                        this.removeSelectedBindingDeep(itemCases[_i86].itemProperty, items[_i86], fromDisConnect);
                    }
                } else {
                    if (fH._propBindingObject) {
                        if (actualData && actualData._bindings) {
                            deleteBindingCheckSize(actualData, "_bindings", fH._propBindingObject);
                            this.removeSelectedBindingDeep(fH._propBindingObject, actualData, fromDisConnect);
                        }
                    }
                }
            }
        }
    }), _defineProperty(_LyteComponent2, "removeAllBindings", function removeAllBindings(properties, data) {
        var del = "delete";
        for (var _key37 in properties) {
            if (data[_key37] && data[_key37]._bindings) {
                //                    data[key]._bindings[del](properties[key]);
                //                    if(!data[key]._bindings.size) {
                //                        delete data[key]._bindings;
                //                    }
                deleteBindingCheckSize(data[_key37], "_bindings", properties[_key37]);
            }
            if (data[_key37] && typeof data[_key37] !== "string") {
                _LC.removeAllBindings(properties[_key37], data[_key37]);
            }
        }
    }), _defineProperty(_LyteComponent2, "affectChanges", function affectChanges(item, contextAlreadySwitched, oldValue, setterScope, newValue, callLengthObserver, options) {
        if (item._dynamicNodes) {
            for (var _i87 = 0; _i87 < item._dynamicNodes.length; _i87++) {
                item._dynamicNodes[_i87]._callee.updateNode(item._dynamicNodes[_i87], item._path, options);
            }
        }
        var propPath = item._path;
        if (item._helperNodes) {
            var nodes = [],
                itemHelperNodes = item._helperNodes.toArrayLyte();
            for (var _s4 = 0; _s4 < itemHelperNodes.length; _s4++) {
                if (!item._helperNodes.has(itemHelperNodes[_s4])) {
                    continue;
                }
                if (itemHelperNodes[_s4].getAttribute("is") === "for" && itemHelperNodes[_s4]._items) {
                    var innerContextSwitchArray = [];
                    _LC.adCx(itemHelperNodes[_s4], innerContextSwitchArray);
                    var indexValue = itemHelperNodes[_s4].getAttribute("index");
                    var itemValue = itemHelperNodes[_s4].getAttribute("item");
                    var callee = itemHelperNodes[_s4]._callee;
                    var cmpData = LyteComponent.getCmpData(callee.component.data);
                    var initialItemValue = cmpData[itemValue];
                    var initialIndexValue = cmpData[indexValue];
                    var initialItemProp = callee._properties[itemValue];
                    var initialIndexProp = callee._properties[indexValue];
                    var items = itemHelperNodes[_s4]._attributes.items;
                    var dirObjData = { data: {}, prop: {} };
                    var dirObjProp = { data: {}, prop: {} };
                    _LCSV.beforeDirObj(itemHelperNodes[_s4], dirObjData, dirObjProp);
                    for (var _i88 = 0; _i88 < itemHelperNodes[_s4]._items.length; _i88++) {
                        cmpData[itemValue] = items[_i88];
                        cmpData[indexValue] = _i88;
                        callee._properties[itemValue] = itemHelperNodes[_s4]._items[_i88].itemProperty;
                        if (itemHelperNodes[_s4]._items[_i88]._dynamicProperty[propPath]) {
                            nodes = itemHelperNodes[_s4]._items[_i88]._dynamicProperty[propPath];
                            for (var _i89 = 0; _i89 < nodes.length; _i89++) {
                                nodes[_i89]._callee.updateNode(nodes[_i89], propPath, options);
                            }
                        }
                    }
                    cmpData[itemValue] = initialItemValue;
                    cmpData[indexValue] = initialIndexValue;
                    callee._properties[itemValue] = initialItemProp;
                    callee._properties[indexValue] = initialIndexProp;
                    _LCSV.afterDirObj(itemHelperNodes[_s4], dirObjData, dirObjProp);
                    _LC.rmCx(itemHelperNodes[_s4], innerContextSwitchArray);
                } else if (itemHelperNodes[_s4].getAttribute("is") === "forIn" && itemHelperNodes[_s4]._items) {
                    var _innerContextSwitchArray = [];
                    _LC.adCx(itemHelperNodes[_s4], _innerContextSwitchArray);
                    var _indexValue = itemHelperNodes[_s4].getAttribute("key");
                    var _itemValue4 = itemHelperNodes[_s4].getAttribute("value");
                    var _callee5 = itemHelperNodes[_s4]._callee;
                    var _cmpData4 = LyteComponent.getCmpData(_callee5.component.data);
                    var _initialItemValue = _cmpData4[_itemValue4];
                    var _initialIndexValue = _cmpData4[_indexValue];
                    var _initialItemProp = _callee5._properties[_itemValue4];
                    var _initialIndexProp = _callee5._properties[_indexValue];
                    var object = itemHelperNodes[_s4]._attributes.object;
                    for (var _key38 in itemHelperNodes[_s4]._items) {
                        _cmpData4[_itemValue4] = object[_key38];
                        _cmpData4[_indexValue] = _key38;
                        _callee5._properties[_itemValue4] = itemHelperNodes[_s4]._items[_key38].itemProperty;
                        if (itemHelperNodes[_s4]._items[_key38]._dynamicProperty[propPath]) {
                            nodes = itemHelperNodes[_s4]._items[_key38]._dynamicProperty[propPath];
                            for (var _i90 = 0; _i90 < nodes.length; _i90++) {
                                nodes[_i90]._callee.updateNode(nodes[_i90], propPath, options);
                            }
                        }
                    }
                    _cmpData4[_itemValue4] = _initialItemValue;
                    _cmpData4[_indexValue] = _initialIndexValue;
                    _callee5._properties[_itemValue4] = _initialItemProp;
                    _callee5._properties[_indexValue] = _initialIndexProp;
                    _LC.rmCx(itemHelperNodes[_s4], _innerContextSwitchArray);
                } else {
                    nodes = itemHelperNodes[_s4]._dynamicProperty[item._path] || [];
                    var contextSwitchArray = [];
                    if (nodes.length) {
                        _LC.adCx(itemHelperNodes[_s4], contextSwitchArray);
                        for (var _i91 = 0; _i91 < nodes.length; _i91++) {
                            nodes[_i91]._callee.updateNode(nodes[_i91], item._path, options);
                        }
                        _LC.rmCx(itemHelperNodes[_s4], contextSwitchArray);
                    }
                }
                _LCSV.affectChangesComp(itemHelperNodes[_s4]);
            }
        }
        if (item._observers) {
            var objbind = item._observers.toArrayLyte();
            var cond = callLengthObserver == false ? false : oldValue != undefined || newValue != undefined;
            if (cond) {
                for (var _i92 = 0; _i92 < objbind.length; _i92++) {
                    var observer = objbind[_i92];
                    var obsObj = { type: "change", oldValue: oldValue, newValue: newValue, item: item._path };
                    if (observer.callee && observer.callee.component) {
                        observer.observer.value.call(observer.callee.component, obsObj);
                    } else {
                        var scope = setterScope ? setterScope : window;
                        if (Array.isArray(scope)) {
                            var sLen = scope.length;
                            for (var k = 0; k < sLen; k++) {
                                var itm = scope[k];
                                observer.observer.value.call(itm, obsObj);
                            }
                        } else {
                            observer.observer.value.call(scope, obsObj);
                        }
                    }
                }
            }
        }
        if (Array.isArray(item)) {
            for (var i = 0; i < item.length; i++) {
                for (var _key39 in item[i]) {
                    this.affectChanges(item[i][_key39], true, oldValue ? oldValue[i] ? oldValue[i][_key39] : oldValue[i] : oldValue, setterScope, newValue ? newValue[i] ? newValue[i][_key39] : newValue[i] : newValue);
                }
            }
        } else {
            for (var _key40 in item) {
                var oldV = oldValue ? oldValue[_key40] : oldValue,
                    newV = newValue ? newValue[_key40] : newValue;
                if (_key40 == "*" && item[_key40].hasOwnProperty("_observers")) {
                    oldV = oldValue;
                    newV = newValue;
                }
                this.affectChanges(item[_key40], true, oldV, setterScope, newV);
            }
        }
    }), _defineProperty(_LyteComponent2, "skipArgProcessing", function skipArgProcessing(cloneActObj, ev, target) {
        if (cloneActObj.skipArgProcessing) {
            var args = cloneActObj.args = cloneActObj.actArgs;
            args.shift();
            var eventIndex = args.indexOf("__lyteEvent__");
            var nodeIndex = args.indexOf("__lyteNode__");
            if (eventIndex !== -1) {
                args[eventIndex] = ev;
            }
            if (nodeIndex !== -1) {
                args[nodeIndex] = target;
            }
        } else {
            cloneActObj.args.shift();
        }
    }), _defineProperty(_LyteComponent2, "getDV", function getDV(value) {
        var result = [],
            ref = result,
            arr = [],
            data = "",
            strStack = [],
            arrayStack = [],
            refStack = [],
            strLast,
            str;
        for (var i = 0; i < value.length; i++) {
            if (value[i] === ".") {
                if (data.length) {
                    ref.push(data);
                }
                data = "";
                continue;
            } else if (value[i] === "[") {
                arrayStack.push(i);
                if (data.length) {
                    ref.push(data);
                }
                while (value[i + 1] === "\s") {
                    i++;
                }
                if (value[i + 1] === "\"" || value[i + 1] === "'") {
                    strStack.push(value[i + 1]);
                    strLast = value[i + 1];
                    i++;
                } else if (arr.length) {
                    ref.push([]);
                    refStack.push(ref);
                    ref = ref[ref.length - 1];
                } else {
                    arr.push([]);
                    refStack.push(ref);
                    ref = arr[arr.length - 1];
                }
                data = "";
                continue;
            } else if ((value[i] === "\"" || value[i] === "'") && value[i++] === strLast) {
                while (value[i] === "\s" && value[i] != "]") {
                    i++;
                }
                strStack.pop();
                str = true;
            }
            if (value[i] === "]") {
                arrayStack.pop();
                if (data.length) {
                    if (str === true) {
                        ref.push(data);
                    } else if (!isNaN(parseInt(data))) {
                        if (refStack.length) {
                            ref = refStack.pop();
                            if (arr.length && Array.isArray(ref[ref.length - 1]) && !ref[ref.length - 1].length) {
                                ref.pop();
                            }
                            ref.push(data);
                            if (!arrayStack.length && arr.length) {
                                arr.shift();
                            }
                        }
                    } else {
                        ref.push(data);
                    }
                }
                if (!arrayStack.length && arr.length) {
                    result.push(arr.shift());
                    ref = result;
                } else if (refStack.length && !arr.length) {
                    ref = refStack.pop();
                }
                data = "";
                str = "";
                continue;
            }
            data = data.concat(value[i]);
        }
        if (data.length) {
            result.push(data);
        }
        if (strStack.length || arrayStack.length) {
            console.log("check the syntax", strStack, arrayStack);
        }
        return result;
    }), _defineProperty(_LyteComponent2, "ccDelay", []), _defineProperty(_LyteComponent2, "callCC", function callCC() {
        this.ccDelay.forEach(function (item) {
            if (item.component) {
                item.actualConnectedCallback();
            }
        });
        this.ccDelay = [];
    }), _defineProperty(_LyteComponent2, "getDD", function getDD(context, dataArr) {
        var self = context;
        dataArr.forEach(function (item, index) {
            if (Array.isArray(item)) {
                if (context == undefined) {
                    return undefined;
                }
                var inner = _LC.getDD(self, item);
                if (inner == undefined) {
                    return undefined;
                }
                context = context[inner];
            } else {
                if (context == undefined) {
                    return undefined;
                }
                context = context[item];
            }
        });
        return context;
    }), _defineProperty(_LyteComponent2, "processStatic", function processStatic(temp) {
        var arr = temp.innerHTML.split("__**");
        var newArr = [];
        for (var i = 0; i < arr.length; i++) {
            if (arr[i].startsWith("--Lyte")) {
                newArr.push(parseInt(arr[i].substring(6)));
            } else {
                newArr.push(undefined);
            }
        }
        arr.cc = newArr;
        return arr;
    }), _defineProperty(_LyteComponent2, "findLastNodeL", function findLastNodeL(lastNode1, count, node) {
        var totalNodeIndex = 0;
        if (count != undefined) {
            totalNodeIndex = count;
        }
        var helperNode;
        switch (node.getAttribute("is")) {
            case "for":
                if (node._helpers[totalNodeIndex]) {
                    helperNode = node._helpers[totalNodeIndex][0];
                }
                if (!lastNode1) {
                    if (node._forContent[0]) {
                        lastNode1 = node._forContent[0][0];
                    }
                }
                break;
            case "forIn":
                if (node._helpers[node._keysArray[0]]) {
                    helperNode = node._helpers[node._keysArray[0]][0];
                }
                if (!lastNode1) {
                    if (node._forContent[node._keysArray[0]]) {
                        lastNode1 = node._forContent[node._keysArray[0]][0];
                    }
                }
                break;
            case "if":
            case "switch":
                helperNode = node._helpers[totalNodeIndex];
                if (!lastNode1) {
                    lastNode1 = node._caseContent[0];
                }
                break;
            case "component":
                lastNode1 = lastNode1._renderedComponent[lastNode1._currentComponent] || lastNode1;
                return lastNode1;
        }
        if (!lastNode1) {
            lastNode1 = node._placeHolder;
        }
        if (helperNode && lastNode1 == helperNode._placeHolder) {
            lastNode1 = this.findLastNodeL(undefined, undefined, helperNode);
        }
        return lastNode1;
    }), _defineProperty(_LyteComponent2, "processAction", function processAction(node) {
        Array.from(node.querySelectorAll('[lyteaction]')).forEach(function (item) {
            var locIndex = item.attributes.lyteaction.value;
            item._boundEvents = _LC.fRP[locIndex];
            delete _LC.fRP[locIndex];
            // _LC.pushFrc(locIndex);
            // item._boundEvents = JSON.parse(item.attributes.lyteaction.value);
            var _cx = item._boundEvents._cx;
            var boundEvents = item._boundEvents;
            delete boundEvents._cx;
            var componentName = boundEvents.componentName;
            delete boundEvents.componentName;
            for (var key in item._boundEvents) {
                if (key.indexOf("-") !== -1) {
                    item._actions = item._actions || {};
                    item._actions[key] = new CustomEvent(key);
                    item._actions[key].processAction = item._boundEvents[key];
                    item._boundEvents[key].actArgs.shift();
                    var nodeIndex = item._boundEvents[key].actArgs.indexOf("__lyteNode__");
                    if (nodeIndex !== -1) {
                        item._boundEvents[key].actArgs[nodeIndex] = item;
                    }
                    item._boundEvents[key].args = item._boundEvents[key].actArgs;
                    delete item._boundEvents[key];
                } else {
                    var actArgs = _Lyte.deepCopyObject(item._boundEvents[key].args);
                    var actName = actArgs.splice(0, 1)[0];
                    actName = actName.startsWith("'") ? actName.replace(/'/g, '') : actName;
                    var actString = getArgString(actName, actArgs);
                    item.setAttribute(key.startsWith("on") ? key.substr(2) : key, componentName + " => " + actString);
                    if (!item._boundEvents[key].globalEvent) {
                        item.addEventListener(key, globalEventHandler);
                    }
                }
            }
            item._boundEvents._cx = _cx;
            item.removeAttribute("lyteaction");
            //item._boundEvents = item.
        });
    }), _defineProperty(_LyteComponent2, "getCtxVal", function getCtxVal(context, val, self) {
        if (context != undefined) {
            if (window.isLyteWidget || window.__lyteEnablePromise) {
                if (context && context[val] instanceof Promise && !context[val].__lyte) {
                    _LC.listenPromise(context, val, context[val]);
                }
            }
            return context[val];
        } else {
            return undefined;
        }
    }), _defineProperty(_LyteComponent2, "listenPromise", function listenPromise(context, key, actVal) {
        actVal.then(function (resolvedData) {
            actVal.__lyteUserResolved = true;
            actVal.__lyte.status = "resolved";
            Lyte.Component.set(context, key, resolvedData);
        }, function () {
            actVal.__lyteUserRejected = true;
            actVal.__lyte.status = "rejected";
            Lyte.Component.set(context, key, context[key], { force: true, skipTypeCast: true, skipValidation: true });
        });
        defProp(actVal, "__lyte", { value: { status: "init" } });
    }), _defineProperty(_LyteComponent2, "get", function get(context, path, ac, cache, comp) {
        if (!ac) {
            ac = [];
        }
        if (cache && cache.hasOwnProperty(path)) {
            // cache.cacheData[path]
            nodeValue = cache[path]._data;
            if (cache[path]._dyn) {
                cache[path]._dyn.forEach(function (item) {
                    ac.push(item);
                });
            }
            return nodeValue;
        } else {
            try {
                var _arr4 = path.match(/([^[\]]+|\[\])/g);
                var initialContext = context;
                ac.push(_arr4[0]);
                var locArr = _arr4[0].split('.');
                for (var _k8 = 0; _k8 < locArr.length; _k8++) {
                    context = _LC.getCtxVal(context, locArr[_k8], comp);
                }
                for (var _i93 = 1; _i93 < _arr4.length; _i93++) {
                    var locVal = _arr4[_i93];
                    //this is context switching
                    if (locVal.startsWith(".")) {
                        //direct context switching
                        var _locArr = locVal.substring(1).split('.');
                        for (var _k9 = 0; _k9 < _locArr.length; _k9++) {
                            context = _LC.getCtxVal(context, _locArr[_k9], comp);
                        }
                        // ac[ac.length -1] = ac[ac.length - 1] + locVal;
                        ac[0] = ac[0] + locVal;
                    } else if (locVal.startsWith("'") || locVal.startsWith('"') || !isNaN(locVal)) {
                        if (!isNaN(locVal)) {
                            // ac[ac.length-1] = ac[0] + "." + locVal;
                            ac[0] = ac[0] + "." + locVal;
                            context = _LC.getCtxVal(context, locVal, comp);
                        } else {
                            // ac[ac.length-1] = ac[0] + "." + locVal.substring(1, locVal.length -1);
                            ac[0] = ac[0] + "." + locVal.substring(1, locVal.length - 1);
                            context = _LC.getCtxVal(context, locVal.substring(1, locVal.length - 1), comp);
                        }
                    } else {
                        var length = ac.length;
                        var val = _LC.get(initialContext, locVal, ac);
                        ac[0] = ac[0] + "." + val;
                        context = _LC.getCtxVal(context, val, comp);
                    }
                }
                if (cache) {
                    cache[path] = {};
                    cache[path]._data = context;
                    cache[path]._dyn = ac;
                }
                return context;
            } catch (e) {
                return undefined;
            }
        }
    }), _defineProperty(_LyteComponent2, "getNew", function getNew(context, path) {
        try {
            var _arr5 = path.match(/([^[\]]+|\[\])/g);
            var initialContext = context;
            var locArr = _arr5[0].split('.');
            if (_arr5.length < 2) {
                if (locArr.length < 2) {
                    return { "context": initialContext, "lastKey": locArr[0] };
                } else {
                    for (var k = 0; k < locArr.length - 1; k++) {
                        context = context[locArr[k]];
                    }
                    return { "context": context, "lastKey": locArr[k] };
                }
            }
            for (var _k10 = 0; _k10 < locArr.length; _k10++) {
                context = context[locArr[_k10]];
            }
            for (var i = 1; i < _arr5.length - 1; i++) {
                var locVal = _arr5[i];
                //this is context switching
                if (locVal.startsWith(".")) {
                    //direct context switching
                    var _locArr2 = locVal.substring(1).split('.');
                    for (var _k11 = 0; _k11 < _locArr2.length; _k11++) {
                        context = context[_locArr2[_k11]];
                    }
                } else if (locVal.startsWith("'") || locVal.startsWith('"') || !isNaN(locVal)) {
                    context = context[locVal.substring(1, locVal.length - 1)];
                } else {
                    var val = this.get(initialContext, locVal);
                    context = context[val];
                }
            }
            var lastKey = _arr5[i];
            if (lastKey.startsWith(".")) {
                //direct context switching
                var _locArr3 = lastKey.substring(1).split('.');
                var _k12 = 0;
                for (; _k12 < _locArr3.length - 1; _k12++) {
                    context = context[_locArr3[_k12]];
                }
                lastKey = _locArr3[_k12];
            } else if (lastKey.startsWith("'") || lastKey.startsWith('"') || !isNaN(lastKey)) {
                lastKey = lastKey.substring(1, lastKey.length - 1);
            } else {
                lastKey = this.get(initialContext, lastKey);
            }
            return { "context": context, "lastKey": lastKey };
        } catch (e) {
            return undefined;
        }
    }), _defineProperty(_LyteComponent2, "componentGetData", function componentGetData(key) {
        if (key && key.match(/^\$\./g)) {
            if ($L && $L.Jwalk) {
                return $L.Jwalk(this.data, key);
            } else {
                _Lyte.warn("For using JSON path synatx , include the Jwalk file from the lyte-plugins");
            }
        }
        if (key) {
            return this.get(key);
        } else {
            return this.data;
        }
    }), _defineProperty(_LyteComponent2, "componentSetData", function componentSetData(arg0, arg1, options) {
        if (typeof arg0 === "string") {
            this.set(arg0, arg1, options);
        } else if ((typeof arg0 === 'undefined' ? 'undefined' : _typeof(arg0)) === "object") {
            for (var _key41 in arg0) {
                this.set(_key41, arg0[_key41], arg1);
            }
        }
    }), _defineProperty(_LyteComponent2, "componentToggleData", function componentToggleData(dataName) {
        this.set(dataName, !this.get(dataName));
    }), _defineProperty(_LyteComponent2, "componentGetMethods", function componentGetMethods(key) {
        var node = this.$node;
        if (node) {
            if (key && node._methods) {
                return node._methods[key];
            } else {
                return node._methods;
            }
        }
    }), _defineProperty(_LyteComponent2, "componentHasAction", function componentHasAction(key) {
        var node = this.$node;
        if (node) {
            if (key && node._actions[key]) {
                return true;
            } else {
                return false;
            }
        }
    }), _defineProperty(_LyteComponent2, "componentsetActions", function componentsetActions(arg0, arg1) {
        var actions = this.$node._actions;
        if (typeof arg0 === "string") {
            actions[arg0] = arg1;
        } else if ((typeof arg0 === 'undefined' ? 'undefined' : _typeof(arg0)) === "object") {
            for (var _key42 in arg0) {
                actions[_key42] = arg0[_key42];
            }
        }
    }), _defineProperty(_LyteComponent2, "componentSetMethods", function componentSetMethods(arg0, arg1) {
        var node = this.$node;
        if (node) {
            if (typeof arg0 === "string") {
                node._methods[arg0] = arg1;
            } else if ((typeof arg0 === 'undefined' ? 'undefined' : _typeof(arg0)) === "object") {
                for (var _key43 in arg0) {
                    node._methods[_key43] = arg0[_key43];
                }
            }
        }
    }), _defineProperty(_LyteComponent2, "render", function render(componentName, data, outlet, options) {
        var component;
        _LC.fromV3Render = true;
        var actDocument = document;
        if (Lyte.isWidgetBuild) {
            actDocument = window._widgetDocument;
        } else {
            actDocument = document;
        }
        if (ltCf && _Lyte.isWidgetBuild) {
            ltCf.fromWidgetRender = true;
        }
        if (componentName) {
            if (typeof componentName == "string") {
                component = createElement(componentName);
            } else if (componentName.compName) {
                component = createElement(componentName.compName);
            } else {
                _Lyte.error("LC007");
                _LC.fromV3Render = false;
                if (ltCf && _Lyte.isWidgetBuild) {
                    ltCf.fromWidgetRender = false;
                }
                return;
            }
        } else {
            _Lyte.error("LC007");
            _LC.fromV3Render = false;
            if (ltCf && _Lyte.isWidgetBuild) {
                ltCf.fromWidgetRender = false;
            }
            return;
        }
        //ssrcode_start
        if (options && options.ssr) {
            component.serverCall = true;
            component._ssrBind = options.ssr.bind;
        }
        //ssrcode_end
        if (data) {
            component.setData(data);
        }
        if (options && options.methods) {
            component.setMethods(options.methods);
        }
        if (options && options.attributes) {
            options.attributes.forEach(function (attr) {
                if ((typeof attr === 'undefined' ? 'undefined' : _typeof(attr)) == "object") {
                    component.setAttribute(attr.name, attr.value);
                } else {
                    component.setAttribute(attr, "");
                }
            });
        }
        if (outlet) {
            var actOutlet = void 0;
            if (typeof outlet == "string") {
                actOutlet = actDocument.querySelector(outlet);
            } else {
                actOutlet = outlet;
            }
            if (actOutlet) {
                if (options && options.dataType) {
                    component.component.__data = options.dataType;
                }
                actOutlet.appendChild(component);
                component._callee = component.getCallee ? component.getCallee(actOutlet) : undefined;
            } else {
                _Lyte.error("LC008", outlet);
            }
        }
        _LC.fromV3Render = false;
        if (ltCf && _Lyte.isWidgetBuild) {
            ltCf.fromWidgetRender = false;
        }
        return component;
    }), _defineProperty(_LyteComponent2, "String", {
        "cache_c": {},
        "cache_d": {},
        /*disable async function*/
        "upperCaseFirstLetter": function upperCaseFirstLetter(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
        },
        /*disable async function*/
        "lowerCaseFirstLetter": function lowerCaseFirstLetter(string) {
            return string.charAt(0).toLowerCase() + string.slice(1);
        },
        /*disable async function*/
        "toCamelCase": function toCamelCase(string) {
            if (!this.cache_c[string]) {
                this.cache_c[string] = _stringReplacer.call(string, /(-\w)/g, function (m) {
                    return m[1].toUpperCase();
                });
            }
            return this.cache_c[string];
        },
        /*disable async function*/
        "dasherize": function dasherize(string) {
            if (!this.cache_d[string]) {
                this.cache_d[string] = _stringReplacer.call(string, /([a-z])([A-Z])/g, '$1-$2').toLowerCase();
            }
            return this.cache_d[string];
        }
    }), _defineProperty(_LyteComponent2, "appendChild", function appendChild(outlet, component) {
        _LyteComponent._setIgnoreDisconnect(true);
        outlet.appendChild(component);
        _LyteComponent._setIgnoreDisconnect(false);
    }), _defineProperty(_LyteComponent2, "replaceWith", function replaceWith() {
        var argumentsArr = Array.from(arguments);
        var oldNode = argumentsArr.shift();
        _LyteComponent._setIgnoreDisconnect(true);
        var parentNode = oldNode.parentNode;
        for (var i = 0, node; node = argumentsArr[i]; i++) {
            parentNode.insertBefore(node, oldNode);
        }
        oldNode.remove();
        _LyteComponent._setIgnoreDisconnect(false);
    }), _defineProperty(_LyteComponent2, "insertBefore", function insertBefore(referenceNode, newNode, parentNode) {
        _LyteComponent._setIgnoreDisconnect(true);
        if (!parentNode) {
            if (!referenceNode) {
                _Lyte.error("LC010");
                _LyteComponent._setIgnoreDisconnect(false);
                return;
            } else {
                parentNode = referenceNode.parentNode;
            }
        }
        _insertBefore(parentNode, newNode, referenceNode ? referenceNode : null);
        _LyteComponent._setIgnoreDisconnect(false);
    }), _defineProperty(_LyteComponent2, "insertAfter", function insertAfter() {
        var argumentsArr = Array.from(arguments);
        var referenceNode = argumentsArr.shift();
        _LyteComponent._setIgnoreDisconnect(true);
        referenceNode.after.apply(referenceNode, argumentsArr);
        _LyteComponent._setIgnoreDisconnect(false);
    }), _defineProperty(_LyteComponent2, "executeMethod", function executeMethod() {
        var node = this.$node;
        if (node) {
            var args = Array.prototype.slice.call(arguments, 1);
            var methodName = _LC.String.toCamelCase(arguments[0]);
            if (!node._methods[methodName]) {
                _Lyte.error("LC009", methodName, this.$node.tagName);
                return;
            }
            return node._methods[methodName].apply(this, args);
        }
    }), _defineProperty(_LyteComponent2, "getProperData", function getProperData(obj) {
        var dataType = obj.dataType;
        var attr = obj.attr;
        var newValue = obj.newValue;
        var tagName = obj.tagName;
        switch (dataType) {
            case "boolean":
                {
                    if (!newValue || newValue === "false") {
                        newValue = false;
                    } else {
                        newValue = true;
                    }
                }
                break;
            case "object":
                try {
                    newValue = JSON.parse(newValue);
                    if (!(newValue instanceof Object)) {
                        _Lyte.warn("data type of the value provided for attribute " + attr + " of " + tagName + " is not valid");
                    }
                } catch (e) {
                    _Lyte.warn("attribute " + attr + " is not a valid JSON string.");
                    return;
                }
                break;
            case "array":
                try {
                    newValue = JSON.parse(newValue);
                    if (!(newValue instanceof Array)) {
                        _Lyte.warn("data type of the value provided for attribute " + attr + " of " + tagName + " is not valid");
                    }
                } catch (e) {
                    _Lyte.warn("attribute " + attr + " is not a valid JSON string.");
                    return;
                }
                break;
            case "number":
                {
                    var numValue = +newValue;
                    if (newValue === numValue + "") {
                        newValue = numValue;
                    } else {
                        _Lyte.warn("data type of the value provided for attribute " + attr + " of " + tagName + " is not valid");
                        return;
                    }
                }
                break;
        }
        obj.newValue = newValue;
        return true;
    }), _defineProperty(_LyteComponent2, "cssEscape", function cssEscape(string) {
        if (string) {
            return string.replace(/['"]/g, "\\$&");
        } else {
            return string;
        }
    }), _defineProperty(_LyteComponent2, "shadow", {
        "shadowList": [],
        "toAddEvents": [],
        "attachEvents": function attachEvents(thisRef) {
            var bodyEvents = LyteComponent.globalDOMEvents;
            for (var _i = 0; _i < bodyEvents.length; _i++) {
                var evnt = bodyEvents[_i];
                window.__lyteEnableDelayAction && thisRef.addEventListener(evnt, LyteComponent.docCaptureGlobalEventHandler, true);
                thisRef.addEventListener(evnt, LyteComponent.globalEventHandler, true);
                window.__lyteEnableDelayAction && thisRef.addEventListener(evnt, LyteComponent.docBubbleGlobalEventHandler);
            }
            //lc.addedevents
            var toAddEvents = this.toAddEvents;
            var len = toAddEvents.length;
            for (var _i94 = 0; _i94 < len; _i94++) {
                thisRef.addEventListener(toAddEvents[_i94].eventName, toAddEvents[_i94].listener, toAddEvents[_i94].options);
            }
            //lbind event
            thisRef.addEventListener("change", LyteComponent.changeEventHandler);
        },
        "createLessDiv": function createLessDiv(shadow, comp) {
            var div = document.createElement("div");
            div.setAttribute("id", "lessDiv");
            shadow.appendChild(div);
            comp._lessDiv = div;
            comp._lessDiv._impNames = [];
        },
        "insertInLessDiv": function insertInLessDiv(shadowParent, lessDiv) {
            var self = this;
            if (shadowParent && shadowParent._lessDiv._impNames) {
                shadowParent._lessDiv._impNames.forEach(function (item) {
                    lessDiv._impNames.$push(item);
                    var sty = document.createElement("style");
                    sty.setAttribute("placeHolder", self.importStyle[item].src);
                    sty.setAttribute("id", item);
                    lessDiv.appendChild(sty);
                });
            }
        },
        "updateLessDiv": function updateLessDiv(lessDiv, compNames) {
            var self = this;
            lessDiv._impNames.forEach(function (id) {
                compNames.forEach(function (tagName) {
                    if (self.importStyle[id] && self.importStyle[id].status == "resolved" && self.importStyle[id].response[tagName]) {
                        var a = document.createElement("style");
                        a.setAttribute("lyte-id-imported", "shadow-style-" + tagName);
                        a.setAttribute("impSrc", id);
                        a.innerHTML = self.importStyle[id].response[tagName];
                        var ele = lessDiv.querySelector("[id=" + id + "]");
                        //   lessDiv.insertBefore(a,ele);
                        LyteComponent.insertBeforeNative(lessDiv, a, ele);
                    }
                });
            });
        },
        "getHostElement": function getHostElement(node) {
            if (node) {
                var host = node.host;
                if (host && host.tagName) {
                    return host;
                }
            }
        },
        "appendChild": function appendChild(outlet, ele, obj) {
            var componentParent = void 0;
            if (obj && obj instanceof Object && obj.referenceNode) {
                componentParent = obj.referenceNode;
            } else {
                componentParent = undefined;
            }
            var igDisconnect = false;
            if (!obj || !obj.native) {
                _LyteComponent._setIgnoreDisconnect(true);
                igDisconnect = true;
            }
            var shadowParent = componentParent ? componentParent.getRootNode() : ele ? ele.getRootNode() : undefined;
            var nonShadowParent = ele;
            var hostEleParent = this.getHostElement(shadowParent);
            if (shadowParent && hostEleParent) {
                nonShadowParent = this.looping(nonShadowParent);
            }

            if (Lyte.isWidgetBuild & shadowParent && hostEleParent && outlet && hostEleParent != (outlet.lastElementChild ? this.getHostElement(outlet.lastElementChild.getRootNode()) : this.getHostElement(outlet.getRootNode()))) {
                var a = { "type": "appendChild", "shadowParent": hostEleParent, "outlet": outlet, "element": ele, "nonShadowParent": nonShadowParent };
                this.addElements(a); //registryInstance
            } else {
                outlet.appendChild(ele);
            }
            if (igDisconnect) {
                _LyteComponent._setIgnoreDisconnect(false);
            }
        },
        "looping": function looping(parent) {
            while (parent) {
                if (parent.component && parent.tagName != "LYTE-YIELD") {
                    return parent;
                }
                parent = parent.parentNode;
            }
        },
        "addElements": function addElements(obj, registryInstance) {
            //type ,shadowParent,outlet,ele,refNode
            // var type = obj.type;
            var ele = obj.element;
            // var outlet = obj.outlet;
            // // var shadowParent = obj.shadowParent;
            // var refNode = obj.refNode;
            // // var nonShadowParent = obj.nonShadowParent;
            // var success;//,finalshadow;
            // var self = this;
            // var argumentsArr = argumentsArr;
            // if(nonShadowParent){
            // var parentInstance = nonShadowParent;
            // var id = nonShadowParent._id;
            // var sw = nonShadowParent._sw;
            // var tagName = nonShadowParent.tagName;
            // }
            // else{
            // var parentInstance = shadowParent;
            // if(shadowParent.tagName == "SHADOW-WRAPPER"){
            //     parentInstance = shadowParent.shadowRoot._swParent;
            // }
            // var id = shadowParent.shadowRoot._id;
            // var sw = shadowParent.shadowRoot._sw;
            // var tagName = shadowParent.tagName;
            // }
            // switch(type){
            //     case "appendChild":
            //         var pos = outlet.lastElementChild;
            //         if(pos && pos.shadowRoot  && pos.tagName == "SHADOW-WRAPPER"){
            //             outlet.lastElementChild.shadowRoot.appendChild(ele);
            //             success = true;
            //             // finalshadow = outlet.lastElementChild.shadowRoot;
            //         }
            //         break;
            //     case "insertBefore":
            //         var pos = refNode.previousElementSibling;
            //         if(pos && pos.shadowRoot && pos.tagName == "SHADOW-WRAPPER"){
            //             refNode.previousElementSibling.shadowRoot.appendChild(ele);
            //             success = true;
            //             // finalshadow = refNode.previousElementSibling.shadowRoot;
            //         }
            //         break;
            //     case "insertAfter":
            //         var pos = refNode.nextElementSibling;
            //         if(pos && pos.shadowRoot  && pos.tagName == "SHADOW-WRAPPER"){
            //             refNode.nextElementSibling.shadowRoot.lastElementChild.after.apply(refNode.nextElementSibling.shadowRoot.lastElementChild, ele);
            //             success = true;
            //             // finalshadow = refNode.nextElementSibling.shadowRoot;
            //         }
            //         break;
            // }
            // if(!success){
            // var wrapper = document.createElement("shadow-wrapper");
            // if(shadowParent.tagName == "LYTE_YIELD"){
            // }
            // wrapper.attachShadow({"mode":"open"});//af
            var wrapper = Lyte.$.widgetWrapper;
            // if(!wrapper.instantiated){
            //     if(window.docEventListenerHandler) {
            //         window.docEventListenerHandler.attachShadow(wrapper.shadowRoot);
            //     }
            //     this.shadowList.push(wrapper.shadowRoot);
            //     wrapper.shadowRoot._shadowChild = [];
            //     wrapper.shadowRoot._lyteShadow = true;
            //     wrapper.shadowRoot._compList = [];
            //     // wrapper.shadowRoot._id = id;
            //     wrapper.shadowRoot._duplicateStyle = [];
            //     wrapper.shadowRoot._linkRef = [];

            //     wrapper.instantiated = true;
            //     this.attachEvents(wrapper.shadowRoot);
            // }
            if (Array.isArray(ele)) {
                ele.forEach(function (item, index) {
                    wrapper.shadowRoot.appendChild(item);
                });
            } else {
                wrapper.shadowRoot.append(ele);
            }
            //     switch(type){
            //     case "appendChild":
            //         // var pos = outlet.lastElementChild;
            //         // if(pos && pos.shadowRoot  && pos.tagName == "SHADOW-WRAPPER"){
            //             wrapper.shadowRoot.appendChild(ele);
            //             // success = true;
            //             // finalshadow = outlet.lastElementChild.shadowRoot;
            //         // }
            //         break;
            //     case "insertBefore":
            //         // var pos = refNode.previousElementSibling;
            //         // if(pos && pos.shadowRoot && pos.tagName == "SHADOW-WRAPPER"){
            //         //     refNode.previousElementSibling.shadowRoot.appendChild(ele);
            //         //     success = true;
            //         //     // finalshadow = refNode.previousElementSibling.shadowRoot;
            //         // }
            //         break;
            //     case "insertAfter":
            //         // var pos = refNode.nextElementSibling;
            //         // if(pos && pos.shadowRoot  && pos.tagName == "SHADOW-WRAPPER"){
            //         //     refNode.nextElementSibling.shadowRoot.lastElementChild.after.apply(refNode.nextElementSibling.shadowRoot.lastElementChild, ele);
            //         //     success = true;
            //         //     // finalshadow = refNode.nextElementSibling.shadowRoot;
            //         // }
            //         break;
            // }
            // if(shadowParent.tagName == "SHADOW-WRAPPER"){
            //     var shadowParentComp = shadowParent.shadowRoot._swParent;
            //     shadowParentComp.shadowRoot ? shadowParentComp.shadowRoot._sw.push(wrapper) :shadowParentComp._sw.push(wrapper);
            //     wrapper.setAttribute("lyte-id",shadowParentComp.tagName);
            //     wrapper.shadowRoot._swParent = shadowParentComp;
            // }
            // else{
            //     // sw.push(wrapper);
            //     wrapper.setAttribute("lyte-id",tagName);
            //     wrapper.shadowRoot._swParent = parentInstance;
            // }
            // wrapper.setAttribute("widget-shadow-wrapper",true);
            // if(type == "appendChild"){
            //     outlet.appendChild(wrapper);    
            // }else if(type == "insertBefore"){
            //     LyteComponent.insertBeforeNative(outlet ,wrapper, refNode); 
            // }
            // else{
            //     refNode.after.apply(refNode, [wrapper]);
            // }
            // finalshadow = wrapper.shadowRoot;
            // shadowParent.shadowRoot._compList.forEach(function(compName){
            //     wrapper.shadowRoot._compList.push(compName);
            // })
            //lessdiv
            // let hostEle = this.getHostElement(finalshadow);
            // this.createLessDiv(finalshadow,hostEle,shadowParent,shadowParent.shadowRoot._compList)
            // this.insertInLessDiv(shadowParent,hostEle._lessDiv)
            // this.updateLessDiv(hostEle._lessDiv,shadowParent.shadowRoot._compList);
            // }
            //attach style tag from .css
            // var parentStyleList = shadowParent.shadowRoot._duplicateStyle;
            // if(parentStyleList &&parentStyleList.length > 0){
            //     parentStyleList.forEach(function(item,index){
            //         // var compIns = LyteComponent._registeredComponents[item.toLowerCase()];
            //         var compIns = registryInstance._registeredComponents[item.toLowerCase()];//af check which registry?
            //         if(finalshadow._duplicateStyle.indexOf(item) == -1 && compIns._style){
            //             var sty = self.stringToStyle(compIns._style);
            //             sty.setAttribute("lyte-id","shadow-style-"+item);//update less style
            //             finalshadow._duplicateStyle.push(item);
            //             // sty._id = id;
            //             self.prependStyle(finalshadow, sty);
            //         }
            //     })
            // }
            // //get custom style tag in hmtl file
            // var customStyle = shadowParent.shadowRoot.querySelectorAll("style");
            // customStyle.forEach(function(item,index){
            //     if(!item.getAttribute("lyte-id") && !item.getAttribute("lyte-id-imported") &&!item.getAttribute("placeHolder")){
            //         self.prependStyle(finalshadow, item.cloneNode(true));
            //     }
            // });
            // var customLink = shadowParent.shadowRoot.querySelectorAll("link");
            // customLink.forEach(function(item,index){
            //     finalshadow.appendChild(item.cloneNode(true));
            //         // this.prependStyle(finalshadow, item.cloneNode(true));
            // });
        },
        "prependStyle": function prependStyle(shadowParent, style) {
            var nodes = shadowParent.querySelectorAll("[lyte-id^='shadow-']");
            var last = nodes[nodes.length - 1];
            if (last) {
                _LC.insertBeforeNative(shadowParent, style, last.nextSibling);
            } else {
                _LC.insertBeforeNative(shadowParent, style, shadowParent.childNodes[0]);
            }
        }
    }), _defineProperty(_LyteComponent2, "V3", {
        pendingComp: {
            remove: function remove(node) {
                var found = void 0;
                var ltCfPend = window.__lyteConfig._pendingV3Components;
                if (ltCfPend[node.localName]) {
                    var ind = ltCfPend[node.localName].indexOf(node);
                    if (ind != -1) {
                        ltCfPend[node.localName].splice(ind, 1);
                        found = true;
                    }
                }
                return found;
            },
            add: function add(node) {
                var ltCfPend = window.__lyteConfig._pendingV3Components;
                if (ltCfPend[node.localName]) {
                    if (ltCfPend[node.localName].indexOf(node) == -1) {
                        ltCfPend[node.localName].push(node);
                    }
                } else {
                    ltCfPend[node.localName] = [node];
                }
            },
            find: function find(name) {
                return window.__lyteConfig._pendingV3Components[name];
            },
            execute: function execute(arr) {
                arr.forEach(function (item) {
                    delete item.__v3lyteIgnore;
                    item.decideConstructor();
                    var arr = Array.from(item.attributes);
                    arr.forEach(function (attr) {
                        if (item.constructor.observedAttributes.indexOf(attr.name) != -1) {
                            item._attributeChangedCallback(attr.name, null, attr.value);
                        }
                    });
                    item._connectedCallback();
                });
                arr.splice(0, arr.length);
            },
            firstRegister: function firstRegister(name, v) {
                var firstObj = window.__lyteConfig._firstRegisteredComp;
                if (!firstObj[name]) {
                    firstObj[name] = v;
                }
            }
        }
    }), _defineProperty(_LyteComponent2, "directive", {
        "save": {
            triggerMap: {
                "input": ["value", "checked", "disabled"],
                "select": ["value", "selectedIndex"],
                "textarea": ["value"],
                "div": ["id"],
                "span": ["id"]
            },
            addNode: function addNode(self, attr, dynamicN, gonnaSave, node, staticProp, helperNode, options) {
                var nodeVal = _LC.directive.getExactTransitionArg(attr, dynamicN) || dynamicN.id;
                if (nodeVal) {
                    self.setData(nodeVal, gonnaSave);
                    _LC.object.initalize(dynamicN, "__updateProp");
                    _LC.array.initalize(dynamicN.__updateProp, attr.hookName);
                    if (dynamicN.__updateProp[attr.hookName].indexOf(nodeVal) == -1) {
                        dynamicN.__updateProp[attr.hookName].push(nodeVal);
                    }
                    if (node) {
                        node._saveNode = nodeVal;
                    }
                    attr._saveNode = nodeVal;
                    if (attr.hookName == "prop") {
                        this.addData(gonnaSave, attr);
                    }
                    var cxObj = dynamicN._cx;
                    var forHelperNode = cxObj ? cxObj.node : false;
                    if (staticProp) {
                        if (forHelperNode) {
                            dynamicN._helperNode = forHelperNode;
                            if (options) {
                                var type = cxObj.type;
                                var ind = cxObj.itemIndex;
                                switch (type) {
                                    case "forIn":
                                    case "for":
                                        {
                                            if (helperNode._dirObj) {
                                                if (helperNode._dirObj.prop) {
                                                    if (helperNode._dirObj.prop.indexOf(nodeVal) != -1) {
                                                        this.estBndPrevNode(self, helperNode, nodeVal, gonnaSave, cxObj);
                                                    }
                                                }
                                                if (helperNode._dirObj.data) {
                                                    if (helperNode._dirObj.data.indexOf(nodeVal) != -1) {
                                                        this.estBndPrevNode(self, helperNode, nodeVal, gonnaSave, cxObj);
                                                    }
                                                }
                                            }
                                            _LC.array.initalize(forHelperNode, "_currentProp");
                                            _LC.array.checkAndPush(forHelperNode._currentProp, nodeVal);
                                            if (!forHelperNode._propNodes[nodeVal]) {
                                                if (forHelperNode.getAttribute("is") == "forIn") {
                                                    forHelperNode._propNodes[nodeVal] = {};
                                                } else {
                                                    forHelperNode._propNodes[nodeVal] = [];
                                                }
                                            }
                                            if (forHelperNode._propNodes[nodeVal][ind]) {
                                                this.for.beforeUpdateSpecific(forHelperNode, [ind, 1], [gonnaSave], nodeVal, true);
                                                this.for.afterUpdateSpecific(forHelperNode, [ind, 1], [gonnaSave], nodeVal);
                                            } else {
                                                forHelperNode._propNodes[nodeVal][ind] = gonnaSave; //make it as set so that parent propnodes will be udpated
                                            }
                                        }
                                }
                            }
                        } else {
                            //af check //does it needed really ccehck
                            var beforeProp = self.getProperty(nodeVal);
                            _LC.array.initalize(self._propNodes, nodeVal);
                            self._propNodes[nodeVal].push(beforeProp);
                        }
                    }
                } else {
                    Lyte.error("No value provided for save directive");
                }
            },
            addData: function addData(element, attr) {
                if (!element.$data) {
                    var listenerArr = this.triggerMap[element.localName];
                    if (listenerArr) {
                        element.$data = {};
                        listenerArr.forEach(function (prop) {
                            element.$data[prop] = element[prop];
                        });
                    } else if (Lyte.Component.registeredComponents[element.localName]) {
                        var directiveName = attr.hookName;
                        var directiveVal = _LC.directive.getExactTransitionArg(attr, element) || element.id;
                        element.$data = {};
                        Object.defineProperty(element.$data, "__lyteDirective", {
                            "enumerable": false,
                            "value": {
                                name: directiveName,
                                value: directiveVal,
                                node: element
                            }
                        });
                    } else {
                        element.$data = {};
                        // for(let attr in element.attribute){
                        //     let name = _LC.String.toCamelCase(attr.nodeName);
                        //     if(!element.$data[name]){
                        //         element.$data[name] = attr.nodeValue;
                        //     }
                        // }
                    }
                    for (var i = 0; i < element.attributes.length; i++) {
                        var attrib = element.attributes[i];
                        var name = _LC.String.toCamelCase(attrib.name);
                        if (!element._attributeDetails[attrib.name] && !element.$data[name]) {
                            element.$data[name] = attrib.value;
                        }
                    }
                }
            },
            updateName: function updateName(self, node, nodeValue) {
                var oldSave = node._saveNode;
                var fullDirectiveName = node.nodeName;
                var actualData = void 0;
                if (fullDirectiveName == "@data") {
                    actualData = node.ownerElement.$data;
                } else {
                    actualData = node.ownerElement;
                }
                if (self.getData(oldSave) == actualData) {
                    self.setData(oldSave, null);
                }
                node._saveNode = nodeValue;
                self.setData(nodeValue, actualData);
                var spAttr = node.ownerElement._specialAttributeDetails;
                spAttr.forEach(function (attr) {
                    if (attr.hookName == "prop") {
                        attr._saveNode = nodeValue;
                    } else if (attr.hookName == "data") {
                        attr._saveNode = nodeValue;
                    }
                });
            },
            removeNode: function removeNode(self, dynamicN) {
                if (dynamicN._specialAttributeDetails) {
                    dynamicN._specialAttributeDetails.forEach(function (attr) {
                        if (attr.hookName == "prop" || attr.hookName == "data") {
                            var dataName = _LC.directive.getActualTransitionArg(attr, dynamicN);
                            self.component.data[dataName] = null;
                        }
                    });
                }
            },
            removeAllNode: function removeAllNode(isType, self, spNodes) {
                //af can we remove // need for if and switch and normal
                _LC.iterator(isType, spNodes, function (dynamicN) {
                    if (Array.isArray(dynamicN)) {
                        dynamicN.forEach(function (dynN) {
                            _LCSV.removeNode(self, dynN);
                        });
                    } else {
                        _LCSV.removeNode(self, dynamicN);
                    }
                });
            },
            getAttr: function getAttr(spAttr) {
                var saveAttr = false;
                if (spAttr) {
                    spAttr.forEach(function (attr) {
                        if (attr.hookName == "prop") {
                            saveAttr = attr;
                        } else if (attr.hookName == "data") {
                            saveAttr = attr;
                        }
                    });
                }
                return saveAttr;
            },
            triggerAllListeners: function triggerAllListeners(self, directiveName, target, switchContext) {
                var saveNodeName = target.localName;
                var listenerArr = this.triggerMap[saveNodeName];
                if (listenerArr) {
                    listenerArr.forEach(function (prop) {
                        _LCSV.setData(prop, target);
                    });
                    if (self._cx) {
                        _LCSV.updateCxNodes(self);
                    }
                }
            },
            setData: function setData(eleProp, target) {
                Lyte.Component.set(target.$data, eleProp, target[eleProp]);
            },
            addNodeLazy: function addNodeLazy(arr, comp, info, dynamicN, helperNode, yieldComp, options) {
                arr.forEach(function (obj) {
                    var attr = obj.attr;
                    var node = obj.node;
                    var staticProp = void 0;
                    if (attr && attr.stringValue) {
                        staticProp = true;
                    }
                    if (attr.hookNode) {
                        _LC.directive.infoA(comp, info, dynamicN, helperNode, attr, yieldComp, options);
                        if (attr.hookName == "prop" || attr.hookName == "data") {
                            if (options && options.node) {
                                dynamicN._cx = options;
                            } else if (helperNode) {
                                dynamicN._cx = helperNode._cx;
                            }
                            var gonnaSave = dynamicN;
                            _LCSV.addData(dynamicN, attr);
                            if (attr.hookName == "data") {
                                gonnaSave = dynamicN.$data;
                            }
                            _LCSV.addNode(comp, attr, dynamicN, gonnaSave, node, staticProp, helperNode, options);
                        } else if (attr.hookName == "class") {
                            if (staticProp) {
                                _LC.directive.class.addStaticValue(dynamicN);
                            } else {
                                _LC.directive.class.addValue(node.ownerElement);
                            }
                        }
                    }
                });
            },
            updateCxNodes: function updateCxNodes(comp) {
                var cx = comp._cx;
                var initial = true;
                while (cx) {
                    if (cx.type == "for" || cx.type == "forIn") {
                        (function () {
                            var forNode = cx.node;
                            var ind = cx.itemIndex;
                            if (comp.__updateProp.data) {
                                comp.__updateProp.data.forEach(function (propVal) {
                                    //eslint-disable-line no-loop-func
                                    if (forNode._propNodes[propVal]) {
                                        if (initial) {
                                            Lyte.Component.set(forNode._propNodes[propVal], ind, comp.$data, { force: true });
                                        }
                                        _LCSV.affectChangesArr(forNode._items[ind].propProperty[propVal]);
                                        _LCSV.establishBindingsArr(forNode._items[ind].propProperty[propVal], forNode._propNodes[propVal][ind]);
                                    }
                                    _LCSV.affectChangesComp(forNode);
                                });
                            } else if (comp.__updateProp.prop) {
                                comp.__updateProp.prop.forEach(function (propVal) {
                                    //eslint-disable-line no-loop-func
                                    if (forNode._propNodes[propVal]) {
                                        if (initial) {
                                            Lyte.Component.set(forNode._propNodes[propVal][ind], "$data", comp.$data, { force: true });
                                        }
                                        _LCSV.affectChangesArr(forNode._items[ind].propProperty[propVal], forNode._propNodes[propVal]);
                                    }
                                });
                            }
                        })();
                    }
                    initial = false;
                    cx = cx.node._cx;
                }
                if (comp.__updateProp.data) {
                    comp.__updateProp.data.forEach(function (propVal) {
                        if (comp._callee && comp._callee._propProperty && comp._callee._propProperty[propVal] && comp._callee._propProperty[propVal].length) {
                            _LCSV.affectChangesArr(comp._callee._propProperty[propVal]); // it is ctx switcing ??
                            _LCSV.establishBindingsArr(comp._callee._propProperty[propVal], comp._callee.$data[propVal], true);
                        }
                    });
                }
            },
            setDataInParentComp: function setDataInParentComp(comp) {
                if (comp.__updateProp.data) {
                    comp.__updateProp.data.forEach(function (propVal) {
                        Lyte.Component.set(comp._callee.component.data, propVal, comp.$data, { force: true });
                    });
                } else if (comp.__updateProp.prop) {
                    comp.__updateProp.prop.forEach(function (propVal) {
                        Lyte.Component.set(comp._callee.component.data, propVal, comp, { force: true });
                    });
                }
            },
            affectChangesArr: function affectChangesArr(bindingArr) {
                if (bindingArr) {
                    bindingArr.forEach(function (binding) {
                        binding && _LC.affectChanges(binding);
                    });
                }
            },
            establishBindingsArr: function establishBindingsArr(bindingArr, data, addBinding) {
                if (bindingArr) {
                    bindingArr.forEach(function (binding) {
                        _LC.establishBindings(binding, data);
                        if (addBinding) {
                            addBindings(data, binding);
                        }
                    });
                }
            },
            afterRender: function afterRender(node, comp, dirObjProp, options, initialRender) {
                var _this14 = this;

                var _loop = function _loop(_key44) {
                    var cxObj = node._cx;
                    var parentForNode = node;
                    while (cxObj) {
                        if (cxObj.type == "for" || cxObj.type == "forIn") {
                            parentForNode = cxObj.node;
                            var parentPropNodes = cxObj.node._propNodes[_key44];
                            if (cxObj.node._propNodes[_key44]) {
                                if (options.type != "default" && node.getAttribute("is") == "for") {
                                    var oldbindings = parentPropNodes[cxObj.itemIndex]._bindings;
                                    if (oldbindings) {
                                        var bindArr = oldbindings.toArrayLyte();
                                        _this14.establishBindingsArr(bindArr, node._propNodes[_key44]);
                                    }
                                }
                                parentPropNodes[cxObj.itemIndex] = node._propNodes[_key44];
                                _this14.affectChangesArr(parentForNode._items[cxObj.itemIndex].propProperty[_key44]);
                                if (node.getAttribute("is") == "for") {
                                    _this14.establishBindingsArr(parentForNode._items[cxObj.itemIndex].propProperty[_key44], parentForNode._propNodes[_key44][cxObj.itemIndex]);
                                }
                            } else if (!cxObj.node._propNodes[_key44]) {
                                if (cxObj.node.getAttribute("is") == "forIn") {
                                    parentPropNodes = cxObj.node._propNodes[_key44] = {};
                                } else {
                                    parentPropNodes = cxObj.node._propNodes[_key44] = [];
                                }
                                parentPropNodes[cxObj.itemIndex] = node._propNodes[_key44];
                            }
                            if (!cxObj.node._childProp) {
                                cxObj.node._childProp = [_key44];
                            } else if (cxObj.node._childProp.indexOf[_key44] == -1) {
                                cxObj.node._childProp.push(_key44);
                            }
                        }
                        cxObj = cxObj.node._cx;
                        node = parentForNode;
                    }
                    if (parentForNode) {
                        comp.$data[_key44] = parentForNode._propNodes[_key44];
                        if (!comp._propProperty[_key44]) {
                            comp._propProperty[_key44] = [];
                        }
                        if (options.type == "update" || options.type == "default") {
                            if (options.type == "update") {
                                var bind = comp.$data[_key44]._bindings;
                                if (bind) {
                                    var _bindArr = bind.toArrayLyte();
                                    _bindArr.forEach(function (bind) {
                                        if (comp._propProperty[_key44].indexOf(bind) == -1) {
                                            comp._propProperty[_key44].push(bind);
                                            comp._propProperty[_key44].push([]);
                                        }
                                        if (node.getAttribute("is") == "forIn") {
                                            _LCSV.establishBindingsArr(_bindArr, parentForNode._propNodes[_key44]);
                                        }
                                    });
                                }
                            } else {
                                var compProp = dirObjProp.data[_key44];
                                if (initialRender && compProp && Object.keys(compProp).length && comp._propProperty[_key44].indexOf(compProp) == -1) {
                                    //af proper alternative ??????
                                    if (Array.isArray(compProp)) {
                                        compProp.forEach(function (bind) {
                                            comp._propProperty[_key44].push(bind);
                                        });
                                    } else {
                                        comp._propProperty[_key44].push(compProp);
                                    }
                                }
                            }
                        }
                    }
                };

                for (var _key44 in node._propNodes) {
                    _loop(_key44);
                }
            },
            estBndPrevNode: function estBndPrevNode(self, helperNode, nodeVal, gonnaSave, cxObj) {
                this.addFlagInData(helperNode);
                var hpNode = helperNode;
                var savedNode = gonnaSave;
                var childInd = cxObj.itemIndex;
                var beforeProp = hpNode._items[childInd].propProperty[nodeVal];
                if (beforeProp) {
                    beforeProp.forEach(function (prop) {
                        if (prop._path == nodeVal && !savedNode._establish) {
                            _LC.establishBindings(_defineProperty({}, nodeVal, prop), _defineProperty({}, nodeVal, savedNode));
                            savedNode._establish = true; // af check
                        }
                    });
                }
                self._properties[nodeVal] = {};
            },
            removeAll: function removeAll(isType, self, node, index, destroyChild, updateIndex, parentNode, type) {
                var _this15 = this;

                //removeing this specialnodes check we can remove beforeudpateprop method 
                if (/^(if|switch|for)$/.test(isType)) {
                    node._specialNodes && node._specialNodes.length && this.removeAllNode("for", self, node._specialNodes);
                } else if (isType == "forIn") {
                    node._specialNodes && Object.keys(node._specialNodes).length && this.removeAllNode("forIn", self, node._specialNodes);
                }
                if (node._propNodes && Object.keys(node._propNodes).length) {
                    var _loop2 = function _loop2(propName) {
                        if (index != undefined) {
                            _this15.removeInIndex(self, node, propName, index, node._propNodes[propName][index], true, destroyChild, updateIndex, parentNode, type);
                        } else {
                            _LC.iterator(isType, node._propNodes[propName], function (index, item) {
                                _LCSV.removeInIndex(self, node, propName, index, item, true, destroyChild, updateIndex, parentNode, type);
                            });
                            node._propNodes[propName] = {};
                        }
                    };

                    //af check bug change removed esle in the starting
                    for (var propName in node._propNodes) {
                        _loop2(propName);
                    }
                }
            },
            addFlagInData: function addFlagInData(node) {
                while (node) {
                    if (node.getAttribute("is") == "forIn") {
                        makeVal(node._currentObject, "_propNodes", true);
                    }
                    node = node._cx && node._cx.node;
                }
            },
            removeInIndex: function removeInIndex(comp, node, propName, index, data, destroy, destroyChild, updateIndex, updateNode, type) {
                var _this16 = this;

                if (node._items[index]) {
                    var _ret6 = function () {
                        var propPropertyArr = node._items[index].propProperty[propName];
                        if (propPropertyArr) {
                            propPropertyArr.forEach(function (binding) {
                                _LC.removeSelectedBindingDeep(binding, data);
                            });
                            node._items[index].propProperty[propName] = [];
                            node._items[index].propPropertyDyn[propName] = [];
                        }
                        if (type && type == "update" && updateNode == node) {
                            return {
                                v: void 0
                            };
                        }
                        var parentStarted = void 0;
                        if (node == updateNode) {
                            parentStarted = true;
                        }
                        var cx = node._cx; //asumme one array is splicing so need to update all parent helpers propProperty
                        while (cx) {
                            if (cx.type == "for" || cx.type == "forIn") {
                                (function () {
                                    var ind = cx.itemIndex;
                                    var node = cx.node;
                                    if (node._items[ind]) {
                                        var _propPropertyArr = node._items[ind].propProperty[propName];
                                        var propPropertyDynArr = node._items[ind].propPropertyDyn[propName];
                                        if (_propPropertyArr) {
                                            _this16.affectChangesArr(_propPropertyArr);
                                            _propPropertyArr.forEach(function (binding, ix) {
                                                //eslint-disable-line no-loop-func
                                                var removePropNodes = node._propNodes[propName][ind];
                                                var remove = void 0;
                                                var arr = propPropertyDynArr[ix].split(".");
                                                arr.forEach(function (dynName) {
                                                    //eslint-disable-line no-loop-func
                                                    if (dynName.indexOf(updateIndex) != -1) {
                                                        remove = true;
                                                    }
                                                });
                                                if (remove || !parentStarted) {
                                                    _LC.removeSelectedBindingDeep(binding, removePropNodes);
                                                }
                                            });
                                            if (destroyChild) {
                                                node._items[ind].propProperty[propName] = [];
                                            }
                                        }
                                    }
                                    if (node == updateNode) {
                                        parentStarted = true;
                                    }
                                })();
                            }
                            cx = cx.node._cx;
                        }
                        if (comp && comp._propProperty[propName]) {
                            if (comp._propProperty[propName].indexOf(propName) != -1) {
                                var propNode = _this16.getActualPropData(node, propName);
                                if (propNode._bindings) {
                                    var bindArr = propNode._bindings.toArrayLyte();
                                    bindArr.forEach(function (bnd) {
                                        _LC.removeSelectedBindingDeep(bnd, propNode);
                                    });
                                }
                            }
                        }
                    }();

                    if ((typeof _ret6 === 'undefined' ? 'undefined' : _typeof(_ret6)) === "object") return _ret6.v;
                }
            },
            removeInParent: function removeInParent(comp, node, propName, index, data, destroy) {
                var cx = node._cx; //asumme one array is splicing so need to update all parent helpers propProperty
                while (cx) {
                    if (cx.type == "for" || cx.type == "forIn") {
                        (function () {
                            var ind = cx.itemIndex;
                            var node = cx.node;
                            var propPropertyArr = node._items[ind].propProperty[propName];
                            if (propPropertyArr) {
                                propPropertyArr.forEach(function (binding) {
                                    //eslint-disable-line no-loop-func
                                    _LC.removeSelectedBindingDeep(binding, node._propNodes[propName][ind]);
                                });
                            }
                        })();
                    }
                    cx = cx.node._cx;
                }
                if (comp && comp._propProperty[propName]) {
                    if (comp._propProperty[propName].indexOf(propName) != -1) {
                        var propNode = this.getActualPropData(node, propName);
                        if (propNode._bindings) {
                            var bindArr = propNode._bindings.toArrayLyte();
                            bindArr.forEach(function (bnd) {
                                _LC.removeSelectedBindingDeep(bnd, propNode);
                            });
                        }
                    }
                }
            },
            removeInChild: function removeInChild(comp, node, propName, index, data, destroy) {
                var _this17 = this;

                if (node._helpers) {
                    var _loop3 = function _loop3(_i95) {
                        for (var j = 0; j < node._helpers[_i95].length; j++) {
                            var currentNode = node._helpers[_i95][j];
                            _this17.removeInChild(comp, currentNode, propName, _i95, data, destroy);
                            var propPropertyArr = node._items[_i95].propProperty[propName];
                            if (propPropertyArr) {
                                propPropertyArr.forEach(function (binding) {
                                    //eslint-disable-line no-loop-func
                                    _LC.removeSelectedBindingDeep(binding, node._propNodes[propName][_i95]);
                                });
                            }
                        }
                    };

                    for (var _i95 = 0; _i95 < node._helpers.length; _i95++) {
                        _loop3(_i95);
                    }
                }
            },
            addInParent: function addInParent(comp, node, propName) {
                var cx = node._cx;
                if (cx) {
                    var ind = cx.itemIndex;
                    var forNode = cx.node;
                    while (cx) {
                        if (cx.type == "for" || cx.type == "forIn") {
                            forNode = cx.node;
                            ind = cx.itemIndex;
                            this.affectChangesArr(forNode._items[ind].propProperty[propName]);
                            this.establishBindingsArr(forNode._items[ind].propProperty[propName], forNode._propNodes[propName][ind]);
                        }
                        cx = cx.node._cx;
                    }
                }
            },
            addInChild: function addInChild(comp, node, propName, i) {
                if (node._helpers) {
                    for (var _i96 = 0; _i96 < node._helpers.length; _i96++) {
                        for (var j = 0; j < node._helpers[_i96].length; j++) {
                            var currentNode = node._helpers[_i96][j];
                            this.addInChild(comp, currentNode, propName);
                            var ind = currentNode._cx.itemIndex;
                            this.establishBindingsArr(currentNode._items[ind].propProperty[propName], currentNode._propNodes[propName][ind]);
                        }
                    }
                }
            },
            affectChangesComp: function affectChangesComp(node) {
                var arr = node._currentProp ? node._currentProp : node._childProp;
                if (arr) {
                    arr.forEach(function (propName) {
                        var comp = node._callee;
                        if (comp._propProperty[propName]) {
                            comp._propProperty[propName].forEach(function (binding) {
                                _LC.affectChanges(binding);
                            });
                        }
                    });
                }
            },
            getActualPropData: function getActualPropData(node, propName) {
                var parentMostNode = node;
                var cx = node._cx;
                while (cx) {
                    parentMostNode = cx.node;
                    cx = cx.node._cx;
                }
                return parentMostNode._propNodes[propName];
            },
            forIn: {
                delete: function _delete(node, options) {
                    if (node._propNodes && Object.keys(node._propNodes).length) {
                        for (var propName in node._propNodes) {
                            var propArr = node._propNodes[propName];
                            propArr[options.property] = null;
                            delete propArr[options.property];
                            if (propArr._bindings) {
                                var bindings = propArr._bindings.toArrayLyte();
                                _LCSV.affectChangesArr(bindings);
                            }
                        }
                    }
                },
                add: function add(node, options, keysArray, replace) {
                    var self = node._callee;
                    var lastNode = void 0;
                    if (node._propNodes && Object.keys(node._propNodes).length) {
                        if (replace) {
                            keysArray.forEach(function (itemKey, index, array) {
                                self.removeHelpersSpecificIndex(node, itemKey, undefined, options.type);
                            });
                        }
                        if (node._forContent[options.property]) {
                            var ind = node._keysArray.indexOf(options.property);
                            if (node._forContent[node._keysArray[ind + 1]]) {
                                lastNode = node._forContent[node._keysArray[ind + 1]][0];
                            } else {
                                lastNode = node;
                            }
                        }
                    }
                    return lastNode;
                },
                update: function update(node) {
                    if (node._propNodes && Object.keys(node._propNodes).length) {
                        for (var _key45 in node._items) {
                            for (var propName in node._propNodes) {
                                var propArr = node._propNodes[propName];
                                // propArr.shift();
                                propArr[_key45] = null;
                                delete propArr[_key45];
                                if (node._cx && (node._cx.type == "for" || node._cx.type == "forIn")) {
                                    _LCSV.addInParent(node._callee, node, propName);
                                }
                                if (propArr._bindings) {
                                    var bindings = propArr._bindings.toArrayLyte();
                                    _LCSV.affectChangesArr(bindings);
                                }
                            }
                        }
                    }
                }
            },
            for: {
                update: function update(node) {
                    if (node._propNodes && Object.keys(node._propNodes).length) {
                        for (var propName in node._propNodes) {
                            var propArr = node._propNodes[propName];
                            propArr.shift();
                            if (node._cx && (node._cx.type == "for" || node._cx.type == "forIn")) {
                                _LCSV.addInParent(node._callee, node, propName);
                            }
                            if (propArr._bindings) {
                                var bindings = propArr._bindings.toArrayLyte();
                                _LCSV.affectChangesArr(bindings);
                            }
                        }
                    }
                },
                beforeUpdate: function beforeUpdate(node, spliceArr, newPropObj, newItemObj) {
                    var _this18 = this;

                    if (node._propNodes && Object.keys(node._propNodes).length) {
                        var _loop4 = function _loop4(propName) {
                            newItemObj.forEach(function (obj, index) {
                                if (obj) {
                                    if (!obj.propProperty) {
                                        obj.propProperty = {};
                                    }
                                    if (!obj.propProperty[propName]) {
                                        if (node.getAttribute("is") == "forIn") {
                                            obj.propProperty[propName] = {};
                                        } else {
                                            obj.propProperty[propName] = [];
                                        }
                                    }
                                }
                            });
                            _this18.beforeUpdateSpecific(node, spliceArr, newPropObj, propName);
                        };

                        for (var propName in node._propNodes) {
                            _loop4(propName);
                        }
                    }
                },
                beforeUpdateSpecific: function beforeUpdateSpecific(node, spliceArr, newPropObj, propName, addNode) {
                    var gonnaInsertPos = spliceArr[0];
                    if (newPropObj.length) {
                        if (node.getAttribute("is") == "for") {
                            // inserting
                            if (spliceArr[1] == 0) {
                                // inserting bt no deletion
                                // so need to update all next indexes
                                for (var _i97 = gonnaInsertPos; _i97 < node._propNodes[propName].length; _i97++) {
                                    //af check for forin
                                    _LCSV.removeInParent(node._callee, node, propName, _i97, node._propNodes[propName][_i97]);
                                    // _LCSV.removeInChild(node._callee, node, propName, i, node._propNodes[propName][i]);
                                }
                            } else if (newPropObj.length != spliceArr[1]) {
                                // inserting different val and deletion different val
                                // so need to update all next indexes
                                for (var _i98 = gonnaInsertPos; _i98 < node._propNodes[propName].length; _i98++) {
                                    _LCSV.removeInParent(node._callee, node, propName, _i98, node._propNodes[propName][_i98]);
                                }
                            }
                        }
                    }
                    var comp = node._callee;
                    if (!addNode && comp && comp._propProperty[propName]) {
                        var propNode = _LCSV.getActualPropData(node, propName);
                        if (propNode._bindings) {
                            var bindArr = propNode._bindings.toArrayLyte();
                            bindArr.forEach(function (bnd) {
                                _LC.removeSelectedBindingDeep(bnd, propNode);
                            });
                        }
                    }
                    var propArr = node._propNodes[propName];
                    if (node.getAttribute("is") == "forIn") {
                        if (newPropObj.length) {
                            propArr[gonnaInsertPos] = newPropObj[0];
                        } else {
                            propArr[gonnaInsertPos] = null;
                            delete propArr[gonnaInsertPos];
                        }
                    } else {
                        propArr.splice.apply(propArr, spliceArr.concat(newPropObj));
                    }
                },
                afterUpdate: function afterUpdate(node, spliceArr, newPropObj) {
                    if (node._propNodes && Object.keys(node._propNodes).length) {
                        //af check for forin
                        for (var propName in node._propNodes) {
                            this.afterUpdateSpecific(node, spliceArr, newPropObj, propName);
                        }
                    }
                },
                afterUpdateSpecific: function afterUpdateSpecific(node, spliceArr, newPropObj, propName) {
                    var gonnaInsertPos = spliceArr[0];

                    if (spliceArr[1] == 0) {
                        // inserting bt no deletion
                        // so need to update all next indexes
                        for (var _i99 = gonnaInsertPos + newPropObj.length; _i99 < node._propNodes[propName].length; _i99++) {
                            // afcheck forincase
                            _LCSV.addInParent(node._callee, node, propName, _i99, node._propNodes[propName][_i99]);
                            _LCSV.addInChild(node._callee, node, propName, _i99, node._propNodes[propName][_i99]);
                        }
                    } else if (newPropObj.length) {
                        if (newPropObj.length != spliceArr[1]) {
                            // inserting different val and deletion different val
                            // so need to update all next indexes
                            for (var _i100 = gonnaInsertPos + newPropObj.length; _i100 < node._propNodes[propName].length; _i100++) {
                                _LCSV.addInParent(node._callee, node, propName, _i100, node._propNodes[propName][_i100]);
                                _LCSV.addInChild(node._callee, node, propName, _i100, node._propNodes[propName][_i100]);
                            }
                        }
                    } else {
                        //deletion alone so need to update parent alone
                        _LCSV.addInParent(node._callee, node, propName);
                        _LCSV.addInChild(node._callee, node, propName);
                    }
                    var comp = node._callee;
                    if (comp && comp._propProperty[propName]) {
                        var propNode = _LCSV.getActualPropData(node, propName);
                        _LCSV.affectChangesArr(comp._propProperty[propName]);
                        _LCSV.establishBindingsArr(comp._propProperty[propName], propNode, true);
                    }
                }
            },
            beforeDirObj: function beforeDirObj(node, dirObjData, dirObjProp) {
                if (node._dirObj) {
                    if (node._dirObj.data) {
                        var callee = node._callee;
                        node._dirObj.data.forEach(function (dataPropName) {
                            dirObjData.data[dataPropName] = callee.component.data[dataPropName];
                            callee.component.data[dataPropName] = null;
                            dirObjProp.data[dataPropName] = callee._properties[dataPropName];
                            callee._properties[dataPropName] = null;
                        });
                    }
                }
            },
            afterDirObj: function afterDirObj(node, dirObjData, dirObjProp) {
                if (node._dirObj) {
                    if (node._dirObj.data) {
                        var callee = node._callee;
                        node._dirObj.data.forEach(function (dataPropName) {
                            callee.component.data[dataPropName] = dirObjData.data[dataPropName];
                            callee._properties[dataPropName] = dirObjProp.data[dataPropName];
                        });
                    }
                }
            },
            updateMulProp: function updateMulProp(node, multipleProp, boundName, totalProp, prop) {
                if (node._cx && multipleProp.helperNode && multipleProp.helperNode._items[node._cx.itemIndex].propProperty[boundName]) {
                    multipleProp.helperNode._items[node._cx.itemIndex].propProperty[boundName].push(totalProp);
                    multipleProp.helperNode._items[node._cx.itemIndex].propPropertyDyn[boundName].push(prop._path);
                }
            },
            lazyProp: {
                add: function add(lazyProp, node, helperNode, forIndex, boundValue, dynamicValuesArray, dynamicValues) {
                    lazyProp.push({
                        node: node,
                        helperNode: helperNode,
                        forIndex: forIndex,
                        boundValue: boundValue,
                        dynamicValuesArray: dynamicValuesArray,
                        dynamicValues: dynamicValues
                    });
                },
                iterate: function iterate(self, lazyProp) {
                    lazyProp.forEach(function (obj) {
                        var node = obj.node;
                        var helperNode = obj.helperNode;
                        var boundValue = obj.boundValue;
                        var forIndex = obj.forIndex;
                        var dynamicValuesArray = obj.dynamicValuesArray;
                        var dynVals = obj.dynamicValues;
                        node._propNode = true;
                        var propPropertyDyn = helperNode._items[forIndex].propPropertyDyn;
                        if (!propPropertyDyn[boundValue]) {
                            propPropertyDyn[boundValue] = [];
                        }
                        propPropertyDyn[boundValue].push(dynVals);

                        var propProperty = helperNode._items[forIndex].propProperty;
                        if (!propProperty[boundValue]) {
                            propProperty[boundValue] = [];
                        }
                        var prop = self.getProperty(boundValue);
                        propProperty[boundValue].push(prop);
                        var dta = _LC.get(self.component.data, boundValue);
                        if (dta && dta._establish) {
                            //af check
                            _LC.establishBindings(_defineProperty({}, boundValue, prop), _defineProperty({}, boundValue, dta));
                        }
                        self._properties[boundValue] = {};
                    });
                }
            },
            afterConnect: function afterConnect(comp) {
                if (comp._callee) {
                    var propSave = comp.hasAttribute("lyte-directive-prop");
                    var dataSave = comp.hasAttribute("lyte-directive-data");
                    if ((propSave || dataSave) && !comp.__updateProp) {
                        var _obj19 = {
                            attr: {
                                hookName: propSave ? "prop" : "data",
                                hookNode: true,
                                stringValue: propSave ? comp.getAttribute("lyte-directive-prop") : comp.getAttribute("lyte-directive-data")
                            },
                            node: comp
                        };
                        this.addNodeLazy([_obj19], comp._callee, undefined, comp, comp._cx ? comp._cx.node : undefined, undefined, comp._cx);
                    }
                }
            },
            setDirObj: function setDirObj(node) {
                if (node.hasAttribute("dir-obj")) {
                    node._dirObj = JSON.parse(node.getAttribute("dir-obj"));
                }
            },
            connect: function connect(comp) {
                if (comp.__updateProp && comp._callee && comp._callee.component) {
                    if (comp._cx) {
                        this.updateCxNodes(comp);
                    } else {
                        this.setDataInParentComp(comp);
                    }
                }
            },
            removeData: function removeData(comp) {
                if (comp._propProperty) {
                    for (var _key46 in comp._propProperty) {
                        comp._propProperty[_key46] = null;
                    }
                }
            }
        },
        "hide": {
            appendTemp: function appendTemp() {
                document.body.appendChild(_LC.hiddenComponentsDiv);
                document.body.appendChild(_LC.hiddenYieldsDiv);
            },
            triggerGlobalEvent: function triggerGlobalEvent(target, eventName, ev, hasHandled, ignore) {
                if (target && target._hiddenBoundEvents && target._hiddenBoundEvents[eventName] && !ev.cancelBubble && (ignore || ev.currentTarget == document.body)) {
                    var actObj = target._hiddenBoundEvents[eventName];
                    var cloneActObj = _Lyte.deepCopyObject(actObj);
                    _LC.skipArgProcessing(cloneActObj, eventName, target);
                    _LC.throwAction.call(target.parentElement._callee, target.parentElement._callee, eventName, cloneActObj, undefined, undefined, target, ev, hasHandled);
                }
            },
            connect: function connect(comp, content) {
                var tempParent = comp._callee;
                if (tempParent) {
                    _LCHD.template(comp, _LC.hiddenComponentsDiv, content);
                } else {
                    console.error(' Error:Parent node of current template is not of type TEMPLATE . Cannot hide this template');
                }
            },
            yield: {
                connect: function connect(comp) {
                    if (comp._callee && _LC.directive.getTransitionArg(comp._callee, "hide-tag")) {
                        _LCHD.template(comp, _LC.hiddenYieldsDiv);
                    }
                },
                disConnect: function disConnect(comp) {
                    if (Array.from(_LC.hiddenYieldsDiv.content.childNodes).indexOf(comp) != -1) {
                        _LC.hiddenYieldsDiv.content.removeChild(comp);
                    }
                    if (comp._hiddenTemplate && comp._hiddenTemplate.length) {
                        _LCHD.callDisconnectedCallback(comp);
                    }
                }
            },
            rmHelpersSpecificIndex: function rmHelpersSpecificIndex(node, index) {
                if (typeof index == 'number' && node._hiddenTemplate[index] && node._hiddenTemplate.length) {
                    for (var _i101 in node._hiddenTemplate[index]) {
                        node._hiddenTemplate[index][_i101].disconnectedCallback();
                    }
                    if (node.getAttribute("is") == "for") {
                        node._hiddenTemplate.splice(index, 1);
                    } else {
                        delete node._hiddenTemplate[index];
                    }
                }
            },
            forRmHelpers: function forRmHelpers(node) {
                if (node._hiddenTemplate && node._hiddenTemplate.length) {
                    for (var _i102 = 0; _i102 < node._hiddenTemplate.length; _i102++) {
                        for (var j = 0; j < node._hiddenTemplate[_i102].length; j++) {
                            node._hiddenTemplate[_i102][j].disconnectedCallback();
                        }
                        node._hiddenTemplate[_i102] = [];
                    }
                    node._hiddenTemplate = [];
                }
            },
            ifRmHelpers: function ifRmHelpers(node) {
                if (node._hiddenTemplate && node._hiddenTemplate.length) {
                    _LCHD.callDisconnectedCallback(node);
                }
            },
            setTxtNode: function setTxtNode(comp, yld) {
                if (_LC.directive.getTransitionArg(comp, "hide-tag")) {
                    var emptyTextNode = document.createTextNode("");
                    _LC.replaceWithPf(yld, emptyTextNode);
                }
            },
            shouldStop: function shouldStop(node, event) {
                var stopBubble = false;
                if (node._hiddenBoundEvents && node._hiddenBoundEvents[event.type] && node._hiddenBoundFlag) {
                    stopBubble = true;
                    node._hiddenBoundFlag = false;
                }
                return stopBubble;
            },
            define: {
                remove: function remove(classDef) {
                    var $remove = Element.prototype.remove;
                    Object.defineProperty(classDef.prototype, "remove", {
                        configurable: true,
                        writable: true,
                        value: function value() {
                            if (this._firstChild == undefined || this._firstChild.parentElement == null) {
                                $remove.call(this);
                                this._firstChild = undefined;
                                this._lastChild = undefined;
                                return;
                            }
                            firstNode = this._firstChild;
                            parent = firstNode.parentElement;
                            lastNode = this._lastChild;
                            while (firstNode.nextSibling != lastNode) {
                                parent.removeChild(firstNode.nextSibling);
                            }
                            this._firstChild = undefined;
                            this._lastChild = undefined;
                            parent.removeChild(firstNode);
                            parent.removeChild(lastNode);
                            return;
                        }
                    });
                },
                getContent: function getContent(customCrmComponent) {
                    Object.defineProperty(customCrmComponent.prototype, "getContent", {
                        configurable: true,
                        writable: true,
                        value: function value() {
                            arr = [];
                            if (this._firstChild == undefined) {
                                console.error("Cannot access template through getContent");
                            }
                            firstNode = this._firstChild;
                            lastNode = this._lastChild;
                            firstNode = firstNode.nextSibling;
                            while (firstNode != lastNode) {
                                arr.push(firstNode);
                                firstNode = firstNode.nextSibling;
                            }
                            return arr;
                        }
                    });
                }
            },
            addHiddenBoundEvents: function addHiddenBoundEvents(compNode, content) {
                if (!compNode._boundEvents) {
                    return;
                }
                for (var _i103 = 0; _i103 < content.childNodes.length; _i103++) {
                    if (compNode._boundEvents) {
                        content.childNodes[_i103]._hiddenBoundEvents = compNode._boundEvents;
                        if (content.childNodes[_i103]._boundEvents) {
                            content.childNodes[_i103]._hiddenBoundFlag = true;
                        }
                    }
                }
            },
            callDisconnectedCallback: function callDisconnectedCallback(node) {
                for (var _i104 = 0; _i104 < node._hiddenTemplate.length; _i104++) {
                    node._hiddenTemplate[_i104].disconnectedCallback();
                }
                node._hiddenTemplate = [];
            },
            template: function template(compNode, hiddenDomDiv, content) {
                _LyteComponent._setIgnoreDisconnect(true);
                compNode._ignoreDisconnect = true;
                compNode.__lyteIgnore = true;
                var parentElement = compNode._callee;
                var parentEle = compNode.parentElement;
                var domContent = document.createDocumentFragment();
                var len = compNode.childNodes.length;
                var firstChild = document.createTextNode("");
                var lastChild = document.createTextNode("");
                compNode._firstChild = firstChild;
                compNode._lastChild = lastChild;

                for (var _i105 = 0; _i105 < len; _i105++) {
                    compNode.childNodes[0]._hiddenBoundEvents = compNode._boundEvents;
                    if (compNode.childNodes[0]._boundEvents) {
                        compNode.childNodes[0]._hiddenBoundFlag = true;
                    }
                    domContent.append(compNode.childNodes[0]);
                }
                var elePos = Array.from(parentEle.childNodes).indexOf(compNode);
                parentEle.insertBefore(firstChild, parentEle.childNodes[elePos]);

                elePos = Array.from(parentEle.childNodes).indexOf(compNode);
                if (domContent.childNodes.length) {
                    parentEle.insertBefore(domContent, parentEle.childNodes[elePos]);
                    elePos = Array.from(parentEle.childNodes).indexOf(compNode);
                }

                if (content) {
                    this.addHiddenBoundEvents(compNode, content);
                    parentEle.insertBefore(content, parentEle.childNodes[elePos]);
                }

                elePos = Array.from(parentEle.childNodes).indexOf(compNode);
                parentEle.insertBefore(lastChild, parentEle.childNodes[elePos]);
                var parentHelper = compNode._parentHelper;
                if (parentHelper) {
                    if (parentHelper.tagName == "LYTE-YIELD") {
                        parentHelper._hiddenTemplate.push(compNode);
                    } else if (parentHelper._forContent) {
                        if (compNode._cx) {
                            var ind = compNode._cx.itemIndex;
                            // let eleArr = parentHelper._forContent[ind];
                            // eleArr.push(content.childNodes[i]);
                            if (!parentHelper._hiddenTemplate[ind]) {
                                parentHelper._hiddenTemplate[ind] = [];
                            }
                            parentHelper._hiddenTemplate[ind].push(compNode);
                        }
                    } else if (parentHelper._caseContent) {
                        // compNode._parentHelper._caseContent.push(content.childNodes[i]);
                        parentHelper._hiddenTemplate.push(compNode);
                    }
                    // else if(parentHelper._yieldContent) {
                    //     compNode._parentHelper._yieldContent.push(content.childNodes[i]);
                    // } else if(parentHelper._renderedComponent) {

                    // }
                } else if (compNode._callee) {
                    compNode._callee._hiddenTemplate.push(compNode);
                }
                hiddenDomDiv.content.appendChild(compNode);
                compNode._ignoreDisconnect = false;
                _LyteComponent._setIgnoreDisconnect(false);
                compNode.__lyteIgnore = false;
            }
        },
        "class": {
            addStaticValue: function addStaticValue(node) {
                if (node.hasAttribute("lyte-directive-class")) {
                    var classVal = node.getAttribute("lyte-directive-class");
                    node.setAttribute("class", classVal);
                    node._initialClassValue = classVal;
                }
            },
            addValue: function addValue(node) {
                if (node._transitionArgs && node._transitionArgs.class) {
                    node.setAttribute("class", node._transitionArgs.class);
                    node._initialClassValue = node._transitionArgs.class;
                }
            },
            updateValue: function updateValue(node) {
                if (node._transitionArgs && node._transitionArgs.class) {
                    var currentClassVal = node.getAttribute("class");
                    var oldClassVal = node._initialClassValue;
                    var externalClassVal = currentClassVal.substr(oldClassVal.length);
                    var newClassValue = node._transitionArgs.class;
                    var finalclassVal = newClassValue + externalClassVal;
                    node.setAttribute("class", finalclassVal);
                    node._initialClassValue = newClassValue;
                }
            } //,
            // addNodeLazy : function(arr, comp, info, dynamicN, helperNode, yieldComp ,options){
            //     arr.forEach(function(obj){
            //         let attr = obj.attr;
            //         let node = obj.node;
            //         if(attr.hookNode){
            //             _LC.directive.infoA(comp,info,dynamicN,helperNode,attr,yieldComp,options);
            //             if(attr.hookName == "class"){
            //                 if(staticProp){
            //                     _LC.directive.class.addStaticValue(dynamicN);
            //                 }else{
            //                     _LC.directive.class.addValue(node.ownerElement);
            //                 }
            //             }
            //         }
            //     })
            // },
        },
        registeredProp: {},
        compileNode: function compileNode(node, attr, toBeRemoved, toBeAdded, i, componentName) {
            // let specialAttr;
            // add = true;
            node._special = true;
            var attrToPush = {};
            attrToPush.name = node.attributes[i].name;
            if (attr[attrToPush.name] && attr[attrToPush.name].dynamicValue) {
                attrToPush.dynamicValue = attr[attrToPush.name].dynamicValue;
            } else if (attr[attrToPush.name] && attr[attrToPush.name].helperInfo) {
                attrToPush.helperInfo = attr[attrToPush.name].helperInfo;
            } else {
                attrToPush.stringValue = node.attributes[i].nodeValue;
                var ndName = node.attributes[i].nodeName;
                toBeRemoved.push(ndName);
                toBeAdded.push({ name: "lyte-directive-" + ndName.slice(1, ndName.length), value: attrToPush.stringValue });
                if (this.registeredProp[componentName].indexOf(attrToPush.stringValue) == -1) {
                    this.registeredProp[componentName].push(attrToPush.stringValue);
                }
            }
            attr[attrToPush.name] = attrToPush;
            attrToPush.hookNode = true;
            var hookName = node.attributes[i].name.slice(1, node.attributes[i].name.length);
            attrToPush.hookName = hookName;
            return {
                add: true,
                specialAttr: true,
                attrToPush: attrToPush
            };
        },
        isDirectiveNode: function isDirectiveNode(node) {
            if (node.hookNode || node.nodeName && node.nodeName.startsWith("@") || node._isDirectiveNode) {
                return true;
            }
            return false;
        },
        getActualTransitionArg: function getActualTransitionArg(attr, node) {
            if (attr.hasOwnProperty("dynamicValue") || attr.hasOwnProperty("helperInfo")) {
                if (node.hasOwnProperty("_transitionArgs")) {
                    if (node._transitionArgs.hasOwnProperty(attr.hookName)) {
                        return node._transitionArgs[attr.hookName];
                    }
                }
            } else if (attr.hasOwnProperty("stringValue")) {
                if (attr.hasOwnProperty("stringValue")) {
                    if (attr.stringValue === "") {
                        return true;
                    }if (attr.stringValue === "true") {
                        return true;
                    } else if (attr.stringValue === "false") {
                        return false;
                    } else {
                        return attr.stringValue;
                    }
                }
            }
        },
        getExactTransitionArg: function getExactTransitionArg(attr, node) {
            if (attr.hasOwnProperty("dynamicValue") || attr.hasOwnProperty("helperInfo")) {
                if (node.hasOwnProperty("_transitionArgs")) {
                    if (node._transitionArgs.hasOwnProperty(attr.hookName)) {
                        return node._transitionArgs[attr.hookName];
                    }
                }
            } else if (attr.hasOwnProperty("stringValue")) {
                if (attr.hasOwnProperty("stringValue")) {
                    if (attr.stringValue === "") {
                        if (node.id) {
                            attr.stringValue = node.id;
                        }
                    }
                    return attr.stringValue;
                }
            }
        },
        getTransitionArg: function getTransitionArg(node, directiveName, returnAttr) {
            var transitionArg = void 0;
            if (node.component && node.component.constructor._options) {
                this.setAttrFromRender(node);
            }
            var self = this;
            if (node._specialAttributeDetails) {
                node._specialAttributeDetails.forEach(function (attr) {
                    if (directiveName == attr.hookName) {
                        transitionArg = returnAttr ? attr : self.getActualTransitionArg(attr, node);
                        return;
                    }
                });
            }
            return transitionArg;
        },
        setNodeArgs: function setNodeArgs(node, nodeValue, comp) {
            // node.ownerElement._transitionArgs = nodeValue;
            var nodeName = node.nodeName;
            node.ownerElement.removeAttribute(nodeName);
            // node.nodeName = node.nodeName.slice(1,node.nodeName.length);
            if (!node.ownerElement._transitionArgs) {
                node.ownerElement._transitionArgs = {};
            }
            var actNodeName = nodeName;
            if (nodeName.startsWith("@")) {
                actNodeName = nodeName.slice(1, nodeName.length);
            }
            node.ownerElement._transitionArgs[actNodeName] = nodeValue;
            node.ownerElement.setAttribute("lyte-directive-" + actNodeName, actNodeName == "prop" || actNodeName == "data" ? nodeValue : "");
        },
        infoA: function infoA(comp, info, dynamicN, helperNode, attr, yieldComp, options) {
            this.setSpecialNodes(comp, helperNode, dynamicN, info, options);
            if (dynamicN._specialAttributeDetails && dynamicN._specialAttributeDetails.length) {
                dynamicN._specialAttributeDetails.push(attr);
            } else {
                dynamicN._specialAttributeDetails = [attr];
            }
            // if(yieldComp){
            //     yieldComp._transitionAppend.push(dynamicN);
            // }
            // else if(comp._transitionAppend.indexOf(dynamicN)==-1 && dynamicN && dynamicN.getAttribute("is") != "component"){
            //     comp._transitionAppend.push(dynamicN);
            // }
        },
        setSpecialNodes: function setSpecialNodes(comp, helperNode, dynamicN, info, options) {
            if (helperNode && (helperNode._hooksPresent || helperNode._defaultSetSpecialNode || dynamicN.hasAttribute("lyte-directive-prop") || dynamicN.hasAttribute("lyte-directive-data"))) {
                if (helperNode._specialNodes) {
                    if (helperNode.getAttribute("is") == "for") {
                        helperNode._specialNodes[options.itemIndex].push(dynamicN);
                    } else if (helperNode.getAttribute("is") == "forIn") {
                        helperNode._specialNodes[options.itemIndex].push(dynamicN);
                    } else if (helperNode && /if|switch/g.test(helperNode.getAttribute("is"))) {
                        helperNode._specialNodes.push(dynamicN);
                    } else if (helperNode && helperNode.tagName == "LYTE-YIELD") {
                        helperNode._specialNodes.push(dynamicN);
                    }
                }
            } else if (dynamicN && dynamicN._hooksPresent && comp._specialNodes) {
                comp._specialNodes.push(dynamicN);
                comp._hooksPresent = true;
                comp.hc = true;
            } else if (dynamicN && dynamicN._defaultSetSpecialNode && comp._specialNodes) {
                comp._specialNodes.push(dynamicN);
                comp._defaultSetSpecialNode = true;
            }
            // if(info.chld){
            //     dynamicN._chld = info.chld;
            // }
            // if(info.dc){
            //     dynamicN.dc = info.dc;
            //     dynamicN.hc = info.hc;
            // }
            // if(info.sibl){
            //     dynamicN._sibl = info.sibl;
            // }
        }
    }), _defineProperty(_LyteComponent2, "iterator", function iterator(isType, data, def) {
        if (isType == "for") {
            data.forEach(function (item, index) {
                def.apply(this, [item, index]);
            });
        } else if (isType == "forIn") {
            for (var index in data) {
                var _item21 = data[index];
                def.apply(this, [_item21, index]);
            }
        }
    }), _defineProperty(_LyteComponent2, "array", {
        initalize: function initalize(data, key) {
            if (!data[key]) {
                data[key] = [];
            }
        },
        checkAndPush: function checkAndPush(arr, val) {
            if (arr.indexOf(val) == -1) {
                arr.push(val);
            }
        }
    }), _defineProperty(_LyteComponent2, "object", {
        initalize: function initalize(data, key) {
            if (!data[key]) {
                data[key] = {};
            }
        }
    }), _defineProperty(_LyteComponent2, "styleSheet", {
        "preload": function preload(href) {
            var link = document.createElement('link');
            link.rel = 'preload';
            link.href = href;
            link.as = "style";
            var _res = void 0,
                _rej = void 0;
            var promise = new Promise(function (res, rej) {
                _res = res;
                _rej = rej;
            });
            link.onload = function () {
                _res();
            };
            link.onerror = function () {
                _rej();
            };
            _Lyte.$.assetsDiv.appendChild(link);
            return promise;
        }
    }), _LyteComponent2);
    var _LCSV = LyteComponent.directive.save;
    var _LCHD = LyteComponent.directive.hide;
    _Lyte.Component.appendChild = function () {
        return LyteComponent.shadow.appendChild.apply(LyteComponent.shadow, Array.from(arguments));
    };
    LyteComponent.appendChild = _Lyte.Component.appendChild;
    LyteComponent.globalEventHandler = globalEventHandler;
    LyteComponent.docCaptureGlobalEventHandler = docCaptureGlobalEventHandler;
    LyteComponent.docBubbleGlobalEventHandler = docBubbleGlobalEventHandler;
    LyteComponent.globalDOMEvents = globalDOMEvents;
    LyteComponent.changeEventHandler = changeEventHandler;
    if (window.isLyteWidget) {
        window.Component = LyteComponent.baseCompClass;
        window.Component.registerHelper = function () {
            return _LC.registerHelper.apply(_LC, arguments);
        };
    }
    _Lyte.typeCast = LyteComponent.typeCast;
    _Lyte.getDataType = LyteComponent.getDataType;
    _Lyte.Component._get = LyteComponent.get;
    _LyteComponent.chromeBugFix = function () {
        var version = userAgent.match(/Chrom(e|ium)\/([0-9]+)\./);;
        version = version ? parseInt(version[2], 10) : 0;
        if (version > 62) {
            this.chI = [];
            document.addEventListener("focus", function (event) {
                var target = event.target;
                if (target.tagName === "INPUT" || target.tagName === "TEXTAREA" || target.tagName === "DIV") {
                    if (Lyte.Component.chI.indexOf(target) == -1) {
                        Lyte.Component.chI.push(target);
                    }
                }
            }, true);
            this.chromeBugFix = function () {
                var tags = Lyte.Component.chI;
                var tagsL = tags.length;
                var toRemove = ["_callee", "_attributeDetails", "_attributes", "_removedAttributes", "_yields", "_rA", "_cx"]; //no i18n
                var toBeRemoved = [];
                var keepAliveInputs = [];
                document.querySelectorAll("[lyte-keep-alive]").forEach(function (item, index) {
                    for (var key in item._renderedComponent) {
                        keepAliveInputs.push.apply(keepAliveInputs, Array.from(item._renderedComponent[key].querySelectorAll("input")));
                    }
                });
                _LC.tDiv.content.querySelectorAll("[lyte-keep-alive]").forEach(function (item, index) {
                    for (var key in item._renderedComponent) {
                        keepAliveInputs.push.apply(keepAliveInputs, Array.from(item._renderedComponent[key].querySelectorAll("input")));
                    }
                });
                for (var i = tagsL - 1, item; item = tags[i]; i--) {
                    if (document.compareDocumentPosition(item) % 2 && keepAliveInputs.indexOf(item) == -1) {
                        tags.splice(i, 1);
                        item.remove();
                        toBeRemoved.push(item);
                        item._rA = item._rA || [];
                        item._rA.forEach(function (remAttr) {
                            //eslint-disable-line no-loop-func
                            remAttr.ownerElement = undefined;
                        });
                        toRemove.forEach(function (key) {
                            //eslint-disable-line no-loop-func
                            item[key] = undefined;
                        });
                        Array.from(item.attributes).forEach(function (itemVal) {
                            //eslint-disable-line no-loop-func
                            item.removeAttribute(itemVal.nodeName);
                        });
                    }
                }
            };
            Lyte.addEventListener("afterRouteTransition", function () {
                Lyte.Component.chromeBugFix();
            });
            Lyte.addEventListener("beforeRouteTransition", function () {
                Lyte.Component.viewPortSettings.resetLazy();
            });
            if (!Lyte.Router) {
                setInterval(function () {
                    // Lyte.Component.chromeBugFix();
                    LyteComponent.String.cache_c = {};
                    LyteComponent.String.cache_d = {};
                }, 300000);
            }
        }
    };
    LyteComponent.__data = [];
    LyteComponent.__dataNames = [];
    _LyteComponent.defineData = function (def) {
        _LC.__data.push(def);
        var dataNames = Object.keys(def);
        dataNames.forEach(function (name) {
            _LC.__dataNames.push(name);
        });
    };
    _Lyte.__lc = LyteComponent;
    var _LC = LyteComponent;
    _LCHD.define.remove(LyteYield);
    ltCf.instanciateBridge();
    var someFlag = false;

    customElements.define("lyte-safari-test-component", Test, undefined, _Lyte.isWidgetBuild ? { "widget": true } : { v3: true });
    var divTest = document.createElement("div");
    divTest.innerHTML = "<lyte-safari-test-component t></lyte-safari-test-component>";

    _LyteComponent.render = _LC.render;
    //Change it in v3.0 - Remove from LyteComponent scope. 
    _LyteComponent.insertBefore = _LC.insertBefore;
    _LyteComponent.insertAfter = _LC.insertAfter;
    _LyteComponent.replaceWith = _LC.replaceWith;
    _LyteComponent.appendChild = _LC.appendChild;
    _LC.tDiv = createElement("template");
    // _LC.tDiv = createElement("div");
    _LC.tDiv.setAttribute("id", "dummy-templates-div");
    // _LC.tDiv.setAttribute("style", "display:none");
    _LC.hDiv = createElement("template");

    // _LC.hDiv = createElement("div");
    _LC.hDiv.setAttribute("id", "keep-alive-div");
    // _LC.hDiv.setAttribute("style", "display:none");
    _LC.h1Div = createElement("template");

    // _LC.h1Div = createElement("div");
    _LC.h1Div.setAttribute("id", "lyte-helper-div");
    // _LC.h1Div.setAttribute("style", "display:none");
    Lyte.Compile.componentsDiv = _LC.lyteComponentsDiv = createElement("div");
    _LC.lyteComponentsDiv.setAttribute("id", "lyte-components-div");

    _LC.hiddenComponentsDiv = createElement("template");
    _LC.hiddenComponentsDiv.setAttribute("id", "hidden-component-div");

    _LC.hiddenYieldsDiv = createElement("template");
    _LC.hiddenYieldsDiv.setAttribute("id", "hidden-yields-div");

    Set.prototype.toArrayLyte = function () {
        if (this.constructor.name === "Set") {
            return Array.from(this);
        } else {
            return Array.from(this._values);
        }
    };
    //_LC.registerListener(function() {
    //  
    //});

    if (document.readyState === "complete" || document.readyState === "interactive") {
        onDomContentForLyte();
    } else {
        document.addEventListener("DOMContentLoaded", function (e) {
            onDomContentForLyte();
        }, true);
    }
    function createSvgDepth(actualTemplate, type) {
        var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        for (var s = 0; s < actualTemplate.childNodes.length; s++) {
            svg.appendChild(actualTemplate.childNodes[s].cloneNode(true));
        }
        var depthTemp = document.createElement("template");
        depthTemp.setAttribute("is", type);
        for (var s = 0; s < svg.childNodes.length; s++) {
            depthTemp.content.appendChild(svg.childNodes[s]);
            s--;
        }
        return depthTemp;
    }
    function createDepth(actualTemplate, type) {
        var depthTemp = document.createElement("template");
        depthTemp.setAttribute("is", type);
        depthTemp.innerHTML = actualTemplate.innerHTML;
        return depthTemp;
    }
    function appendDepth(depthTemp, constr) {
        constr.splitTextNodes(depthTemp);
        constr.component._depthTemp.content.appendChild(depthTemp);
    }
    function setHT(dynN, info, dynNewCompile, constr) {
        var flag = true;
        if (dynN.tagName == "TEMPLATE") {
            info._ht = dynN.innerHTML;
            flag = false;
        }
        if (info._ht) {
            if (flag) {
                dynN.innerHTML = info._ht;
                constr.splitTextNodes(dynN);
            }
            if (dynNewCompile && dynNewCompile.innerHTML !== info._ht) {
                dynNewCompile.innerHTML = info._ht;
                constr.splitTextNodes(dynNewCompile);
            }
        }
    }

    function doCompileHandling(dynamicN, dynamicNodes, componentName, constr, newCompile, j) {
        var lastUsedAttrPosition = void 0;
        var info = dynamicNodes[j],
            type = info.type,
            pos = info.position,
            helperInfo = void 0;
        var dynN = getDynamicNode(dynamicN, pos);
        var dynNewCompile = void 0;
        if (newCompile) {
            dynNewCompile = getDynamicNode(newCompile, pos);
        }
        switch (type) {
            case "text":
                {
                    var mustache = Lyte.Compile.getMustache(dynN.nodeValue),
                        dynamicValue = void 0,
                        helperFunc = void 0;
                    if (mustache) {
                        helperFunc = Lyte.Compile.getHelper(mustache);
                    }
                    var dynamic = mustache;
                    if (helperFunc) {
                        info.helperInfo = helperFunc;
                        if (dynNewCompile) {
                            info.newHelperInfo = Lyte.Compile.getHelper(mustache, true);
                            _LC.replaceWithPf(dynNewCompile, document.createTextNode("__**--Lyte" + j + "__**"));
                        }
                    } else if (dynamic) {
                        //deepNodes.push({type: "text", position:deepN.slice(), dynamicValue: dynamic});
                        info.dynamicValue = dynamic;
                        info.newDynamicValue = _LC.getDV(dynamic);
                        if (dynNewCompile) {
                            _LC.replaceWithPf(dynNewCompile, document.createTextNode("__**--Lyte" + j + "__**"));
                        }
                        //              LN to do
                        //              deepNodes.push({type: "text", position:deepN.slice(), dynamicValue: getDV(dynamic)});                    
                    }
                }
                break;
            case "insertYield":
                {
                    if (dynNewCompile) {
                        dynNewCompile.appendChild(document.createTextNode("__**--Lyte" + j + "__**"));
                        var yieldAttr = dynNewCompile.attributes["yield-name"];
                        info.yieldName = yieldAttr ? yieldAttr.nodeValue : undefined;
                    }
                }
                break;
            case "componentDynamic":
                {
                    if (_Lyte.isWidgetBuild) {
                        dynN.setAttribute("lyte-widget", "");
                    }
                    if (dynNewCompile) {
                        if (_Lyte.isWidgetBuild) {
                            dynNewCompile.setAttribute("lyte-widget", "");
                        }
                        dynNewCompile.appendChild(document.createTextNode("__**--Lyte" + j + "__**"));
                        info.componentName = dynNewCompile.localName;
                        var attrs = Array.from(dynNewCompile.attributes);
                        info.staticAttrs = {};
                        for (var i = 0; i < attrs.length; i++) {
                            info.staticAttrs[_LC.String.toCamelCase(attrs[i].nodeName)] = attrs[i].nodeValue;
                        }
                        delete info.staticAttrs._lyteprop;
                    }
                }
                break;
            case "attr":
                {
                    var add = false,
                        toBeRemoved = [],
                        toBeAdded = [];
                    var node = dynN;
                    var attr = info.attr = info.attr || {};
                    for (var _i106 = 0; _i106 < node.attributes.length; _i106++) {
                        if (node.attributes[_i106].nodeValue.indexOf("{{") !== -1) {
                            var val = node.attributes[_i106].nodeValue;
                            var actValue = Lyte.Compile.getMustache(val),
                                actObj = void 0;
                            if (actValue) {
                                actObj = Lyte.Compile.getHelper(actValue);
                            } else if (/{{.*}}/.test(val) && !/\\{{.*}}/.test(val)) {
                                actObj = Lyte.Compile.splitMixedText(val);
                            }
                            if (actObj && (actObj.name === "action" || actObj.name === "method") && /^(onfocus|onfocusin|onfocusout|onresize|onscroll|onclick|ondblclick|onmousedown|onmouseup|onmousemove|onmouseover|onmouseout|onchange|onselect|onsubmit|onkeydown|onkeypress|onkeyup|oncontextmenu|__focus|__focusin|__focusout|__resize|__scroll|__click|__dblclick|__mousedown|__mouseup|__mousemove|__mouseover|__mouseout|__change|__select|__submit|__keydown|__keypress|__keyup|__contextmenu)$/.test(node.attributes[_i106].name)) {
                                attr[node.attributes[_i106].name.substr(2)] = { name: node.attributes[_i106].name.substr(2), camelCase: _LC.String.toCamelCase(node.attributes[_i106].name.substr(2)), helperInfo: actObj, newHelperInfo: Lyte.Compile.getHelper(actValue, true), globalEvent: true };

                                var actArgs = _Lyte.deepCopyObject(actObj.args);
                                var actName = actArgs.splice(0, 1)[0];
                                actName = actName.startsWith("'") ? actName.replace(/'/g, '') : actName;
                                var actString = getArgString(actName, actArgs);
                                node.setAttribute(node.attributes[_i106].name.substr(2), componentName + " => " + actString);
                                if (dynNewCompile) {
                                    dynNewCompile.setAttribute(node.attributes[_i106].name.substr(2), componentName + " => " + actString);
                                }
                                toBeRemoved.push(node.attributes[_i106].name);
                            } else {
                                if (actObj || actValue) {
                                    var _attrToPush = {};

                                    if (node.attributes[_i106].name.startsWith("lbind:")) {
                                        toBeRemoved.push(node.attributes[_i106].name);
                                        toBeAdded.push({ "name": node.attributes[_i106].name.substring(6), "value": node.attributes[_i106].nodeValue });
                                        _attrToPush.isLbind = true;
                                        _attrToPush.name = node.attributes[_i106].name.substring(6);
                                        _attrToPush.camelCase = _LC.String.toCamelCase(_attrToPush.name);
                                    } else {
                                        _attrToPush.name = node.attributes[_i106].name;
                                        _attrToPush.camelCase = _LC.String.toCamelCase(_attrToPush.name);
                                    }
                                    if (actObj) {
                                        if (actObj.name === "lbind") {
                                            _attrToPush.dynamicValue = actObj.args[0];
                                            _attrToPush.newDynamicValue = _LC.getDV(actObj.args[0]);
                                            _attrToPush.isLbind = true;
                                        } else {
                                            _attrToPush.helperInfo = actObj;
                                            _attrToPush.newHelperInfo = Lyte.Compile.getHelper(actValue, true);
                                        }
                                    } else {
                                        _attrToPush.dynamicValue = actValue;
                                        //                              LN to do
                                        _attrToPush.newDynamicValue = _LC.getDV(actValue);
                                    }
                                    add = true;
                                    attr[_attrToPush.name] = _attrToPush;
                                }
                            }
                        }
                        if (node.attributes[_i106].name.startsWith("@")) {
                            var rt = _LC.directive.compileNode(node, attr, toBeRemoved, toBeAdded, _i106, componentName);
                            add = rt.add;
                            attrToPush = rt.attrToPush;
                        }
                    }
                    if (toBeRemoved.length) {
                        for (var _i107 = 0; _i107 < toBeRemoved.length; _i107++) {
                            node.removeAttribute(toBeRemoved[_i107]);
                            if (dynNewCompile) {
                                dynNewCompile.removeAttribute(toBeRemoved[_i107]);
                            }
                        }
                    }
                    if (dynNewCompile) {
                        for (var _key47 in attr) {
                            dynNewCompile.removeAttribute(_key47);
                        }
                        dynNewCompile.setAttribute("_lyteAttr", "__**--Lyte" + j + "__**", "");
                    }
                    if (toBeAdded.length) {
                        for (var _i108 = 0; _i108 < toBeAdded.length; _i108++) {
                            node.setAttribute(toBeAdded[_i108].name, toBeAdded[_i108].value);
                        }
                    }
                }
                break;
            case "for":
            case "forIn":
            case "registerYield":
                setHT(dynN, info, dynNewCompile, constr);
            case "component":
                {
                    var actualTemplate = _Lyte._ie ? dynN : dynN.content;
                    if (!dynNewCompile && (type == "registerYield" || dynN.hasAttribute("unbound"))) {
                        if (_Lyte._ms) {
                            dynNewCompile = document.createElement("div");
                            dynNewCompile.innerHTML = info.actualTemplate ? info.actualTemplate : dynN.outerHTML;
                            dynNewCompile = dynNewCompile.childNodes[0];
                            constr.splitTextNodes(dynNewCompile);
                        } else {
                            dynNewCompile = dynN.cloneNode(true);
                        }
                    }
                    var depthTemp = void 0;
                    var dnNode = void 0;
                    var actualTemplateNewCompile = dynNewCompile ? _Lyte._ie ? dynNewCompile : dynNewCompile.content : undefined;
                    var args = {};
                    if (info.actualTemplate) {
                        actualTemplate = _LC.getContentForIE(info.actualTemplate, constr, undefined, _Lyte._ms ? info : undefined);
                        if (dynNewCompile) {
                            actualTemplateNewCompile = _LC.getContentForIE(info.actualTemplate, constr);
                        }
                    }
                    if ((window.isLyteWidget || window.__lyteEnablePromise) && dynN.hasAttribute("has-child")) {
                        var dynNContent = dynN.content || dynN;
                        for (var _key48 in info.cases) {
                            var contentNewCompile = void 0;
                            var content = _LC.getContentForIE(actualTemplate.querySelector("[case='" + _LC.cssEscape(_key48) + "']"), undefined, true);
                            setHT(content, info.cases[_key48], contentNewCompile, constr);
                            var gen = doCompile(content.tagName === "TEMPLATE" ? content.content : content, info.cases[_key48].dynamicNodes, componentName, constr, contentNewCompile);
                            var gnxt = gen.next(),
                                gval;
                            while (gnxt.done == false) {
                                gval = gnxt.value;
                                if (typeof gval == "function") {
                                    gval();
                                }
                                gnxt = gen.next();
                            }
                            if (info.cases[_key48]._ht) {
                                info.cases[_key48]._ht = content.cloneNode(true);
                                constr._helperTemplate.content.append(info.cases[_key48]._ht);
                                content.innerHTML = "";
                            }
                        }
                    } else {
                        var gen = doCompile(actualTemplate, info.dynamicNodes, componentName, constr, actualTemplateNewCompile, info);
                        var gnxt = gen.next(),
                            gval;
                        while (gnxt.done == false) {
                            gval = gnxt.value;
                            if (typeof gval == "function") {
                                gval();
                            }
                            gnxt = gen.next();
                        }
                    }
                    if (actualTemplateNewCompile) {
                        var staticTemp = info.actualTemplate ? actualTemplateNewCompile : dynNewCompile;
                        info._sta = _LC.processStatic(staticTemp);
                    }
                    if (_Lyte._ms) {
                        if (info.actualTemplate) {
                            info.templateContent = actualTemplate.outerHTML;
                            if (info._content) {
                                info.actualTemplate = info._content.innerHTML;
                                delete info._content;
                            }
                        } else {
                            info.templateContent = dynN.outerHTML;
                        }
                        dynN.innerHTML = "";
                    }
                    if (info.actualTemplate) {
                        depthTemp = type;
                        if (!_Lyte._ie) {
                            if (info.svg) {
                                depthTemp = createSvgDepth(actualTemplate, type);
                            } else {
                                depthTemp = createDepth(actualTemplate, type);
                            }
                            appendDepth(depthTemp, constr);
                        }
                        if (dynamicNodes[j - 1] && dynamicNodes[j - 1].position.toString() === dynamicNodes[j].position.toString()) {
                            dnNode = dynamicNodes[j - 1];
                        } else {
                            dnNode = dynamicNodes[j];
                        }
                        dnNode._depthTemp = depthTemp;
                    }

                    if (dynNewCompile) {
                        info._args = {};
                        if (type === "registerYield") {
                            //dynNewCompile.parentNode.parentNode.insertBefore(document.createTextNode("__**--Lyte"+j+"__**"), dynNewCompile.parentNode);
                            //dynNewCompile.parentNode.setAttribute("_lyteyield", "");
                            //_LC.replaceWithPf(dynNewCompile, document.createTextNode(""));
                            _LC.replaceWithPf(dynNewCompile, document.createTextNode("__**--Lyte" + j + "__**"));
                        } else if (type === "component") {
                            _LC.replaceWithPf(dynNewCompile, document.createTextNode((dynNewCompile.hasAttribute("_lyteattr") ? dynNewCompile.getAttribute("_lyteattr") : "") + "__**--Lyte" + j + "__**"));
                        } else {
                            //dynNewCompile.replaceWith(document.createTextNode("__**--Lyte"+j+"__**"))
                            _LC.replaceWithPf(dynNewCompile, document.createTextNode("__**--Lyte" + j + "__**"));
                        }
                        /* disable async function */
                        Array.from(dynNewCompile.attributes).forEach(function (item) {
                            //eslint-disable-line no-loop-func
                            info._args[item.nodeName] = item.nodeValue;
                        });
                    }
                    if (info._ht) {
                        info._ht = dynN.cloneNode(true);
                        constr._helperTemplate.content.append(info._ht);
                        dynN.innerHTML = "";
                    }
                    //  When a registerYield is present inside another registerYield, in fastRender, we will not be able to get the template using the positions and parentComponent alone, since the insertYield is present inside the insertYield of the parent component. 
                    // info.actYield = dynN;
                }
                break;
            case "if":
            case "switch":
                {
                    setHT(dynN, info, dynNewCompile, constr);
                    var oldDyn = dynN;
                    var _depthTemp = void 0;
                    var actualTemplateNewCompile = dynNewCompile ? _Lyte._ie ? dynNewCompile : dynNewCompile.content : undefined;
                    if (info.actualTemplate) {
                        dynN = _LC.getContentForIE(info.actualTemplate, constr, undefined);
                        if (dynNewCompile) {
                            var dummy = _LC.getContentForIE(info.actualTemplate, constr);
                            actualTemplateNewCompile = _Lyte._ie ? dummy : dummy.content;
                        }
                    }
                    var def = "default";
                    if (_Lyte._ms) {
                        var cases = {};
                        var defCase;
                        var dynNchildNodes = _Lyte._ed ? dynN.content.childNodes : dynN.childNodes;
                        for (var i = 0; i < dynNchildNodes.length; i++) {
                            if (dynNchildNodes[i].tagName === "TEMPLATE") {
                                if (dynNchildNodes[i].getAttribute("case")) {
                                    cases[dynNchildNodes[i].getAttribute("case")] = dynNchildNodes[i];
                                } else if (dynNchildNodes[i].hasAttribute("default")) {
                                    defCase = dynNchildNodes[i];
                                }
                            }
                        }
                        for (var _key49 in info.cases) {
                            var _contentNewCompile = void 0;
                            content = _LC.getContentForIE(cases[_key49], undefined, true);
                            if (actualTemplateNewCompile) {
                                _contentNewCompile = _LC.getContentForIE(actualTemplateNewCompile.querySelector("[case='" + LyteComponent.cssEscape(_key49) + "']"));
                            }
                            setHT(content, info.cases[_key49], _contentNewCompile, constr);
                            var gen = doCompile(content, info.cases[_key49].dynamicNodes, componentName, constr, _contentNewCompile ? _LC.getContentForIE(_contentNewCompile) : undefined);
                            var gnxt = gen.next(),
                                gval;
                            while (gnxt.done == false) {
                                gval = gnxt.value;
                                if (typeof gval == "function") {
                                    gval();
                                }
                                gnxt = gen.next();
                            }
                            cases[_key49].remove();
                            if (actualTemplateNewCompile) {
                                info.cases[_key49]._sta = _LC.processStatic(_contentNewCompile);
                            }
                            info.cases[_key49].templateContent = cases[_key49].outerHTML;
                        }
                        if (info[def].dynamicNodes) {
                            var _contentNewCompile2 = void 0;
                            content = _LC.getContentForIE(defCase, undefined, true);
                            if (actualTemplateNewCompile) {
                                _contentNewCompile2 = actualTemplateNewCompile.querySelector("[default]");
                            }
                            setHT(content, info[def], _contentNewCompile2, constr);
                            var gen = doCompile(content, info[def].dynamicNodes, componentName, constr, _contentNewCompile2 ? _LC.getContentForIE(_contentNewCompile2) : undefined);
                            var gnxt = gen.next(),
                                gval;
                            while (gnxt.done == false) {
                                gval = gnxt.value;
                                if (typeof gval == "function") {
                                    gval();
                                }
                                gnxt = gen.next();
                            }
                            defCase.remove();
                            info[def].templateContent = defCase.outerHTML;
                            if (actualTemplateNewCompile) {
                                info[def]._sta = _LC.processStatic(_contentNewCompile2);
                            }
                        }
                    } else {
                        var dynNContent = dynN.content || dynN;
                        for (var _key50 in info.cases) {
                            var _contentNewCompile3 = void 0;
                            if (actualTemplateNewCompile) {
                                _contentNewCompile3 = _LC.getContentForIE(actualTemplateNewCompile.querySelector("[case='" + LyteComponent.cssEscape(_key50) + "']"));
                            }
                            var content = _LC.getContentForIE(dynNContent.querySelector("[case='" + _LC.cssEscape(_key50) + "']"), undefined, true);
                            setHT(content, info.cases[_key50], _contentNewCompile3, constr);
                            var gen = doCompile(content.tagName === "TEMPLATE" ? content.content : content, info.cases[_key50].dynamicNodes, componentName, constr, _contentNewCompile3);
                            var gnxt = gen.next(),
                                gval;
                            while (gnxt.done == false) {
                                gval = gnxt.value;
                                if (typeof gval == "function") {
                                    gval();
                                }
                                gnxt = gen.next();
                            }
                            if (actualTemplateNewCompile) {
                                info.cases[_key50]._sta = _LC.processStatic(_contentNewCompile3);
                            }
                            if (info.cases[_key50]._ht) {
                                info.cases[_key50]._ht = content.cloneNode(true);
                                constr._helperTemplate.content.append(info.cases[_key50]._ht);
                                content.innerHTML = "";
                            }
                        }
                        if (info[def].dynamicNodes) {
                            var _contentNewCompile4 = void 0;
                            if (actualTemplateNewCompile) {
                                _contentNewCompile4 = _LC.getContentForIE(actualTemplateNewCompile.querySelector("[default]"));
                            }
                            var content = _LC.getContentForIE(dynNContent.querySelector("[default]"), undefined, true);
                            setHT(content, info[def], _contentNewCompile4, constr);
                            var gen = doCompile(content.tagName === "TEMPLATE" ? content.content : content, info[def].dynamicNodes, componentName, constr, _contentNewCompile4);
                            var gnxt = gen.next(),
                                gval;
                            while (gnxt.done == false) {
                                gval = gnxt.value;
                                if (typeof gval == "function") {
                                    gval();
                                }
                                gnxt = gen.next();
                            }
                            if (actualTemplateNewCompile) {
                                info[def]._sta = _LC.processStatic(_contentNewCompile4);
                            }
                            if (info[def]._ht) {
                                info[def]._ht = content.cloneNode(true);
                                constr._helperTemplate.content.append(info[def]._ht);
                                content.innerHTML = "";
                            }
                        }
                    }

                    if (info.actualTemplate) {
                        _depthTemp = type;
                        if (!_Lyte._ie) {
                            if (info.svg) {
                                _depthTemp = createSvgDepth(dynN.content, type);
                            } else {
                                _depthTemp = createDepth(dynN, type);
                            }
                            appendDepth(_depthTemp, constr);
                        }
                        if (dynamicNodes[j - 1] && dynamicNodes[j - 1].position.toString() === dynamicNodes[j].position.toString()) {
                            dynamicNodes[j - 1]._depthTemp = _depthTemp;
                        } else {
                            dynamicNodes[j]._depthTemp = _depthTemp;
                        }
                    }

                    if (dynNewCompile) {
                        _LC.replaceWithPf(dynNewCompile, document.createTextNode("__**--Lyte" + j + "__**"));
                    }
                    if (info._ht) {
                        info._ht = dynN.cloneNode(true);
                        constr._helperTemplate.content.append(info._ht);
                        dynN.innerHTML = "";
                    }
                }
                break;
        }
    }

    function doCompile(dynamicN, dynamicNodes, componentName, constr, newCompile) {
        var _this19 = this;

        var lastUsedAttrPosition, _loop5, j;

        return regeneratorRuntime.wrap(function doCompile$(_context5) {
            while (1) {
                switch (_context5.prev = _context5.next) {
                    case 0:
                        lastUsedAttrPosition = void 0;

                        if (!(dynamicNodes && dynamicNodes.length)) {
                            _context5.next = 11;
                            break;
                        }

                        _loop5 = /*#__PURE__*/regeneratorRuntime.mark(function _loop5(j) {
                            return regeneratorRuntime.wrap(function _loop5$(_context4) {
                                while (1) {
                                    switch (_context4.prev = _context4.next) {
                                        case 0:
                                            _context4.next = 2;
                                            return function () {
                                                doCompileHandling(dynamicN, dynamicNodes, componentName, constr, newCompile, j);
                                            };

                                        case 2:
                                        case 'end':
                                            return _context4.stop();
                                    }
                                }
                            }, _loop5, _this19);
                        });
                        j = 0;

                    case 4:
                        if (!(j < dynamicNodes.length)) {
                            _context5.next = 9;
                            break;
                        }

                        return _context5.delegateYield(_loop5(j), 't0', 6);

                    case 6:
                        j++;
                        _context5.next = 4;
                        break;

                    case 9:
                        _context5.next = 13;
                        break;

                    case 11:
                        _context5.next = 13;
                        return "";

                    case 13:
                    case 'end':
                        return _context5.stop();
                }
            }
        }, _marked, this);
    }

    _LC.doCompile = doCompile;
    //This is the function where the actual rendering takes place. 
    //It takes the template, finds the actual dynamic nodes uwing dynamicNodes argument and then binds each node with the associated
    //property by calling bindNode. 

    function getDynamicNode(content, positions) {
        var dynamicN = content;
        for (var i = 0; i < positions.length; i++) {
            dynamicN = dynamicN.tagName != "TEMPLATE" || _Lyte._ie ? dynamicN.childNodes[positions[i]] : dynamicN.content.childNodes[positions[i]];
        }
        return dynamicN;
    }

    function getArgString(name, array) {
        var retString = void 0;
        for (var _i109 = 0; _i109 < array.length; _i109++) {
            if (array[_i109] && _typeof(array[_i109]) === "object") {
                array[_i109] = getArgString(array[_i109].value.name, array[_i109].value.args);
            }
        }
        if (name) {
            retString = name + "(" + array.toString() + ")";
        } else {
            retString = array.toString();
        }
        return retString;
    }

    _LC[registerHelperStr]("unbound", function (value) {
        return value;
    });

    _LC[registerHelperStr]("action", function (parentNode, attrName, isCustom, actObj) {
        if (isCustom) {
            parentNode._actions = parentNode._actions ? parentNode._actions : {};
            if (!parentNode._actions[attrName]) {
                this.createCustomEvent(attrName, parentNode, actObj);
                parentNode.removeAttribute(attrName);
            }
        } else {

            this.createEventListeners(parentNode, attrName, actObj);
        }
    });

    _LC[registerHelperStr]("lbind", function (name) {
        return this.getData(name);
    });

    _LC[registerHelperStr]("method", function (parentComponent, attributeNode, functionName) {
        var parentComponent = arguments[0];
        var attributeNode = arguments[1];
        var functionName = arguments[2];
        var self = arguments[0].component;
        var childComponent = attributeNode ? attributeNode.ownerElement : null;
        var attributeName = arguments[1].nodeName;
        attributeNode = null;
        var args = Array.prototype.slice.call(arguments, 2);
        var newFunc = function newFunc() {
            var node = this.$node;
            var contextSwitchArray = [];
            _LC.adCx(node, contextSwitchArray);
            var processedArgs = this.$node._callee.processArgs(this.$node._callee, { "helperInfo": { "args": args } }, [], undefined, this.$node);
            var functionName1 = processedArgs.splice(0, 1)[0];
            _LC.rmCx(node, contextSwitchArray);
            var customArgs = Array.from(arguments);
            var mainArgs = processedArgs.concat(customArgs);
            if (self.$node._methods[functionName1]) {
                return self.$node._methods[functionName1].apply(self, mainArgs);
            }
            _Lyte.error("LC009", functionName, self.$node.tagName);
        };
        if (childComponent) {
            if (!childComponent.set) {
                childComponent.setMethods(_LC.String.toCamelCase(attributeName), newFunc);
            } else {
                childComponent._methods[_LC.String.toCamelCase(attributeName)] = newFunc;
            }
        } else {
            return newFunc;
        }
    });

    _LC[registerHelperStr]("stringifyHTML", function () {
        // unescapeAttr renderString printHTML showString showHTML returnHTML stringifyHTML
        return Lyte.Component.registeredHelpers.unescape.apply(this, arguments).innerHTML;
    });

    _LC[registerHelperStr]("unescapeAttr", function () {
        // debugger
        return Lyte.Component.registeredHelpers.unescape.apply(this, arguments).innerHTML;
    });
    _LC[registerHelperStr]("unescape", function (value, additionalObject, userInstance, options) {
        if (_LC.ffr) {
            return value;
        }
        if (window.isLyteWidget) {
            Lyte.Security.ignoreSanitizer = true;
        }
        if (Lyte.Security.ignoreSanitizer && !(options && options.force)) {
            var _divEle = document.createElement("div");
            _divEle.innerHTML = value;
            return _divEle;
        } else {
            if (additionalObject && Object.keys(additionalObject) && Object.keys(additionalObject).length > 0) {
                if (Object(additionalObject.GLOBAL_TAGS).length > 0) {
                    var index = additionalObject.GLOBAL_TAGS.indexOf("link-to");
                    if (index != -1) {
                        additionalObject.GLOBAL_TAGS.splice(index, 1);
                    }
                }
                if (additionalObject && additionalObject.GLOBAL_ATTRIBUTES && Object.keys(additionalObject.GLOBAL_ATTRIBUTES).length > 0) {
                    var arr = ["is", "yield-name", "lt-prop-route", "lt-prop-dp", "lt-prop-fragment", "lt-prop-qp", "lt-prop", "lt-prop-class", "lt-prop-id", "lt-prop-rel", "lt-prop-title", "lt-prop-style", "lt-prop-target", "lt-prop-td", "lt-prop-custom", "lt-prop-target", "lt-prop-id", "lt-prop-class", "lt-prop-style", "lt-prop-rel", "lt-prop-title"];
                    for (var i = 0; i < arr.length; i++) {
                        var index = additionalObject.GLOBAL_ATTRIBUTES.indexOf(arr[i]);
                        if (index != -1) {
                            additionalObject.GLOBAL_ATTRIBUTES.splice(index, 1);
                        }
                    }
                }
            }
            if (additionalObject && additionalObject.GLOBAL_TAGS) {
                //this if check is inorder to getobserved attributes given in globaltags
                if (additionalObject.GLOBAL_ATTRIBUTES == undefined) {
                    additionalObject.GLOBAL_ATTRIBUTES = [];
                }
                var globalTagArr = Array.from(additionalObject.GLOBAL_TAGS);
                var attr = [];
                for (var a = 0; a < globalTagArr.length; a++) {
                    if (LyteComponent._registeredComponents[globalTagArr[a]]) {
                        attr = LyteComponent._registeredComponents[globalTagArr[a]].observedAttributes;
                    } else if (Lyte.registeredCustomComponent[globalTagArr[a]]) {
                        if (Lyte.registeredCustomComponent[globalTagArr[a]].observedAttributes) {
                            attr = Lyte.registeredCustomComponent[globalTagArr[a]].observedAttributes;
                        } else {
                            attr = [];
                        }
                    }
                    for (var i = 0; i < attr.length; i++) {
                        if (additionalObject.GLOBAL_ATTRIBUTES.indexOf(attr[i]) == -1) {
                            additionalObject.GLOBAL_ATTRIBUTES.push(attr[i]);
                        }
                    }
                }
            }
            var divEle = document.createElement("div");
            if (userInstance && Object.keys(userInstance).length) {
                if (additionalObject && Object.keys(additionalObject).length) {
                    Lyte.Security.addGlobalObject(userInstance, additionalObject);
                    var clean = userInstance.sanitize(value);
                    Lyte.Security.removeGlobalObject(userInstance, additionalObject);
                } else {
                    var clean = userInstance.sanitize(value);
                }
            } else {
                if (additionalObject && Object.keys(additionalObject).length) {
                    Lyte.Security.addGlobalObject(Lyte.Security._ourSanitizerInstance_, additionalObject);
                    var clean = Lyte.Security._ourSanitizerInstance_.sanitize(value);
                    Lyte.Security.removeGlobalObject(Lyte.Security._ourSanitizerInstance_, additionalObject);
                } else {
                    var clean;
                    if (window.isLyteWidget) {
                        clean = value;
                    } else {
                        clean = Lyte.Security._ourSanitizerInstance_.sanitize(value);
                    }
                }
            }
            divEle.innerHTML = clean;
            return divEle;
        }
    });
    if (!window.isLyteWidget) {
        _LC[registerHelperStr]("escape", function (value, type) {
            if (type == 'url') {
                return ZWAF['7_0_0'].Encoder.encodeForHTMLAttribute(value);
            } else if (type == 'js') {
                return ZWAF['7_0_0'].Encoder.encodeForJavaScript(value);
            } else if (type == 'css') {
                return ZWAF['7_0_0'].Encoder.encodeForCSS(value);
            } else {
                return value;
            }
        });
    }

    _LC[registerHelperStr]("debugger", function () {
        debugger;
    });

    _LC[registerHelperStr]("log", function () {
        console.log.apply(window, Array.from(arguments));
    });

    _LC[registerHelperStr]("ifEquals", function (arg1, arg2) {
        if (arg1 === arg2) {
            return true;
        } else {
            return false;
        }
    });

    _LC[registerHelperStr]("if", function (value, trueValue, falseValue) {
        if (value) {
            return trueValue;
        } else {
            return falseValue;
        }
    });

    _LC[registerHelperStr]("negate", function (arg1) {
        return !arg1;
    });

    _LC[registerHelperStr]("ifNotEquals", function (arg1, arg2) {
        if (arg1 === arg2) {
            return false;
        } else {
            return true;
        }
    });

    _LC[registerHelperStr]('concat', function () {
        var resp = '';
        var argLength = arguments.length;
        for (var i = 0; i < argLength; i++) {
            if (arguments[i] != undefined) {
                resp += arguments[i];
            }
        }
        return resp;
    });
    _LC[registerHelperStr]('toString', function (obj) {
        if (obj === null || obj === undefined) {
            return "";
        } else if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) == "object") {
            return JSON.stringify(obj);
        }
        return obj;
    });

    defProp(HTMLElement.prototype, 'setData', {
        writable: true,
        configurable: true,
        enumerable: false,
        value: function value(arg0, arg1) {
            this._initProperties = this._initProperties || {};
            if (typeof arg0 === "string") {
                if (window.isLyteWidget && this.tagName != "TEMPLATE") {
                    DataBindingLayer.updateInitProperties(this, arg0, arg1);
                }
                this._initProperties[arg0] = arg1;
            } else if ((typeof arg0 === 'undefined' ? 'undefined' : _typeof(arg0)) === "object") {
                for (var _key51 in arg0) {
                    if (window.isLyteWidget && this.tagName != "TEMPLATE") {
                        DataBindingLayer.updateInitProperties(this, _key51, arg0[_key51]);
                    }
                    this._initProperties[_key51] = arg0[_key51];
                }
            }
        }
    });

    defProp(HTMLElement.prototype, 'setMethods', {
        configurable: true,
        writable: true,
        enumerable: false,
        value: function value(arg0, arg1) {
            this._initMethods = this._initMethods || {};
            if (typeof arg0 === "string") {
                this._initMethods[arg0] = arg1;
            } else if ((typeof arg0 === 'undefined' ? 'undefined' : _typeof(arg0)) === "object") {
                for (var _key52 in arg0) {
                    this._initMethods[_key52] = arg0[_key52];
                }
            }
        }
    });

    if (!window.isLyteWidget) {
        _LC[registerHelperStr]('encAttr', function (val) {
            return ZWAF['7_0_0'].Encoder.encodeForHTMLAttribute(encodeURIComponent(val));
        });
    }

    _LC[registerHelperStr]('expHandlers', function (leftOperand, operator, rightOperand, nextOperand) {
        var argLen = arguments.length;
        if (operator == '++') {
            if (rightOperand == "postfix") {
                return leftOperand++;
            } else if (rightOperand == "prefix") {
                return ++leftOperand;
            }
        } else if (operator == "--") {
            if (rightOperand == "postfix") {
                return leftOperand--;
            } else if (rightOperand == "prefix") {
                return --leftOperand;
            }
        } else if (operator == "==") {
            return leftOperand == rightOperand;
        } else if (operator == "===") {
            return leftOperand === rightOperand;
        } else if (operator == "!=") {
            return leftOperand != rightOperand;
        } else if (operator == "!==") {
            return leftOperand !== rightOperand;
        } else if (operator == "&&") {
            return leftOperand && rightOperand;
        } else if (operator == "||") {
            return leftOperand || rightOperand;
        } else if (operator == "+") {
            if (argLen > 2) {
                return leftOperand + rightOperand;
            }
            return leftOperand;
        } else if (operator == '-') {
            if (argLen > 2) {
                return leftOperand - rightOperand;
            }
            return -leftOperand;
        } else if (operator == '*') {
            return leftOperand * rightOperand;
        } else if (operator == "/") {
            return leftOperand / rightOperand;
        } else if (operator == "%") {
            return leftOperand % rightOperand;
        } else if (operator == "<") {
            return leftOperand < rightOperand;
        } else if (operator == ">") {
            return leftOperand > rightOperand;
        } else if (operator == "<=") {
            return leftOperand <= rightOperand;
        } else if (operator == ">=") {
            return leftOperand >= rightOperand;
        } else if (operator == '|') {
            return leftOperand | rightOperand;
        } else if (operator == '&') {
            return leftOperand & rightOperand;
        } else if (operator == "!") {
            return !leftOperand;
        } else if (operator == '=') {
            leftOperand = rightOperand;
            return leftOperand;
        } else if (operator == "+=") {
            return leftOperand += rightOperand;
        } else if (operator == '-=') {
            return leftOperand -= rightOperand;
        } else if (operator == "*=") {
            return leftOperand *= rightOperand;
        } else if (operator == '/=') {
            return leftOperand /= rightOperand;
        } else if (operator == '?:') {
            return leftOperand ? rightOperand : nextOperand;
        }
    });

    _LyteComponent.register("lyte-event-listener", {
        _template: "<template tag-name=\"lyte-event-listener\"></template>",
        _dynamicNodes: [],
        _observedAttributes: ['eventName'],
        init: function init() {
            var self = this;
            var regId = _Lyte.addEventListener(this.get('eventName'), function () {
                var args = Array.prototype.slice.call(arguments);
                args.splice(0, 0, 'on-fire');
                self.throwEvent.apply(self, args);
            });
            //this.set('regId', regId);
            this.regId = regId;
        },
        data: function data() {
            return {
                "eventName": _Lyte.attr("string")
            };
        },
        didDestroy: function didDestroy() {
            _Lyte.removeEventListener(this.regId);
        }
    });

    _LyteComponent.registerCustomPropHandler("ltProp");

    _LyteComponent.shouldIgnoreDisconnect = function () {
        return _LC.ignoreDisconnect || ltCf.ignoreDisconnect;
    };
    _LyteComponent._setIgnoreDisconnect = function (val) {
        _LC.ignoreDisconnect = ltCf.ignoreDisconnect = val;
    };

    _LyteComponent.addLyteEventListener = function (element, eventName, func, context) {
        element._lyteEvents = element._lyteEvents || {};
        element._lyteEvents[eventName] = element._lyteEvents[eventName] || [];
        var ind = element._lyteEvents[eventName].push({ "func": func, "fromEventListener": true, "context": context });
        return eventName + "-" + ind;
    };

    _LyteComponent.removeLyteEventListener = function (element, listenerId) {
        if (!listenerId) {
            _Lyte.error("No listenerId provided");
            return;
        }
        var split = listenerId.split('-');
        var eventName = split[0];
        var index = parseInt(split[1]);
        if (!element._lyteEvents || !element._lyteEvents[split[0]] || isNaN(index)) {
            _Lyte.error("Invalid listenerId / listener is not available");
            return;
        }
        element._lyteEvents[split[0]][split[1] - 1] = {};
    };

    _LyteComponent.throwEvent = _LC.throwEvent;

    _LC.hasLyteEvents = function (element, eventName) {
        if (element._lyteEvents && element._lyteEvents[eventName]) {
            return true;
        } else {
            return false;
        }
    };

    _LC.handleLyteEvents = function (element, event) {
        var funcs = element._lyteEvents[event.type];
        var ret;
        var eventStopped;
        for (var i = 0; i < funcs.length; i++) {
            if (funcs[i].func) {
                ret = funcs[i].func.call(funcs[i].context ? funcs[i].context : window, event);
                if (ret === false || event.cancelBubble) {
                    eventStopped = true;
                    break;
                }
            }
        }
        if (eventStopped) {
            event.stopPropagation();
        }
        return eventStopped;
    };

    if (!window.LyteComponent) {
        Object.defineProperty(window, "LyteComponent", {
            get: function get() {
                _Lyte.warn("Usage of LyteComponent is deprecated. Use Lyte.Component instead");
                return LyteComponent;
            }
        });
    }
    _LyteComponent.chromeBugFix();
    _LC.booleanAttrList = ["async", "autocomplete", "autofocus", "autoplay", "border", "challenge", "checked1", "compact", "contenteditable", "controls", "default", "defer", "disabled", "formNoValidate", "frameborder", "hidden", "indeterminate", "ismap", "loop", "multiple", "muted", "nohref", "noresize", "noshade", "novalidate", "nowrap", "open", "readonly", "required", "reversed", "scoped", "scrolling", "seamless", "selected", "sortable", "spellcheck", "translate"];
    Lyte.$.requiredMixins.component = function (mix, compDetails) {
        var mixinsToBeUsed = [];
        var actionsFromMixin = {};
        var methodsFromMixin = {};
        var newDefinition = {};
        mixinsToBeUsed.push(mix);
        compDetails.forEach(function (ele) {
            var componentName = ele;
            var customCrmComponent = LyteComponent._registeredComponents[componentName];
            if (mixinsToBeUsed.length) {
                LyteComponent.dataFromMixin(mixinsToBeUsed, actionsFromMixin, methodsFromMixin, newDefinition);
            }
            customCrmComponent._actions = Object.assign(customCrmComponent._actions, actionsFromMixin);
            customCrmComponent.component._actions = Object.assign(customCrmComponent._actions, actionsFromMixin);
            var methods = Object.assign(customCrmComponent._methods, methodsFromMixin);
            delete newDefinition.methods;
            LyteComponent.updateCustomCrmComponent(newDefinition, customCrmComponent);
            customCrmComponent._methods = methods;
            customCrmComponent.component._methods = methods;
            LyteComponent._registeredComponents[componentName] = customCrmComponent;
        });
    };

    Lyte.$.injectServices.component = function (key, name, type, ins, compClass, data) {
        if (compClass) {
            var obj = {};
            obj[compClass.compName] = compClass;
        }
        var registeredComponents = compClass ? obj : _LC._registeredComponents;
        if (registeredComponents) {
            var arr = Object.keys(registeredComponents);
            arr.forEach(function (comp) {
                var component = registeredComponents[comp];
                // obj = {};
                // obj[key] = name;
                // component._serviceToBeUsed = Object.assign(obj, component._serviceToBeUsed);
                if (ins && Lyte.__gS[key]) {
                    component.component.prototype[key] = ins;
                } else {
                    Lyte.$.requiredServices(key, name, function (serviceData, serviceKey) {
                        component.component.prototype[serviceKey] = serviceData;
                    }, undefined, undefined, true, data);
                }
            });
        }
    };
    //security
    Lyte.Security.addGlobalObject = function (instanceObj, additionalObj) {
        for (var property in additionalObj) {
            if (Array.isArray(additionalObj[property])) {
                additionalObj[property].forEach(function (item) {
                    if (instanceObj["_" + property].indexOf(item) == -1) {
                        instanceObj["_" + property].push(item);
                    }
                });
            }
        }
    };
    Lyte.Security.removeGlobalObject = function (instanceObj, additionalObj) {
        for (var property in additionalObj) {
            if (Array.isArray(additionalObj[property])) {
                additionalObj[property].forEach(function (item) {
                    var index = instanceObj["_" + property].indexOf(item);
                    if (index != -1) {
                        instanceObj["_" + property].splice(index, 1);
                    }
                });
            }
        };
    };

    Lyte.Compile.getTrimmedContent = function (content, position, node) {
        var dummyContent = content;
        if (node) {
            position = [];
            var parentNode = node.parentNode;
            while (true) {
                position.unshift(this.getArrayIndex(parentNode.childNodes, node));
                parentNode = parentNode.parentNode;
                node = node.parentNode;
                if (!parentNode) {
                    break;
                }
            }
        }
        for (var _i110 = 0; _i110 < position.length; _i110++) {
            for (var _j13 = content.childNodes.length - 1; _j13 > position[_i110]; _j13--) {
                content.childNodes[_j13].remove();
            }
            content = content.childNodes[position[_i110]];
        }
        return dummyContent;
    };
    Lyte.Compile.getArrayIndex = function (array, value) {
        for (var _i111 = 0; _i111 < array.length; _i111++) {
            if (array[_i111] === value) {
                return _i111;
            };
        }
    };

    Lyte.Compile.splitMixedText = function (str) {
        var stack = [],
            start = 0,
            helper = { name: "concat", args: [] },
            strStack = [],
            lastAdded,
            helperStarted;
        for (var i = 0; i < str.length; i++) {
            var j = i;
            if (helperStarted && str[i] === "'") {
                if (lastAdded === "'" && str[i - 1] !== "\\") {
                    strStack.pop();
                    lastAdded = undefined;
                } else if (!strStack.length) {
                    lastAdded = str[i];
                    strStack.push(lastAdded);
                }
            } else if (helperStarted && str[i] === "\"") {
                if (lastAdded === "\"" && str[i - 1] !== "\\") {
                    strStack.pop();
                    lastAdded = undefined;
                } else if (!strStack.length) {
                    lastAdded = str[i];
                    strStack.push(lastAdded);
                }
            } else if ((helperStarted && !strStack.length || !helperStarted) && str[i - 1] !== "\\" && str[i] === "{" && str[++i] === "{") {
                stack.push('{{');
                helper.args.push("'" + str.substr(start, j - start) + "'");
                start = i + 1;
                helperStarted = true;
            } else if ((helperStarted && !strStack.length || !helperStarted) && str[i] === "}" && str[++i] === "}" && stack.length) {
                stack.pop(start);
                helperStarted = false;
                var toPush = str.substr(start, j - start);
                var actObj = this.getHelper(toPush);
                if (actObj) {
                    toPush = actObj;
                    helper.args.push({ type: "helper", value: toPush });
                } else {
                    helper.args.push(toPush);
                }
                start = i + 1;
            }
        }
        // if(stack.length){
        // return false;
        // }
        if (start < str.length) {
            helper.args.push("'" + str.substr(start, str.length - start) + "'");
        }
        return helper;
    };

    Lyte.Compile.getHelper = function (dynamicValue, newCompile) {
        var helperValue = /\((?:[^)]*|(?:(?:"(?:[^"\\]|\\.)*?")|(?:'([^'\\]|\\.)*?')|[\w\s!@#$%^&*)([\]+=.,_-]*?)*?)\)$/.exec(dynamicValue);
        if (helperValue) {
            return this.getHelperInfo(dynamicValue, helperValue, newCompile);
        }
        return undefined;
    };

    Lyte.Compile.getHelperInfo = function (dynamicValue, helperValue, newCompile) {
        var helperFunc = {};
        helperFunc.name = dynamicValue.substr(0, helperValue.index).replace(/\s/g, '');
        helperValue = helperValue ? helperValue[0].trim() : helperValue;
        if (helperFunc.name == "lyteViewPort" && helperValue == "()") {
            helperFunc.args = [];
            return helperFunc;
        }
        var args = this.getHelperArgs(helperValue.substr(1, helperValue.length - 2), newCompile);
        if (args === false) {
            return false;
        }
        helperFunc.args = args;
        return helperFunc;
    };

    Lyte.Compile.getHelperArgs = function (str, newCompile) {
        var stack = [],
            args = [],
            from = 0;
        var lastPushed = void 0;
        for (var _i112 = 0; _i112 < str.length; _i112++) {
            if (!stack.length && str.charAt(_i112) === ",") {
                var _toPush2 = str.substr(from, _i112 - from);
                _toPush2 = _toPush2.trim();
                if (_toPush2 && _toPush2.startsWith("\"") && _toPush2.endsWith("\"")) {
                    _toPush2 = _toPush2.slice(1, -1);
                    _toPush2 = "'" + _toPush2 + "'";
                }
                _toPush2 = this.getHelperArgValue(_toPush2, newCompile);
                args.push(_toPush2);
                from = _i112 + 1;
            } else if (str.charAt(_i112) === "(") {
                if (stack[stack.length - 1] != "'" && stack[stack.length - 1] != "\"") {
                    stack.push(str.charAt(_i112));
                    lastPushed = str.charAt(_i112);
                }
            } else if (str.charAt(_i112) === ")") {
                if (stack[stack.length - 1] === "(") {
                    stack.pop();
                }
            } else if (str.charAt(_i112) === "'" && str.charAt(_i112 - 1) !== "\\") {
                if (stack[stack.length - 1] === "'") {
                    stack.pop();
                } else if (stack[stack.length - 1] !== "\"") {
                    stack.push(str.charAt(_i112));
                    lastPushed = str.charAt(_i112);
                }
            } else if (str.charAt(_i112) === "\"" && str.charAt(_i112 - 1) !== "\\") {
                if (stack[stack.length - 1] === "\"") {
                    stack.pop();
                    //                  str.replaceAt(i, "'");
                } else if (stack[stack.length - 1] !== "'") {
                    stack.push(str.charAt(_i112));
                    lastPushed = str.charAt(_i112);
                    //                  str.replaceAt(i, "'");
                }
            }
        }
        if (stack.length) {
            return false;
        }
        var toPush = str.substr(from, str.length - from);
        toPush = toPush.trim();
        if (toPush && toPush.startsWith("\"") && toPush.endsWith("\"")) {
            toPush = toPush.slice(1, -1);
            toPush = "'" + toPush + "'";
        }
        try {
            toPush = this.getHelperArgValue(toPush, newCompile);
        } catch (err) {
            //console.log("errr",err);
            return false;
        }

        args.push(toPush);
        if (newCompile) {
            var newArgs = [];
            args.forEach(function (item) {
                if (typeof item === "string" && item[0] !== "'" && item !== "event" && item !== "this") {
                    newArgs.push(_LC.getDV(item));
                } else {
                    newArgs.push(item);
                }
            });
            args = newArgs;
        }
        return args;
    };

    Lyte.Compile.getHelperArgValue = function (argValue, newCompile) {
        switch (argValue) {
            case "undefined":
                return undefined;
            case "true":
                return true;
            case "false":
                return false;
            case "null":
                return null;
            case "":
                return undefined;
            default:
                if (argValue && argValue.startsWith("'") && argValue.endsWith("'")) {
                    //escaping
                    argValue = argValue.replace(/\\\'/g, "'");
                    argValue = argValue.replace(/\\\"/g, '"');
                    return argValue;
                } else if (/\([\w\s,')(]*/.test(argValue)) {
                    return { "type": "helper", "value": this.getHelper(argValue, newCompile) };
                } else if (!isNaN(argValue)) {
                    return parseInt(argValue);
                } else {
                    return argValue;
                }
        }
    };
    Lyte.Compile.getMustache = function (value) {
        value = value && typeof value === "string" ? value.trim() : value;
        if (/^{{(?=[\s]*[\w-_\(\$)]+)/.test(value)) {
            var _arr6 = value.match(/{{[a-zA-Z0-9_.[\]()]*(?![\\])}}/g);
            if (_arr6 && _arr6.length > 1) {
                //console.log("length>1",value)
                return undefined;
            }
            if (!this.syntaxCheck(value) || !/{{[^}]*?(?:(?:('|")[^\1]*?\1)[^}]*?)*}}$/.test(value)) {
                //'
                return undefined;
            }
            var dynamic = value.match(/[\w!@#$%^&*)(+=.,_-]+[\s]*[(]{0,1}(?:"([^"]|\\")*?"|'([^']|\\')*?'|[\w\s!@#$%^&*)([\]+=.,_-]*?)*?[)]{0,1}[\s]*(?=}})/g); //'
            if (dynamic && dynamic.length > 1) {
                return undefined;
            } else {
                dynamic = dynamic ? dynamic[0].trim() : dynamic;
            }
            //        let dynamic = /[\w!@#\$%\^\&*\)\(+=.,_-]+(?:"([^"]|\\")*?"|'([^']|\\')*?'|[\w\s!@#\$%\^\&*\)\(\[\]+=.,_-]*?)*?(?=}}$)/.exec(value);
            return dynamic;
        }
        return undefined;
    };
    Lyte.Compile.syntaxCheck = function (value) {
        var stack = [],
            lastAdded;
        for (var i = 0; i < value.length; i++) {
            if (value[i] === "'") {
                if (lastAdded === "'" && value[i - 1] !== "\\") {
                    stack.pop();
                    lastAdded = undefined;
                } else if (!stack.length) {
                    lastAdded = value[i];
                    stack.push(lastAdded);
                }
            } else if (value[i] === "\"") {
                if (lastAdded === "\"" && value[i - 1] !== "\\") {
                    stack.pop();
                    lastAdded = undefined;
                } else if (!stack.length) {
                    lastAdded = value[i];
                    stack.push(lastAdded);
                }
            }
        }
        if (stack.length) {
            return false;
        }
        return true;
    };
    LyteComponent.replaceWithOrigTemplate = function (node) {
        node._origTemplate._fakeTemp = node;
        return node._origTemplate;
    };
    LyteComponent.pendingViewPortElements = [];
    LyteComponent.isInViewPort = function (el, lazy) {
        if (lazy) {
            return true;
        }
        var rect = el.getBoundingClientRect();
        if (rect.width == 0 && rect.height == 0 && rect.top == 0 && rect.bottom == 0 && el.localName != "dummy-port-element") {
            // hidden Element
            return false;
        }
        var innerHeight = window.innerHeight || document.documentElement.clientHeight;
        var innerWidth = window.innerWidth || document.documentElement.clientWidth;
        return (rect.top >= 0 && rect.top <= innerHeight || rect.bottom >= 0 && rect.bottom <= innerHeight || rect.top <= 0 && rect.bottom >= 0) && (rect.left >= 0 && rect.left <= innerWidth || rect.right >= 0 && rect.right <= innerWidth || rect.left <= 0 && rect.right >= 0);
    };
    _LC._doneRaf = {};
    Lyte.Component.registerHelper("lyteViewPort", function (node, config) {
        var compName = this.localName;
        var self = this;
        var actNode = _LC.getActViewPortTemplate(node);
        if (actNode._viewPortRendered) {
            return false;
        }
        var disableViewPort = config;
        var pve = _LC.pendingViewPortElements;
        var promise = void 0;
        actNode._disable = {};
        if (config && (typeof config === 'undefined' ? 'undefined' : _typeof(config)) == "object") {
            actNode._lazy = node._lazy = config.lazy;
            actNode._custom = true;
            disableViewPort = config.disableViewPort;
            if (config.viewIn || config.viewOut) {
                promise = true;
                actNode._viewIn = config.viewIn ? Object.assign(config.viewIn) : undefined;
                actNode._viewOut = config.viewOut ? Object.assign(config.viewOut) : undefined;

                // actNode._inView = config.inView;
                // actNode._didRender = config.didRender;
                // actNode._isLoading = config.isLoading;
                var _res = void 0,
                    _rej = void 0;
                actNode._renderPromise = new Promise(function (res, rej) {
                    _res = res;
                    _rej = rej;
                });
                actNode._promiseObject = {
                    resolvedByLyte: false,
                    spouse: actNode._viewIn,
                    resolve: function resolve() {
                        if (!actNode._viewOut._afterAppendCalled && actNode._viewOut.beforeRemove && actNode._renderPromise && !actNode._viewOut._beforeRemoveCalled) {
                            actNode._viewOut.beforeRemove.apply(actNode._viewOut, [node._promiseObject]);
                            actNode._viewOut._beforeRemoveCalled = true;
                        }
                        if (actNode._renderPromise) {
                            // let config = actNode._promiseObject.options;
                            // if(config && config.disable){
                            //     if(config.disable.inView === true){
                            //         actNode._disable.inView = true; 
                            //     }
                            //     if(config.disable.didRender === true){
                            //         actNode._disable.didRender = true;
                            //     }
                            // }
                            _res();
                        }
                    },
                    reject: function reject() {
                        actNode._renderPromise._reject = true;
                        // actNode._disable.inView = true;
                        // actNode._disable.didRender = true;
                        _rej();
                    }
                    // options : {
                    //     disable : {
                    //         inView : false,
                    //         didRender : false
                    //     }
                    // }

                    // actNode._renderPromise.resolve = _res;
                    // actNode._renderPromise.reject = _rej;

                };actNode._renderPromise.then(function () {
                    //fix observers issue ember
                    if (!actNode._callee.component) {
                        return;
                    }
                    var waitInd = _LC.waitingForResolve.indexOf(node._renderPromise);
                    if (waitInd != -1) {
                        _LC.waitingForResolve.splice(waitInd, 1);
                    }
                    actNode._renderPromise._resolved = true;
                    var ind = pve.indexOf(actNode);
                    if (ind != -1) {
                        pve.splice(ind, 1);
                    }
                    var viewInIns = actNode._viewIn;
                    if (viewInIns && viewInIns.beforeAppend) {
                        viewInIns.beforeAppend.apply(viewInIns);
                    }
                    _LC._executeIfTemplates(actNode);
                    if (viewInIns && viewInIns.afterAppend) {
                        viewInIns.afterAppend.apply(viewInIns);
                    }
                    actNode._renderPromise = null;
                }, function () {
                    Lyte.error("Promise rejected - Viewport cannot be toggled.");
                });
            }
        }
        if (!disableViewPort) {
            // if(!LyteComponent._pendingAnimationFrame){
            if (!_LC._doneRaf[compName]) {
                requestAnimationFrame(function () {
                    setTimeout(function () {
                        var inViewTemplates = [];
                        var arr = Array.from(pve);
                        var beforeRemoveHook = [];
                        for (var i = arr.length - 1; i >= 0; i--) {
                            var temp = arr[i];
                            var actTemp = _LC.getActViewPortTemplate(temp);
                            var viewOutIns = actTemp._viewOut;
                            //var loaderAfterAppend = actTemp._viewOut.afterAppend;
                            if (viewOutIns && viewOutIns.afterAppend) {
                                viewOutIns.afterAppend.apply(viewOutIns, [actTemp._promiseObject]);
                                viewOutIns._afterAppendCalled = true;
                            }
                        }
                        for (var i = arr.length - 1; i >= 0; i--) {
                            var _temp2 = arr[i];
                            var actTemp = _LC.getActViewPortTemplate(_temp2);
                            // let viewOutIns = actTemp._viewOut;
                            //var loaderAfterAppend = actTemp._viewOut.afterAppend;
                            // if(viewOutIns && viewOutIns.afterAppend){
                            //     viewOutIns.afterAppend.apply(viewOutIns,[actTemp._promiseObject]);
                            //     viewOutIns._afterAppendCalled = true;
                            // }
                            if (_LC.isViewPortTemplate(_temp2) && !_temp2._callee._destroyed) {
                                var _obj20 = {};
                                if (_LC._isInViewPort(actTemp, actTemp._callee, beforeRemoveHook, undefined, _obj20)) {
                                    var nd = pve.splice(i, 1)[0];
                                    _temp2._inPve = false;
                                    _temp2._viewPortRendered = true;
                                    !_obj20.beforeRemoveHook && inViewTemplates.push(nd);
                                }
                                actTemp._inPve = _temp2._inPve;
                                actTemp._viewPortRendered = _temp2._viewPortRendered;
                            }
                        }
                        for (var _i113 = 0; _i113 < beforeRemoveHook.length; _i113++) {
                            beforeRemoveHook[_i113].viewOutIns.beforeRemove.apply(beforeRemoveHook[_i113].viewOutIns, beforeRemoveHook[_i113].arg);
                            _LC.waitingForResolve.push(beforeRemoveHook[_i113].node._renderPromise);
                        }
                        for (var _i114 = 0; _i114 < inViewTemplates.length; _i114++) {
                            _LC._executeIfTemplates(inViewTemplates[_i114]);
                        }
                        // LyteComponent._pendingAnimationFrame = false;
                        _LC._doneRaf[compName] = false;
                        if (inViewTemplates.length) {
                            requestAnimationFrame(function () {
                                setTimeout(function () {
                                    _LC.executePendingViewPort();
                                }, 1);
                            });
                        }
                        !window.isLyteWidget && _LC.resolveLazy();
                    }, 1);
                });
                // LyteComponent._pendingAnimationFrame = true;
                _LC._doneRaf[compName] = true;
            }
            if (pve.indexOf(_LC.getFakeTemplate(node)) == -1) {
                node._inPve = true;
                pve.push(node);
            }
            return true;
        } else if (pve.length) {
            var fakeTemp = _LC.getFakeTemplate(node);
            var ind = pve.indexOf(fakeTemp);
            node._inpve = fakeTemp._inPve = false;
            node._viewPortRendered = fakeTemp._viewPortRendered = true;
            if (ind != -1) {
                // pve[ind]._inpve = node._inPve = false;
                // pve[ind]._viewPortRendered = node._viewPortRendered = true;
                pve.splice(ind, 1);
            }
        }
    });
    LyteComponent.waitingForResolve = [];
    LyteComponent._isInViewPort = function (node, comp, beforeRemoveHook, lazyForce, obj) {
        var fchild = node._caseContent[0];
        if (fchild && _LC.isInViewPort(fchild, lazyForce)) {
            node._isInView = true;
            if (node._custom) {
                var viewOutIns = node._viewOut;
                if (viewOutIns && !node._renderPromise._resolved && viewOutIns.beforeRemove && !viewOutIns._beforeRemoveCalled) {
                    node._promiseObject.resolvedByLyte = true;
                    viewOutIns._beforeRemoveCalled = true;
                    beforeRemoveHook.push({
                        viewOutIns: viewOutIns,
                        arg: [node._promiseObject],
                        node: node
                    });
                    if (obj) {
                        obj.beforeRemoveHook = true;
                        return true;
                    }
                    // viewOutIns.beforeRemove.apply(viewOutIns,[node._promiseObject]);
                } else if (!node._renderPromise._reject) {
                    if (obj) {
                        obj.beforeRemoveHook = true;
                    }
                    return true;
                }
            }
            // if(node._inView && !node._renderPromise._resolved && !node._disable.inView){
            //     node._inView.apply(this,[node._promiseObject]);
            // }
            else {
                    return true;
                }
        }
    };
    LyteComponent.__preLazyRender = false;
    LyteComponent.resolveLazy = function () {
        if (LyteComponent.pendingViewPortElements) {
            requestAnimationFrame(function () {
                setTimeout(function () {
                    var waitingForViewportProcess = false;
                    for (var _key53 in _LC._doneRaf) {
                        if (_LC._doneRaf[_key53]) {
                            waitingForViewportProcess = true;
                        }
                    }
                    if (_LC.waitingForResolve.length) {
                        Promise.all(_LC.waitingForResolve).then(function () {
                            LyteComponent.resolveLazy();
                        }, function () {
                            Lyte.error("Promise rejected - Viewport cannot be toggled.");
                        });
                    } else if (waitingForViewportProcess) {
                        LyteComponent.resolveLazy();
                    } else {
                        // iterate pending and resolve
                        !_LC.__preLazyRender && Lyte.triggerEvent("preLazyRender");
                        _LC.__preLazyRender = true;
                        _LC.executePendingViewPort({ lazy: true });
                    }
                }, 1);
            });
        }
    };
    LyteComponent._executeIfTemplates = function (node) {
        var actNode = _LC.getActViewPortTemplate(node);
        // actNode._renderPromise = null;
        actNode._attributes.value = false;
        var isYieldContext, contextSwitchInfo;
        if (actNode._cx || actNode.nodeType === 2 && actNode.ownerElement._cx) {
            contextSwitchInfo = actNode._cx || actNode.ownerElement._cx;
            var contextSwitchArray = [];
            _LC.changeContext(contextSwitchInfo.node, contextSwitchArray, contextSwitchInfo);
        } else if (actNode.tagName === "LYTE-YIELD" && actNode._callee._cx) {
            isYieldContext = true;
            contextSwitchInfo = actNode._callee._cx;
            var contextSwitchArray = [];
            _LC.changeContext(contextSwitchInfo.node, contextSwitchArray, contextSwitchInfo, true);
        }
        // if(!actNode._callee.component){
        //     // debugger
        // }
        actNode._callee.updateSwitchHelper("if", actNode, actNode._cx, true, true);
        if (contextSwitchInfo) {
            _LC.removeContext(contextSwitchInfo.node, contextSwitchArray, contextSwitchInfo, isYieldContext);
        }
        // node._isViewPortPending = false;
    };
    LyteComponent.isViewPortTemplate = function (node) {
        if ((node.tagName == "TEMPLATE" || node._origTemplate) && node.getAttribute("is") == "if") {
            return true;
        }
    };
    LyteComponent.getActViewPortTemplate = function (node) {
        return node._origTemplate ? node._origTemplate : node;
    };
    LyteComponent.getFakeTemplate = function (node) {
        return node._fakeTemp ? node._fakeTemp : node;
    };
    LyteComponent.executePendingViewPort = function (options) {
        var pve = _LC.pendingViewPortElements;
        if (!pve.length) {
            return;
        }
        var arr = Array.from(pve);
        var inViewPortElements = [];
        var beforeRemoveHook = [];
        var lazyForce = options && options.lazy ? true : undefined;
        var settings = _Lyte.Component.viewPortSettings;
        var lazyToggleCount = settings.lazy.count;
        var lazyToggleByElements = settings.lazy.toggleBy == "elements" ? true : false;
        var lazyToggleByScreen = settings.lazy.toggleBy == "screen" ? true : false;
        if (options && options.lazy && options.lazy.toggleBy) {
            lazyToggleCount = options.lazy.count;
            lazyToggleByElements = options.lazy.toggleBy == "elements" ? true : false;
            lazyToggleByScreen = options.lazy.toggleBy == "screen" ? true : false;
            if (lazyToggleByElements) {
                _LC._toggleElementsCount = lazyToggleCount;
            } else if (lazyToggleByScreen == "screen") {
                _LC._toggleScreenCount = lazyToggleCount;
            }
        }
        var sliceCount = 0;
        _LC.autoRender = _LC.autoRender || options && options.force == "autoRender";
        if ((!options || !options.force) && !_LC.autoRender) {
            for (var i = arr.length - 1; i >= 0; i--) {
                var ele = arr[i];
                if (_LC.isViewPortTemplate(ele)) {
                    var actTemp = _LC.getActViewPortTemplate(ele);
                    lazyForce = actTemp._lazy && lazyForce ? lazyForce : false;
                    if (lazyForce && lazyToggleByElements) {
                        if (lazyToggleCount == 0) {
                            requestAnimationFrame(function () {
                                //eslint-disable-line no-loop-func
                                setTimeout(function () {
                                    //eslint-disable-line no-loop-func
                                    _LC.executePendingViewPort({ lazy: true });
                                });
                            });
                            break;
                        }
                        lazyToggleCount--;
                    }
                    if (_LC._isInViewPort(actTemp, actTemp._callee, beforeRemoveHook, lazyForce)) {
                        inViewPortElements.push(pve.splice(i, 1)[0]);
                        sliceCount++;
                        ele._inPve = false;
                        ele._viewPortRendered = true;
                    }
                    actTemp._inPve = ele._inPve;
                    actTemp._viewPortRendered = ele._viewPortRendered;
                } else if (_LC.isInViewPort(ele._dummyViewPortF) || _LC.isInViewPort(ele._dummyViewPortL)) {
                    ele._dummyViewPortF = ele._dummyViewPortL = undefined;
                    inViewPortElements.push(pve.splice(i, 1)[0]);
                    sliceCount++;
                }
            }
            for (var _i115 = 0; _i115 < beforeRemoveHook.length; _i115++) {
                beforeRemoveHook[_i115].viewOutIns.beforeRemove.apply(beforeRemoveHook[_i115].viewOutIns, beforeRemoveHook[_i115].arg);
            }
        } else {
            inViewPortElements = arr;
        }

        // _LC.isViewPortPending = false;

        var pveLn = arr.length;
        for (var j = 0; j < inViewPortElements.length; j++) {
            var _ele = inViewPortElements[j];
            if (_LC.isViewPortTemplate(_ele)) {
                _LC._executeIfTemplates(_ele);
            } else {
                _ele.setData("lyteViewPort", false);
                var index = pve.indexOf(_ele);
                if (index != -1) {
                    pve.splice(index, 1);
                    sliceCount++;
                }
            }
        }
        _LC.isViewPortPending = false;
        if (inViewPortElements.length && !window.isLyteWidget) {
            requestAnimationFrame(function () {
                requestAnimationFrame(function () {
                    _LC.executePendingViewPort();
                });
            });
        } else if (pveLn == _LC.pendingViewPortElements.length + sliceCount && (!options || !options.lazy)) {
            Lyte.triggerEvent("viewportRendered");
        }
    };

    window.addEventListener("resize", function () {
        requestAnimationFrame(function () {
            requestAnimationFrame(function () {
                _LC.executePendingViewPort();
            });
        });
    });

    document.addEventListener("scroll", function () {
        if (window.isLyteWidget) {
            _LyteComponent.viewPortSettings.debounce = 100;
        }
        var debounceTime = _LyteComponent.viewPortSettings.debounce;
        if (debounceTime) {
            if (_LC.viewPortScrollDebounce) {
                clearTimeout(_LC.viewPortScrollDebounce);
            }
            _LC.viewPortScrollDebounce = setTimeout(function () {
                requestAnimationFrame(function () {
                    requestAnimationFrame(function () {
                        _LC.executePendingViewPort();
                    });
                });
                _LC.viewPortScrollDebound = undefined;
            }, debounceTime);
        } else {
            requestAnimationFrame(function () {
                requestAnimationFrame(function () {
                    _LC.executePendingViewPort();
                });
            });
        }
    }, true);

    LyteComponent.core = {};
    LyteComponent.core._constructor = customElementPrototype;
    LyteComponent.core._registerComponent = customElementPrototype._registerComponent;
    LyteComponent.core.registerComponent = _LC.registerComponent;
    LyteComponent.core.executeBlockHelpers = customElementPrototype.prototype.executeBlockHelpers;
    LyteComponent.core.updateForHelper = customElementPrototype.prototype.updateForHelper;
    LyteComponent.core.updateForInHelper = customElementPrototype.prototype.updateForInHelper;
    LyteComponent.core.updateSwitchHelper = customElementPrototype.prototype.updateSwitchHelper;

    _LyteComponent.viewPortSettings = {
        debounce: 0,
        lazy: {
            toggleBy: "elements", //or "screen"
            count: 100
        },
        executePendingViewPortElements: function executePendingViewPortElements(options) {
            LyteComponent.executePendingViewPort(options);
        },
        resetLazy: function resetLazy() {
            LyteComponent.__preLazyRender = false;
        }
    };

    LyteComponent.insertBeforeNative = function (parent, newNode, refNode) {
        parent.insertBefore(newNode, refNode);
    };
})(window);