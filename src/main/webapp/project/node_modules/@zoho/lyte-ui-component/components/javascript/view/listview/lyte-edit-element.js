Lyte.Component.register("lyte-edit-element", {
	data : function(){

		var __string = "string",
		__boolean = "boolean",
		__object = "object",
		__number = "number",
		__array = "array";

		return {
			ltPropCellData : Lyte.attr( __object, { default : {} } ),
			ltPropRowData : Lyte.attr( __object, { default : {} } ),
			ltPropFormat : Lyte.attr( __string, { default : "MM-DD-YYYY" } ),
			ltPropTimeFormat : Lyte.attr( __string, { default : "" } ),

			ltPropEditYield : Lyte.attr( __boolean, { default : false } ),
			ltPropEditMode : Lyte.attr( __boolean, { default : false } ),

			ltPropCellIndex : Lyte.attr( __number ),
			ltPropRowIndex : Lyte.attr( __number ),

			ltPropValue : Lyte.attr( __string, { default : "" } ),
			ltPropOptions : Lyte.attr( __array, { default : [] } ),

			ltPropNoResult : Lyte.attr( __string, { default : _lyteUiUtils.i18n( 'no.results.found', void 0, 'No Results Found' ) } ),

			isOpen : Lyte.attr( __boolean, { default : false } ),

			styleValue:  Lyte.attr( __string, { default : "display:none" } ),
			displayValue : Lyte.attr( __string, { default : "" } ),
			noResult : Lyte.attr( __string, { default : "lyteSearchHidden" } ),

			properties : Lyte.attr( __string, { default : '{}' } ),
			button : Lyte.attr( 'array', { default : [{text:"ok",purpose:"ok",properties:{ariaButton:{}}}] } )
		}		
	},

	cell_obs : function(){
		clearTimeout( this.__datachange );

		this.__datachange = setTimeout( function(){
			var __data = this.data,
			cellData = __data.ltPropCellData || {},
			rowData = __data.ltPropRowData || {},
			cb = "onValueConstruct",
			newValue = rowData[ cellData.prop ],
			is_not_editable = cellData.editable == false,
			__class = "lyteFilterDisablePointer",
			$node = $L( this.$node );

			if( this.getMethods( cb ) ){
				newValue = this.executeMethod( cb ) || newValue;
			}

			this.setData({
				isOpen : false,
				properties : JSON.stringify( cellData.properties || {} ),
				ltPropValue : newValue
			});
		}.bind( this ), 0 );	

	}.observes( 'ltPropCellData', 'ltPropRowData' ).on( 'init' ),

	edit_obs : function( arg ){
		var final = "display:none";

		if( arg.newValue ){
			var __data = this.data,
			cellData = ( __data.ltPropCellData || {} );

			this.setData( arg.item, ( __data.ltPropRowData || {} )[ cellData.prop ] || "" )

			if( cellData.dataType == "multiselect" ){
				var cb = "onPicklistConstruct",
				fn = function( arr ){
					this.setData( 'ltPropOptions', arr );

					if( arr.length == 0 ){
						this.setData( 'noResult', '' );
					}

					switch( cellData.dataType ){
						case 'multiselect' : {
							var __filter = arr.filter( function( item ){
								return item.value == __data.ltPropValue;
							})[ 0 ];

							if( __filter ){
								this.setData( 'displayValue', __filter.label || '' );
							}
						}
						break;
					}
				}.bind( this );

				if( this.getMethods( cb ) ){
					var ret = this.executeMethod( cb, "", __data.ltPropCellData, __data.ltPropOptions );

					if( ret == false ){
						return fn( [] );
					} else if( ret ){
						if( ret.then ){
						  ret.then( fn );
						} else {
						  fn( ret );
						}
					}
				}
			}

			var __elem = this.$node.getElementsByClassName( 'lyteListviewEditElement' )[ 0 ];

			if( __elem ){
				window.requestAnimationFrame( function(){
					__elem.focus({ preventScroll : true });
				});
			}

			final = "";
		} else {
			this.call_blur( {} );
		}

		this.setData( 'styleValue', final );

	}.observes( 'ltPropEditMode' ),

	didDestroy : function(){
		clearTimeout( this.__raf );
		clearTimeout( this.__timeout );
	},

	call_blur : function( evt ){
		var __this = this,
		$node = __this.$node,
		__data = __this.data;

		if( __data.isOpen || ( evt.type && !__data.ltPropEditMode ) ){
			return;
		}

		var cellData = __data.ltPropCellData,
		rowData = __data.ltPropRowData,
		cellIndex = __data.ltPropCellIndex,
		rowIndex = __data.ltPropRowIndex,
		__value = __data.ltPropValue,
		cb = "onBlur";

		__this.getMethods( cb ) && __this.executeMethod( cb, evt, __value, cellData, rowData, cellIndex, rowIndex, $node );
	},	

	actions : {
		editBlur : function( evt ){

			var r_target = evt.relatedTarget,
			doc = document;

			if( r_target && ( !this.$node.parentNode.contains( r_target ) || r_target == this.$node || this.$node.contains( r_target ) ) ){
				this.__timeout = setTimeout( function(){
					if( this.$node.contains( doc.activeElement ) ){
						return;
					}
					this.call_blur( evt );
				}.bind( this ), 500 );
			} else if( !this.$node.contains( doc.activeElement ) ) {
				this.call_blur( evt );
			}
		}
	},

	methods : {
		dropSelected : function(){
			this.setData( 'displayValue', arguments[ 3 ].getAttribute( 'data-label' ) );
		},

		search : function( arr ){
			this.setData( 'noResult', arr.length ? 'lyteSearchHidden' : "" );
		}
	}
});
