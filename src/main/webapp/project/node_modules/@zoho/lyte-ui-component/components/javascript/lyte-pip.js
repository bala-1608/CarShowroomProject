Lyte.Component.register( 'lyte-pip', {
	data: function() {
		return {
			'ltPropPipMode': Lyte.attr( 'boolean', { 'default': false } ),
			'ltPropHeaderYield': Lyte.attr( 'boolean', { 'default': false } ),
			'ltPropFooterYield': Lyte.attr( 'boolean', { 'default': false } ),
			'ltPropPipWindowWidth': Lyte.attr( 'string', { 'default': '320px' } ),
			'ltPropPipWindowHeight': Lyte.attr( 'string', { 'default': '250px' } ),

			'ltPropResizeMinWidth': Lyte.attr( 'number' ),
			'ltPropResizeMaxWidth': Lyte.attr( 'number' ),
			'ltPropResizeMinHeight': Lyte.attr( 'number' ),
			'ltPropResizeMaxHeight': Lyte.attr( 'number' ),

			'ltPropResize': Lyte.attr( 'boolean', { 'default': true } ),
			'ltPropDraggable': Lyte.attr( 'boolean', { 'default': true } ),

			'ltPropUseBrowserApi': Lyte.attr( 'boolean', { 'default': false } ),

			'ltPropWrapperClass': Lyte.attr( 'string', { 'default': 'lytePipContainer' } ),

			'actualVideoWidth': Lyte.attr( 'number'  ),
			'actualVideoHeight': Lyte.attr( 'number' )
		}
	},

	didConnect: function() {
		this.wormhole = this.$node.querySelector( 'lyte-wormhole' );
	},

	didDestroy: function() {
		if( _lyteUiUtils.pictureInPictureElement === this.$node ) {
			_lyteUiUtils.pictureInPictureElement = null;
		}
	},

	pipObserver: function() {
		var shouldEnablePip = this.getData( 'ltPropPipMode' );

		if( shouldEnablePip ) {
			this.enablePip();
		}
		else {
			this.disablePip();
		}
	}.observes( 'ltPropPipMode' ),

	enablePip: function() {
		var useBrowser = this.useBrowser();

		if( useBrowser ) {
			this.useBrowserApi();
		}
		else {
			this.buildManually();
		}
	},

	useBrowserApi: function() {
		var video = this.getVideo();

		if( document.pictureInPictureElement ) {
			document.exitPictureInPicture();
		}

		video.addEventListener( 'leavepictureinpicture', this.resetPipFlag.bind( this ) );
		video.requestPictureInPicture();
	},

	resetPipFlag: function() {

		// User can leave pip mode without calling lt-prop-pip-mode false. In that case we need to set it to false
		this.data.ltPropPipMode = false;
	},

	buildManually: function() {
		var wormhole = this.wormhole;

		this.closeOtherPipWindows();
		this.setPipWindowWidth();
		wormhole.classList.add( 'lytePipEnabled' );
		this.addResize();
		this.addDraggable();

		_lyteUiUtils.pictureInPictureElement = this.$node;
	},

	closeOtherPipWindows: function() {
		var pictureInPictureElement = _lyteUiUtils.pictureInPictureElement;

		if( pictureInPictureElement && pictureInPictureElement !== this.$node ) {
			pictureInPictureElement.ltProp( 'pipMode', false );
		}
	},

	setPipWindowWidth: function() {
		var clientWidth = this.getVideo().clientWidth;
		var clientHeight = this.getVideo().clientHeight;

		var aspectRatio = clientWidth/clientHeight
		var wormhole = this.wormhole,
		pipWidth = this.getData( 'ltPropPipWindowWidth' ),
		pipHeight = parseFloat(pipWidth)/aspectRatio;
		pipHeight= pipHeight+'px'
		wormhole.style.width = pipWidth;
		wormhole.style.height = pipHeight;
		// Create a ResizeObserver to watch for changes in video dimensions
		const resizeObserver = new ResizeObserver(entries => {
		  this.updatePipWindow();
		});

		// Start observing changes in the video element's size
		resizeObserver.observe(wormhole);
	},

	updatePipWindow: function(){
		var wormhole = this.wormhole;
		var wormholeWidth = wormhole.style.width
		var wormholeHeight = wormhole.style.height
		this.getVideo().style.width = wormholeWidth;
		this.getVideo().style.height = wormholeHeight;
	},

	addResize: function() {
		if( !this.getData( 'ltPropResize' ) ) {
			return ;
		}

		var resizeConfig = this.buildResizeConfig();

		$L( this.wormhole ).enableResize( resizeConfig );
	},

	buildResizeConfig: function() {
		var config = {},
		minWidth = this.getData( 'ltPropResizeMinWidth' ),
		maxWidth = this.getData( 'ltPropResizeMaxWidth' ),
		minHeight = this.getData( 'ltPropResizeMinHeight' ),
		maxHeight = this.getData( 'ltPropResizeMaxHeight' );

		if( minWidth ) {
			config.minWidth = minWidth;
		}

		if( maxWidth ) {
			config.maxWidth = maxWidth;
		}

		if( minHeight ) {
			config.minHeight = minHeight;
		}

		if( maxHeight ) {
			config.maxHeight = maxHeight;
		}

		return config;
	},

	addDraggable: function() {
		if( !this.getData( 'ltPropDraggable' ) ) {
			return ;
		}

		$L( this.wormhole ).draggable( {
			onDragStart: this.dragStart.bind( this ),
			onStop: this.onStop.bind( this ),
			cancel: '.lyteVideoProgressBar'
		} );
	},

	dragStart: function() {
		this.playing = this.isPlaying();
	},

	isPlaying: function() {
		var video = this.getVideo();

		return !!( video.currentTime > 0 && !video.paused && !video.ended && video.readyState > 2 );
	},

	onStop: function() {
		setTimeout( function() {
			var video = this.getVideo(),
			playingBeforeDrag = this.playing,
			playingAfterDrag = this.isPlaying();

			if( playingBeforeDrag && !playingAfterDrag ) {
				video.play();
			}
			else if( !playingBeforeDrag && playingAfterDrag ) {
				video.pause();
			}
		}.bind( this ), 0 );
	},

	disablePip: function() {
		var useBrowser = this.useBrowser();

		if( useBrowser ) {
			this.disableBrowserPip();
		}
		else {
			this.disableManualPip();
		}
	},

	disableBrowserPip: function() {
		if( document.pictureInPictureElement ) {
			document.exitPictureInPicture();
		}
	},

	disableManualPip: function() {
		var wormhole = this.wormhole;

		wormhole.classList.remove( 'lytePipEnabled' );
		wormhole.setAttribute( 'style', '' );
		this.setNormalWindowWidth();
		this.removeResize();
		this.removeDraggable();

		_lyteUiUtils.pictureInPictureElement = null;
	},

	setNormalWindowWidth: function() {
		var wormhole = this.wormhole;

		wormhole.style.width = '';
		wormhole.style.height = '';
	},

	removeResize: function() {
		if( !this.getData( 'ltPropResize' ) ) {
			return ;
		}

		$L( this.wormhole ).enableResize( 'destroy' );
	},

	removeDraggable: function() {
		if( !this.getData( 'ltPropDraggable' ) ) {
			return ;
		}

		$L( this.wormhole ).draggable( 'destroy' );
	},

	getVideo: function() {
		return this.wormhole.querySelector( 'video' );
	},

	getPipVideoContainer: function() {
		return this.$node.querySelector( '.lytePipVideoContainer' );
	},

	useBrowser: function() {
		return this.getData( 'ltPropUseBrowserApi' ) && document.pictureInPictureEnabled;
	},
	actions : {
		enableFullScreen: function(){
			video = this.getVideo()
			if (video.requestFullscreen) {
				video.requestFullscreen();
			  } else if (video.mozRequestFullScreen) {
				video.mozRequestFullScreen();
			  } else if (video.webkitRequestFullscreen) {
				video.webkitRequestFullscreen();
			  } else if (video.msRequestFullscreen) {
				video.msRequestFullscreen();
			  }
		},
		disablePip: function () {
			video = this.getVideo()
			this.$node.ltProp( 'pipMode', false );
		}
	}
} );